import { useState, useEffect, useRef, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Download, RefreshCw, Loader2, CheckCircle, XCircle, AlertCircle } from 'lucide-react'
import { toast } from 'sonner'

interface AutoParseTask {
  task_id: string
  status: string
  progress: number
  message: string
  total_slugs: number
  processed_slugs: number
  skipped_slugs: string[]
  imported_slugs: string[]
  failed_slugs: string[]
  start_time: string
  end_time?: string
  logs?: string[]  // –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
}

interface AutoUpdateTask {
  task_id: string
  status: string
  progress: number
  message: string
  total_mangas: number
  processed_mangas: number
  updated_mangas: string[]
  failed_mangas: string[]
  new_chapters_count: number
  start_time: string
  end_time?: string
  logs?: string[]  // –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
}

const AUTO_PARSE_STORAGE_KEY = 'autoParseTaskState'
const AUTO_UPDATE_STORAGE_KEY = 'autoUpdateTaskState'
const AUTO_TASK_POLL_INTERVAL = 2000
const FINAL_AUTO_STATUSES = new Set(['completed', 'failed', 'cancelled'])

const isTaskActive = (status?: string | null): boolean => {
  if (!status) {
    return false
  }

  const normalized = status.toLowerCase()
  return normalized === 'pending' || normalized === 'running'
}

const normalizeAutoParseTask = (payload: Partial<AutoParseTask> | null | undefined): AutoParseTask => {
  const base: AutoParseTask = {
    task_id: String(payload?.task_id ?? ''),
    status: String(payload?.status ?? 'pending'),
    progress: typeof payload?.progress === 'number' ? payload.progress : 0,
    message: typeof payload?.message === 'string' ? payload.message : '',
    total_slugs: typeof payload?.total_slugs === 'number' ? payload.total_slugs : 0,
    processed_slugs: typeof payload?.processed_slugs === 'number' ? payload.processed_slugs : 0,
    skipped_slugs: Array.isArray(payload?.skipped_slugs) ? payload!.skipped_slugs : [],
    imported_slugs: Array.isArray(payload?.imported_slugs) ? payload!.imported_slugs : [],
    failed_slugs: Array.isArray(payload?.failed_slugs) ? payload!.failed_slugs : [],
    start_time: typeof payload?.start_time === 'string' ? payload.start_time : new Date().toISOString(),
    end_time: typeof payload?.end_time === 'string' ? payload.end_time : undefined,
    logs: Array.isArray(payload?.logs) ? payload!.logs : []
  }

  return base
}

const normalizeAutoUpdateTask = (payload: Partial<AutoUpdateTask> | null | undefined): AutoUpdateTask => {
  const base: AutoUpdateTask = {
    task_id: String(payload?.task_id ?? ''),
    status: String(payload?.status ?? 'pending'),
    progress: typeof payload?.progress === 'number' ? payload.progress : 0,
    message: typeof payload?.message === 'string' ? payload.message : '',
    total_mangas: typeof payload?.total_mangas === 'number' ? payload.total_mangas : 0,
    processed_mangas: typeof payload?.processed_mangas === 'number' ? payload.processed_mangas : 0,
    updated_mangas: Array.isArray(payload?.updated_mangas) ? payload!.updated_mangas : [],
    failed_mangas: Array.isArray(payload?.failed_mangas) ? payload!.failed_mangas : [],
    new_chapters_count: typeof payload?.new_chapters_count === 'number' ? payload.new_chapters_count : 0,
    start_time: typeof payload?.start_time === 'string' ? payload.start_time : new Date().toISOString(),
    end_time: typeof payload?.end_time === 'string' ? payload.end_time : undefined,
    logs: Array.isArray(payload?.logs) ? payload!.logs : []
  }

  return base
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function LogViewer({ logs }: { logs?: string[] }) {
  const logContainerRef = useRef<HTMLDivElement>(null)
  const [autoScroll, setAutoScroll] = useState(true)

  useEffect(() => {
    if (autoScroll && logContainerRef.current) {
      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight
    }
  }, [logs, autoScroll])

  const handleScroll = () => {
    if (logContainerRef.current) {
      const { scrollTop, scrollHeight, clientHeight } = logContainerRef.current
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤–≤–µ—Ä—Ö, –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
      const isAtBottom = scrollHeight - scrollTop - clientHeight < 10
      setAutoScroll(isAtBottom)
    }
  }

  if (!logs || logs.length === 0) {
    return (
      <div className="bg-gray-950 rounded-lg p-4 font-mono text-sm text-gray-400 border border-gray-800">
        <div className="flex items-center gap-2">
          <Loader2 className="h-4 w-4 animate-spin" />
          <span>–û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤...</span>
        </div>
      </div>
    )
  }

  const getLogColor = (log: string) => {
    if (log.includes('[ERROR]')) return 'text-red-400'
    if (log.includes('[WARN]') || log.includes('[WARNING]')) return 'text-yellow-400'
    if (log.includes('[INFO]')) return 'text-green-400'
    if (log.includes('[DEBUG]')) return 'text-blue-400'
    return 'text-gray-300'
  }

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <Label className="text-sm font-medium text-white">–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Label>
        <div className="flex items-center gap-2">
          <Badge variant={autoScroll ? "default" : "secondary"} className="text-xs">
            {autoScroll ? 'üîÑ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª' : '‚è∏Ô∏è –ü–∞—É–∑–∞'}
          </Badge>
          <span className="text-xs text-muted-foreground">
            {logs.length} —Å—Ç—Ä–æ–∫
          </span>
        </div>
      </div>
      <div
        ref={logContainerRef}
        onScroll={handleScroll}
        className="bg-gray-950 rounded-lg p-4 font-mono text-sm max-h-96 overflow-y-auto border border-gray-800 shadow-inner"
        style={{
          scrollBehavior: autoScroll ? 'smooth' : 'auto',
        }}
      >
        {logs.map((log, index) => (
          <div
            key={index}
            className={`${getLogColor(log)} leading-relaxed hover:bg-gray-900 px-2 py-1 rounded transition-colors`}
          >
            {log}
          </div>
        ))}
      </div>
    </div>
  )
}

export function MangaManagement() {
  const [catalogPage, setCatalogPage] = useState<number>(1)
  const [parseLimit, setParseLimit] = useState<number | null>(null)
  const [autoParseTask, setAutoParseTask] = useState<AutoParseTask | null>(null)
  const [autoUpdateTask, setAutoUpdateTask] = useState<AutoUpdateTask | null>(null)
  const [isAutoParsing, setIsAutoParsing] = useState(false)
  const [isAutoUpdating, setIsAutoUpdating] = useState(false)

  const autoParseIntervalRef = useRef<number | null>(null)
  const autoUpdateIntervalRef = useRef<number | null>(null)
  const autoParseTaskRef = useRef<AutoParseTask | null>(null)
  const autoUpdateTaskRef = useRef<AutoUpdateTask | null>(null)
  const autoParsePrevStatusRef = useRef<string | null>(null)
  const autoUpdatePrevStatusRef = useRef<string | null>(null)

  const persistAutoParseTask = useCallback((task: AutoParseTask | null) => {
    if (typeof window === 'undefined') {
      return
    }

    if (!task || !task.task_id) {
      window.localStorage.removeItem(AUTO_PARSE_STORAGE_KEY)
      return
    }

    try {
      window.localStorage.setItem(AUTO_PARSE_STORAGE_KEY, JSON.stringify(task))
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞:', error)
    }
  }, [])

  const persistAutoUpdateTask = useCallback((task: AutoUpdateTask | null) => {
    if (typeof window === 'undefined') {
      return
    }

    if (!task || !task.task_id) {
      window.localStorage.removeItem(AUTO_UPDATE_STORAGE_KEY)
      return
    }

    try {
      window.localStorage.setItem(AUTO_UPDATE_STORAGE_KEY, JSON.stringify(task))
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
    }
  }, [])

  useEffect(() => {
    autoParseTaskRef.current = autoParseTask
    if (autoParseTask) {
      persistAutoParseTask(autoParseTask)
    } else {
      persistAutoParseTask(null)
    }
  }, [autoParseTask, persistAutoParseTask])

  useEffect(() => {
    autoUpdateTaskRef.current = autoUpdateTask
    if (autoUpdateTask) {
      persistAutoUpdateTask(autoUpdateTask)
    } else {
      persistAutoUpdateTask(null)
    }
  }, [autoUpdateTask, persistAutoUpdateTask])

  const startAutoParsePolling = useCallback((taskId: string) => {
    if (!taskId) {
      return
    }

    const fetchStatus = async () => {
      try {
        const response = await fetch(`/api/parser/auto-parse/status/${taskId}`)
        const data = await response.json()

        if (response.ok) {
          const normalized = normalizeAutoParseTask({ ...(autoParseTaskRef.current ?? undefined), ...data, task_id: taskId })
          setAutoParseTask(normalized)
          const running = isTaskActive(normalized.status)
          setIsAutoParsing(running)

          if (!running && autoParseIntervalRef.current) {
            window.clearInterval(autoParseIntervalRef.current)
            autoParseIntervalRef.current = null
          }
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞:', data?.error ?? response.statusText)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞:', error)
      }
    }

    if (autoParseIntervalRef.current) {
      window.clearInterval(autoParseIntervalRef.current)
    }

    fetchStatus()
    autoParseIntervalRef.current = window.setInterval(fetchStatus, AUTO_TASK_POLL_INTERVAL)
  }, [])

  const startAutoUpdatePolling = useCallback((taskId: string) => {
    if (!taskId) {
      return
    }

    const fetchStatus = async () => {
      try {
        const response = await fetch(`/api/parser/auto-update/status/${taskId}`)
        const data = await response.json()

        if (response.ok) {
          const normalized = normalizeAutoUpdateTask({ ...(autoUpdateTaskRef.current ?? undefined), ...data, task_id: taskId })
          setAutoUpdateTask(normalized)
          const running = isTaskActive(normalized.status)
          setIsAutoUpdating(running)

          if (!running && autoUpdateIntervalRef.current) {
            window.clearInterval(autoUpdateIntervalRef.current)
            autoUpdateIntervalRef.current = null
          }
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data?.error ?? response.statusText)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      }
    }

    if (autoUpdateIntervalRef.current) {
      window.clearInterval(autoUpdateIntervalRef.current)
    }

    fetchStatus()
    autoUpdateIntervalRef.current = window.setInterval(fetchStatus, AUTO_TASK_POLL_INTERVAL)
  }, [])

  useEffect(() => () => {
    if (autoParseIntervalRef.current) {
      window.clearInterval(autoParseIntervalRef.current)
      autoParseIntervalRef.current = null
    }
    if (autoUpdateIntervalRef.current) {
      window.clearInterval(autoUpdateIntervalRef.current)
      autoUpdateIntervalRef.current = null
    }
  }, [])

  useEffect(() => {
    const currentStatus = autoParseTask?.status ?? null
    const previousStatus = autoParsePrevStatusRef.current

    if (currentStatus && currentStatus !== previousStatus && FINAL_AUTO_STATUSES.has(currentStatus.toLowerCase())) {
      if (currentStatus.toLowerCase() === 'completed') {
        const imported = autoParseTask?.imported_slugs?.length ?? 0
        const skipped = autoParseTask?.skipped_slugs?.length ?? 0
        toast.success(`–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`)
      } else if (currentStatus.toLowerCase() === 'cancelled') {
        toast.warning('–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω')
      } else if (currentStatus.toLowerCase() === 'failed') {
        toast.error('–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π')
      }
    }

    autoParsePrevStatusRef.current = currentStatus
  }, [autoParseTask])

  useEffect(() => {
    const currentStatus = autoUpdateTask?.status ?? null
    const previousStatus = autoUpdatePrevStatusRef.current

    if (currentStatus && currentStatus !== previousStatus && FINAL_AUTO_STATUSES.has(currentStatus.toLowerCase())) {
      if (currentStatus.toLowerCase() === 'completed') {
        const updated = autoUpdateTask?.updated_mangas?.length ?? 0
        const newChapters = autoUpdateTask?.new_chapters_count ?? 0
        toast.success(`–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–Ω–≥: ${updated}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤: ${newChapters}`)
      } else if (currentStatus.toLowerCase() === 'failed') {
        toast.error('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π')
      }
    }

    autoUpdatePrevStatusRef.current = currentStatus
  }, [autoUpdateTask])

  useEffect(() => {
    if (typeof window === 'undefined') {
      return
    }

    try {
      const storedAutoParse = window.localStorage.getItem(AUTO_PARSE_STORAGE_KEY)
      if (storedAutoParse) {
        const parsed = normalizeAutoParseTask(JSON.parse(storedAutoParse))
        if (parsed.task_id) {
          setAutoParseTask(parsed)
          autoParseTaskRef.current = parsed
          if (isTaskActive(parsed.status)) {
            setIsAutoParsing(true)
            startAutoParsePolling(parsed.task_id)
          }
        }
      }

      const storedAutoUpdate = window.localStorage.getItem(AUTO_UPDATE_STORAGE_KEY)
      if (storedAutoUpdate) {
        const parsed = normalizeAutoUpdateTask(JSON.parse(storedAutoUpdate))
        if (parsed.task_id) {
          setAutoUpdateTask(parsed)
          autoUpdateTaskRef.current = parsed
          if (isTaskActive(parsed.status)) {
            setIsAutoUpdating(true)
            startAutoUpdatePolling(parsed.task_id)
          }
        }
      }
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage:', error)
      window.localStorage.removeItem(AUTO_PARSE_STORAGE_KEY)
      window.localStorage.removeItem(AUTO_UPDATE_STORAGE_KEY)
    }
  }, [startAutoParsePolling, startAutoUpdatePolling])

  // –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–≥–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
  const startAutoParsing = async () => {
    if (catalogPage <= 0) {
      toast.error('–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      return
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è limit
    if (parseLimit !== null && parseLimit <= 0) {
      toast.error('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      return
    }

    setIsAutoParsing(true)
    
    try {
      const response = await fetch('/api/parser/auto-parse', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          page: catalogPage,
          limit: parseLimit 
        })
      })

      const data = await response.json()

      if (response.ok) {
        const taskId = String(data.task_id ?? data.taskId ?? '')
        const normalized = normalizeAutoParseTask({
          ...data,
          task_id: taskId,
          start_time: data.start_time ?? new Date().toISOString()
        })
        setAutoParseTask(normalized)
        autoParseTaskRef.current = normalized
        setIsAutoParsing(true)
        toast.success('–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω')
        startAutoParsePolling(taskId)
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞')
        setIsAutoParsing(false)
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
      setIsAutoParsing(false)
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞
  const cancelAutoParsing = async () => {
    if (!autoParseTask?.task_id) {
      toast.error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã')
      return
    }

    try {
      const response = await fetch(`/api/parser/auto-parse/cancel/${autoParseTask.task_id}`, {
        method: 'POST'
      })

      const data = await response.json()

      if (response.ok && data.cancelled) {
        toast.success('–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...')
        // –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ polling
      } else {
        toast.error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
    }
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–∏
  const startAutoUpdate = async () => {
    setIsAutoUpdating(true)

    try {
      const response = await fetch('/api/parser/auto-update', {
        method: 'POST'
      })

      const data = await response.json()

      if (response.ok) {
        const taskId = String(data.task_id ?? data.taskId ?? '')
        const normalized = normalizeAutoUpdateTask({
          ...data,
          task_id: taskId,
          start_time: data.start_time ?? new Date().toISOString()
        })
        setAutoUpdateTask(normalized)
        autoUpdateTaskRef.current = normalized
        setIsAutoUpdating(true)
        toast.success('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
        startAutoUpdatePolling(taskId)
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
        setIsAutoUpdating(false)
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
      setIsAutoUpdating(false)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Loader2 className="h-4 w-4 text-yellow-500 animate-spin" />
      case 'running':
        return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'failed':
        return <XCircle className="h-4 w-4 text-red-500" />
      default:
        return <AlertCircle className="h-4 w-4 text-gray-500" />
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–æ–π</h3>
        <p className="text-sm text-muted-foreground">
          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–∏
        </p>
      </div>

      {/* –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ */}
      <Card>
        <CardHeader>
          <CardTitle>–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–≥–∏</CardTitle>
          <CardDescription>
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥, –±–∏–ª–¥–∏–Ω–≥ –∏ –∏–º–ø–æ—Ä—Ç –º–∞–Ω–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ MangaLib. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞–Ω–≥–∏.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="catalogPage">
              –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ MangaLib
            </Label>
            <Input
              id="catalogPage"
              type="number"
              min="1"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3...)"
              value={catalogPage}
              onChange={(e) => setCatalogPage(parseInt(e.target.value, 10) || 1)}
              disabled={isAutoParsing}
              className="bg-background text-white"
            />
            <p className="text-xs text-muted-foreground">
              –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ 60 –º–∞–Ω–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ MangaLib
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="parseLimit">
              –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–Ω–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </Label>
            <Input
              id="parseLimit"
              type="number"
              min="1"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20, 100) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö"
              value={parseLimit ?? ''}
              onChange={(e) => {
                const value = e.target.value
                setParseLimit(value === '' ? null : parseInt(value, 10))
              }}
              disabled={isAutoParsing}
              className="bg-background text-white"
            />
            <p className="text-xs text-muted-foreground">
              –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –º–∞–Ω–≥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            </p>
          </div>

          <div className="flex gap-2">
            <Button
              onClick={startAutoParsing}
              disabled={isAutoParsing}
              className="flex-1"
            >
              {isAutoParsing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  {parseLimit 
                    ? `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${catalogPage}, –ª–∏–º–∏—Ç: ${parseLimit})` 
                    : `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${catalogPage})`
                  }
                </>
              )}
            </Button>
            
            {isAutoParsing && autoParseTask?.status === 'running' && (
              <Button
                onClick={cancelAutoParsing}
                variant="destructive"
                className="px-8"
              >
                <XCircle className="h-4 w-4 mr-2" />
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
            )}
          </div>

          {/* –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞ */}
          {autoParseTask && (
            <div className="border border-border rounded-lg p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getStatusIcon(autoParseTask.status)}
                  <div>
                    <h4 className="font-medium text-white">–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥</h4>
                    <p className="text-sm text-muted-foreground">
                      {autoParseTask.message}
                    </p>
                  </div>
                </div>
                <Badge className={
                  autoParseTask.status === 'completed' ? 'bg-green-500' :
                  autoParseTask.status === 'failed' ? 'bg-red-500' :
                  autoParseTask.status === 'running' ? 'bg-blue-500' : 'bg-yellow-500'
                }>
                  {autoParseTask.status}
                </Badge>
              </div>

              <Progress value={autoParseTask.progress} className="h-2" />

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-muted-foreground">–í—Å–µ–≥–æ:</span>
                  <span className="ml-2 text-white">{autoParseTask.total_slugs || 0}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</span>
                  <span className="ml-2 text-white">{autoParseTask.processed_slugs || 0}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</span>
                  <span className="ml-2 text-green-500">{autoParseTask.imported_slugs?.length || 0}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–ü—Ä–æ–ø—É—â–µ–Ω–æ:</span>
                  <span className="ml-2 text-yellow-500">{autoParseTask.skipped_slugs?.length || 0}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–û—à–∏–±–æ–∫:</span>
                  <span className="ml-2 text-red-500">{autoParseTask.failed_slugs?.length || 0}</span>
                </div>
              </div>

              {(autoParseTask.failed_slugs?.length || 0) > 0 && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {autoParseTask.failed_slugs?.join(', ') || ''}
                  </AlertDescription>
                </Alert>
              )}

              {/* –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
              <LogViewer logs={autoParseTask.logs} />
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
      <Card>
        <CardHeader>
          <CardTitle>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–∏</CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –≥–ª–∞–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞–Ω–≥ –≤ —Å–∏—Å—Ç–µ–º–µ
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –º–∞–Ω–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö.
              –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.
            </AlertDescription>
          </Alert>

          <Button
            onClick={startAutoUpdate}
            disabled={isAutoUpdating}
            className="w-full"
          >
            {isAutoUpdating ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
              </>
            ) : (
              <>
                <RefreshCw className="h-4 w-4 mr-2" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
              </>
            )}
          </Button>

          {/* –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          {autoUpdateTask && (
            <div className="border border-border rounded-lg p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getStatusIcon(autoUpdateTask.status)}
                  <div>
                    <h4 className="font-medium text-white">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h4>
                    <p className="text-sm text-muted-foreground">
                      {autoUpdateTask.message}
                    </p>
                  </div>
                </div>
                <Badge className={
                  autoUpdateTask.status === 'completed' ? 'bg-green-500' :
                  autoUpdateTask.status === 'failed' ? 'bg-red-500' :
                  autoUpdateTask.status === 'running' ? 'bg-blue-500' : 'bg-yellow-500'
                }>
                  {autoUpdateTask.status}
                </Badge>
              </div>

              <Progress value={autoUpdateTask.progress} className="h-2" />

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-muted-foreground">–í—Å–µ–≥–æ –º–∞–Ω–≥:</span>
                  <span className="ml-2 text-white">{autoUpdateTask.total_mangas}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</span>
                  <span className="ml-2 text-white">{autoUpdateTask.processed_mangas}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–Ω–≥:</span>
                  <span className="ml-2 text-green-500">{autoUpdateTask.updated_mangas.length}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–î–æ–±–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤:</span>
                  <span className="ml-2 text-blue-500">{autoUpdateTask.new_chapters_count}</span>
                </div>
                <div>
                  <span className="text-muted-foreground">–û—à–∏–±–æ–∫:</span>
                  <span className="ml-2 text-red-500">{autoUpdateTask.failed_mangas.length}</span>
                </div>
              </div>

              {autoUpdateTask.updated_mangas.length > 0 && (
                <div className="space-y-1">
                  <p className="text-sm font-medium text-white">–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞–Ω–≥–∏:</p>
                  <div className="text-xs text-muted-foreground max-h-32 overflow-y-auto">
                    {autoUpdateTask.updated_mangas.map((manga, i) => (
                      <div key={i}>‚Ä¢ {manga}</div>
                    ))}
                  </div>
                </div>
              )}

              {autoUpdateTask.failed_mangas.length > 0 && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {autoUpdateTask.failed_mangas.join(', ')}
                  </AlertDescription>
                </Alert>
              )}

              {/* –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
              <LogViewer logs={autoUpdateTask.logs} />
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
