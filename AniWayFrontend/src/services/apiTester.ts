/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ –Ω–æ–≤—ã—Ö API –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import { activityStatsApi } from './activityStatsApi';
import { authService } from './authServiceExtended';

export class ApiTester {
  /**
   * –¢–µ—Å—Ç –≤—Å–µ—Ö endpoint'–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  static async testAllEndpoints(userId: number) {
    console.group('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    const results = {
      userActivity: await this.testUserActivity(userId),
      readingActivity: await this.testReadingActivity(userId),
      reviewActivity: await this.testReviewActivity(userId),
      readingStats: await this.testReadingStats()
    };

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    console.groupEnd();
    
    return results;
  }

  /**
   * –¢–µ—Å—Ç –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async testUserActivity(userId: number) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/activity/user/${userId}`);
      const activities = await authService.getUserActivity(userId, 5);
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', activities);
      return { success: true, count: activities.length, data: activities };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
   */
  static async testReadingActivity(userId: number) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/activity/user/${userId}/reading`);
      const activities = await authService.getUserReadingActivity(userId, 5);
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è:', activities);
      return { success: true, count: activities.length, data: activities };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤
   */
  static async testReviewActivity(userId: number) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/activity/user/${userId}/reviews`);
      const activities = await authService.getUserReviewActivity(userId, 5);
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–æ–≤:', activities);
      return { success: true, count: activities.length, data: activities };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á—Ç–µ–Ω–∏—è
   */
  static async testReadingStats() {
    try {
      console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/progress/stats');
      const stats = await authService.getReadingStatistics();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è:', stats);
      return { success: true, data: stats };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á—Ç–µ–Ω–∏—è:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   */
  static async testApiAvailability() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');
    const isAvailable = await activityStatsApi.checkApiAvailability();
    console.log(isAvailable ? '‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    return isAvailable;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static async getDebugData(userId: number) {
    console.group('üêõ –°–±–æ—Ä –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    const debugData = {
      timestamp: new Date().toISOString(),
      userId,
      apiAvailable: await this.testApiAvailability(),
      authToken: !!authService.getToken(),
      userRole: authService.getUserRole(),
      isAuthenticated: authService.isAuthenticated(),
      tests: await this.testAllEndpoints(userId)
    };

    console.log('üìã –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', debugData);
    console.groupEnd();
    
    return debugData;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö
   */
  static validateActivityData(activities: any[]) {
    const requiredFields = ['id', 'userId', 'activityType', 'message', 'timestamp'];
    const results = activities.map(activity => {
      const missing = requiredFields.filter(field => !(field in activity));
      return {
        id: activity.id,
        valid: missing.length === 0,
        missingFields: missing
      };
    });

    console.log('üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', results);
    return results;
  }

  static validateStatsData(stats: any) {
    const expectedFields = [
      'totalMangaRead', 
      'totalChaptersRead', 
      'totalReadingTimeMinutes',
      'favoriteGenres',
      'readingStreak',
      'averageRating'
    ];
    
    const present = expectedFields.filter(field => field in stats);
    const missing = expectedFields.filter(field => !(field in stats));
    
    const result = {
      valid: missing.length === 0,
      presentFields: present,
      missingFields: missing,
      data: stats
    };

    console.log('üìä –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', result);
    return result;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
(window as any).testProfileApi = ApiTester.getDebugData;
(window as any).testActivityApi = ApiTester.testAllEndpoints;

export { activityStatsApi, authService as extendedAuthService };
