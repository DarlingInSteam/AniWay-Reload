package shadowshift.studio.mangaservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import shadowshift.studio.mangaservice.entity.Manga;
import shadowshift.studio.mangaservice.entity.Genre;
import shadowshift.studio.mangaservice.entity.Tag;
import shadowshift.studio.mangaservice.repository.MangaRepository;
import shadowshift.studio.mangaservice.websocket.ProgressWebSocketHandler;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MelonService.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏–º–ø–æ—Ä—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–æ–π —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å Melon.
 *
 * @author ShadowShiftStudio
 */
@Service
public class MelonIntegrationService {

    private static final Logger logger = LoggerFactory.getLogger(MelonIntegrationService.class);

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private MangaRepository mangaRepository;

    @Autowired
    private ImportTaskService importTaskService;

    @Autowired
    private ProgressWebSocketHandler webSocketHandler;

    @Autowired
    private GenreService genreService;

    @Autowired
    private TagService tagService;

    @Autowired
    @Lazy
    private AutoParsingService autoParsingService;

    /**
     * URL —Å–µ—Ä–≤–∏—Å–∞ Melon.
     */
    @Value("${melon.service.url:http://melon-service:8084}")
    private String melonServiceUrl;

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ Melon.
     */
    @Value("${melon.service.public.url:http://localhost:8084}")
    private String melonServicePublicUrl;

    @Autowired
    private FullParsingTaskRunner fullParsingTaskRunner;
    
    // –ú–∞–ø–ø–∏–Ω–≥ fullParsingTaskId -> autoParsingTaskId –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ buildTask
    private final Map<String, String> fullParsingToAutoParsingTask = new HashMap<>();
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É fullParsingTaskId –∏ autoParsingTaskId.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AutoParsingService –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª–æ–≥–∏ –æ—Ç buildTask –ø–æ–ø–∞–¥–∞–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞–¥–∞—á—É.
     */
    public void registerAutoParsingLink(String fullParsingTaskId, String autoParsingTaskId) {
        if (fullParsingTaskId != null && autoParsingTaskId != null) {
            fullParsingToAutoParsingTask.put(fullParsingTaskId, autoParsingTaskId);
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤—è–∑—å fullParsingTaskId={} ‚Üí autoParsingTaskId={}", 
                fullParsingTaskId, autoParsingTaskId);
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç slug –¥–ª—è MangaLib, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å ID-- –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
     * MangaLib –∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ä–º–∞—Ç: —Ç–µ–ø–µ—Ä—å slug'–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç "ID--slug" (–Ω–∞–ø—Ä–∏–º–µ—Ä "7580--i-alone-level-up")
     * –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –≤ –ë–î –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ "i-alone-level-up"
     * 
     * @param slug –∏—Å—Ö–æ–¥–Ω—ã–π slug (–º–æ–∂–µ—Ç –±—ã—Ç—å "7580--i-alone-level-up" –∏–ª–∏ "i-alone-level-up")
     * @return –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π slug –±–µ–∑ ID (–≤—Å–µ–≥–¥–∞ "i-alone-level-up")
     */
    private String normalizeSlugForMangaLib(String slug) {
        if (slug == null || slug.isEmpty()) {
            return slug;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "ID--slug"
        if (slug.contains("--")) {
            String[] parts = slug.split("--", 2);
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —á–∏—Å–ª–æ (ID), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (slug)
            if (parts.length == 2 && parts[0].matches("\\d+")) {
                logger.debug("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è MangaLib slug: '{}' -> '{}'", slug, parts[1]);
                return parts[1];
            }
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ "ID--slug", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return slug;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–≥–∏ —á–µ—Ä–µ–∑ MelonService
     */
    public Map<String, Object> startParsing(String slug) {
        String url = melonServiceUrl + "/parse";

        Map<String, String> request = new HashMap<>();
        request.put("slug", slug);
        request.put("parser", "mangalib");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, String>> entity = new HttpEntity<>(request, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(url, entity, Map.class);
        return response.getBody();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–∞–Ω–≥–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–º–ø–æ—Ä—Ç–æ–º
     */
    public Map<String, Object> startBatchParsing(List<String> slugs, String parser, Boolean autoImport) {
        String url = melonServiceUrl + "/batch-parse";

        Map<String, Object> request = new HashMap<>();
        request.put("slugs", slugs);
        request.put("parser", parser);
        request.put("auto_import", autoImport);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(url, entity, Map.class);
        return response.getBody();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–≥–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     * –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∏ÔøΩÔøΩ–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–æ startParsing
     */
    public Map<String, Object> startFullParsing(String slug) {
        try {
            Map<String, Object> parseResult = startParsing(slug);
            if (parseResult == null || !parseResult.containsKey("task_id")) {
                return Map.of("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥");
            }
            String parseTaskId = (String) parseResult.get("task_id");
            String fullParsingTaskId = UUID.randomUUID().toString();
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ this
            fullParsingTaskRunner.startFullParsingTask(this, fullParsingTaskId, parseTaskId, slug);
            return Map.of(
                "task_id", fullParsingTaskId,
                "parse_task_id", parseTaskId,
                "status", "pending",
                "message", "–ó–∞–ø—É—â–µ–Ω –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            );
        } catch (Exception e) {
            return Map.of("error", "–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: " + e.getMessage());
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ FullParsingTaskRunner)
    public void runFullParsingTaskLogic(String fullTaskId, String parseTaskId, String slug) {
        // –í–ê–ñ–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º slug –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ (—É–±–∏—Ä–∞–µ–º ID)
        // MelonService —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –ë–ï–ó ID: "sweet-home-kim-carnby-.json"
        // –ù–æ slug –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å ID: "3754--sweet-home-kim-carnby-"
        String normalizedSlug = normalizeSlugForMangaLib(slug);
        logger.info("üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è slug: original='{}', normalized='{}'", slug, normalizedSlug);
        
        try {
            updateFullParsingTask(fullTaskId, "running", 5, "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON...", null);
            Map<String, Object> finalStatus = waitForTaskCompletion(parseTaskId);
            if (!"completed".equalsIgnoreCase(String.valueOf(finalStatus.get("status")))) {
                updateFullParsingTask(fullTaskId, "failed", 100,
                    "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ: " + finalStatus.get("message"), finalStatus);
                return;
            }
            
            updateFullParsingTask(fullTaskId, "running", 50, "–ü–∞—Ä—Å–∏–Ω–≥ JSON –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...", null);
            Map<String, Object> buildResult = buildManga(normalizedSlug, null);
            if (buildResult == null || !buildResult.containsKey("task_id")) {
                updateFullParsingTask(fullTaskId, "failed", 100,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", buildResult);
                return;
            }
            String buildTaskId = (String) buildResult.get("task_id");
            
            // –ï—Å–ª–∏ —ç—Ç–æ—Ç fullParsingTask —Å–≤—è–∑–∞–Ω —Å autoParsingTask, —Ç–æ –∏ buildTaskId —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å
            String autoParsingTaskId = fullParsingToAutoParsingTask.get(fullTaskId);
            if (autoParsingTaskId != null) {
                autoParsingService.linkAdditionalTaskId(buildTaskId, autoParsingTaskId);
                logger.info("–°–≤—è–∑–∞–ª–∏ buildTaskId={} —Å autoParsingTaskId={} —á–µ—Ä–µ–∑ fullTaskId={}", 
                    buildTaskId, autoParsingTaskId, fullTaskId);
            }
            
            updateFullParsingTask(fullTaskId, "running", 60, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...", null);
            Map<String, Object> buildStatus = waitForTaskCompletion(buildTaskId);
            if ("completed".equalsIgnoreCase(String.valueOf(buildStatus.get("status")))) {
                // –ë–∏–ª–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
                updateFullParsingTask(fullTaskId, "running", 70, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...", null);
                logger.info("–ë–∏–ª–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è slug={}, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç", slug);
                
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π slug (–æ–±—ä—è–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞)
                    logger.info("üì• –ó–∞–ø—Ä–æ—Å manga-info –¥–ª—è normalized slug='{}'", normalizedSlug);
                    
                    // –ü–æ–ª—É—á–∞–µ–º mangaInfo –î–û —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ –∏–∑ MelonService
                    Map<String, Object> mangaInfo = getMangaInfo(normalizedSlug);
                    
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–º–ø–æ—Ä—Ç–∞
                    String importTaskId = importTaskService.createTask(fullTaskId).getTaskId();
                    logger.info("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–º–ø–æ—Ä—Ç–∞: importTaskId={} –¥–ª—è fullTaskId={}", importTaskId, fullTaskId);
                    
                    // –ö–†–ò–¢–ò–ß–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞–Ω–≥—É –∏—Å–ø–æ–ª—å–∑—É—è normalizedSlug (–±–µ–∑ ID), –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π slug!
                    // MelonService —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –ë–ï–ó ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: "made-of-stardust.json")
                    // –ü–æ—ç—Ç–æ–º—É getMangaInfo() –¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    importMangaWithProgressAsync(importTaskId, normalizedSlug, null).get();
                    logger.info("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è slug={}, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MelonService", slug);
                    
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ MelonService
                    // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π slug (–±–µ–∑ ID)
                    updateFullParsingTask(fullTaskId, "running", 95, "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MelonService...", null);
                    Map<String, Object> deleteResult = deleteManga(normalizedSlug);
                    if (deleteResult != null && Boolean.TRUE.equals(deleteResult.get("success"))) {
                        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ MelonService –¥–ª—è slug={} (normalized={})", slug, normalizedSlug);
                    } else {
                        logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MelonService –¥–ª—è slug={} (normalized={}): {}", 
                            slug, normalizedSlug, deleteResult);
                    }
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (mangaInfo —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ)
                    Map<String, Object> result = new HashMap<>();
                    result.put("filename", slug);
                    result.put("parse_completed", true);
                    result.put("build_completed", true);
                    result.put("import_completed", true);
                    result.put("cleanup_completed", true);
                    if (mangaInfo != null) {
                        result.put("title", mangaInfo.get("localized_name"));
                        result.put("manga_info", mangaInfo);
                    }
                    updateFullParsingTask(fullTaskId, "completed", 100,
                        "–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! JSON, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.", result);
                        
                } catch (Exception importEx) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ –¥–ª—è slug={}: {}", slug, importEx.getMessage(), importEx);
                    updateFullParsingTask(fullTaskId, "failed", 100,
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: " + importEx.getMessage(), null);
                }
            } else {
                updateFullParsingTask(fullTaskId, "failed", 100,
                    "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É—Å–ø–µ—à–Ω–æ: " + buildStatus.get("message"), buildStatus);
            }
        } catch (Exception e) {
            updateFullParsingTask(fullTaskId, "failed", 100,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: " + e.getMessage(), null);
        } finally {
            // –û—á–∏—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
            fullParsingToAutoParsingTask.remove(fullTaskId);
            logger.debug("–û—á–∏—â–µ–Ω –º–∞–ø–ø–∏–Ω–≥ fullParsingTaskId={}", fullTaskId);
        }
    }

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    private final Map<String, Map<String, Object>> fullParsingTasks = new HashMap<>();

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ WebSocket
     */
    private void updateFullParsingTask(String taskId, String status, int progress, String message, Map<String, Object> result) {
        Map<String, Object> existingTask = fullParsingTasks.get(taskId);
        Map<String, Object> task = existingTask != null ? new HashMap<>(existingTask) : new HashMap<>();
        LocalDateTime now = LocalDateTime.now();

        task.put("task_id", taskId);
        task.put("status", status);
        task.put("progress", progress);
        task.put("message", message);
        task.put("updated_at", now.toString());

        if (!task.containsKey("started_at")) {
            task.put("started_at", now.toString());
        }

        LocalDateTime startedAt = parseDateTime(task.get("started_at"));
        Duration elapsed = Duration.between(startedAt, now);
        task.put("duration_ms", elapsed.toMillis());
        task.put("duration_seconds", elapsed.getSeconds());
        task.put("duration_formatted", formatDuration(elapsed));

        if ("completed".equalsIgnoreCase(status) || "failed".equalsIgnoreCase(status) || "cancelled".equalsIgnoreCase(status)) {
            task.put("finished_at", now.toString());
        }

        if (result != null) {
            task.put("result", result);
            Object metrics = result.get("metrics");
            if (metrics != null) {
                task.put("metrics", metrics);
            }
            if (result.containsKey("import_task_id")) {
                task.put("import_task_id", result.get("import_task_id"));
            }
        }

        fullParsingTasks.put(taskId, task);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ WebSocket
        webSocketHandler.sendProgressUpdate(taskId, task);
        webSocketHandler.sendLogMessage(taskId, "INFO", message);
    }

    private LocalDateTime parseDateTime(Object value) {
        if (value instanceof LocalDateTime ldt) {
            return ldt;
        }
        if (value instanceof String str) {
            try {
                return LocalDateTime.parse(str);
            } catch (Exception ignored) {
                // fall through
            }
        }
        return LocalDateTime.now();
    }

    private String formatDuration(Duration duration) {
        long seconds = duration.getSeconds();
        long absSeconds = Math.abs(seconds);
        long hours = absSeconds / 3600;
        long minutes = (absSeconds % 3600) / 60;
        long secs = absSeconds % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, secs);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    public Map<String, Object> getFullParsingTaskStatus(String taskId) {
        return fullParsingTasks.getOrDefault(taskId, Map.of("error", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
    }

    /**
     * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    private Map<String, Object> waitForTaskCompletion(String taskId) throws InterruptedException {
        Map<String, Object> status;
        int attempts = 0; // –ë–ï–ó —Ç–∞–π–º–∞—É—Ç–∞ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞–Ω–≥–∏ –ø–∞—Ä—Å—è—Ç—Å—è 100+ –º–∏–Ω—É—Ç

        do {
            Thread.sleep(2000); // –∂–¥–µÔøΩÔøΩ 2 —Å–µ–∫—É–Ω–¥—ã
            status = getTaskStatus(taskId);
            attempts++;

            // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ (1 –º–∏–Ω—É—Ç–∞)
            if (attempts % 30 == 0) {
                int minutes = attempts * 2 / 60;
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {}: {}min, —Å—Ç–∞—Ç—É—Å: {}", 
                    taskId, minutes, status != null ? status.get("status") : "null");
            }

        } while (status != null &&
                !"completed".equalsIgnoreCase(String.valueOf(status.get("status"))) &&
                !"failed".equalsIgnoreCase(String.valueOf(status.get("status"))));

        return status != null ? status : Map.of("status", "failed", "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏");
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ÔøΩÔøΩ–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    public Map<String, Object> getTaskStatus(String taskId) {
        String url = melonServiceUrl + "/status/" + taskId;
        
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
            Map<String, Object> body = response.getBody();
            
            if (body != null) {
                return body;
            } else {
                logger.warn("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {}", taskId);
                return Map.of(
                    "status", "unknown",
                    "message", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç MelonService"
                );
            }
            
        } catch (org.springframework.web.client.HttpClientErrorException.NotFound e) {
            logger.warn("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MelonService: {} (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞)", taskId);
            return Map.of(
                "status", "not_found",
                "message", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MelonService"
            );
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {}: {}", taskId, e.getMessage());
            return Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage()
            );
        }
    }

    public List<Map<String, Object>> listTasks() {
        String url = melonServiceUrl + "/tasks";

        try {
            ResponseEntity<List<Map<String, Object>>> response = restTemplate.exchange(
                url,
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<Map<String, Object>>>() {}
            );

            List<Map<String, Object>> body = response.getBody();
            if (body != null) {
                return body;
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏–∑ MelonService: {}", e.getMessage());
        }

        return Collections.emptyList();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –º–∞–Ω–≥–∏
     */
    public Map<String, Object> buildManga(String filename, String branchId) {
        String url = melonServiceUrl + "/build";

        Map<String, String> request = new HashMap<>();
        request.put("slug", filename);  // MelonService –æ–∂–∏–¥–∞–µ—Ç "slug", –∞ –Ω–µ "filename"
        request.put("parser", "mangalib");
        request.put("type", "simple");  // MelonService –æ–∂–∏–¥–∞–µ—Ç "type", –∞ –Ω–µ "archive_type"

        if (branchId != null && !branchId.isEmpty()) {
            request.put("branch_id", branchId);
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, String>> entity = new HttpEntity<>(request, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(url, entity, Map.class);
        return response.getBody();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∞—Ä—à–µ–Ω–Ω—ã—Ö –º–∞–Ω–≥
     */
    @SuppressWarnings("unchecked")
    public List<Map<String, Object>> listParsedManga() {
        String url = melonServiceUrl + "/list-parsed";
        ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
        Map<String, Object> body = response.getBody();

        if (body != null && body.containsKey("manga_list")) {
            return (List<Map<String, Object>>) body.get("manga_list");
        }

        return new ArrayList<>();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞—Ä—à–µ–Ω–Ω–æ–π –º–∞–Ω–≥–µ —Å retry –ª–æ–≥–∏–∫–æ–π.
     * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π,
     * —Ç.–∫. –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ MelonService –º–æ–∂–µ—Ç –Ω–µ —É—Å–ø–µ–≤–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã.
     */
    public Map<String, Object> getMangaInfo(String filename) {
        String url = melonServiceUrl + "/manga-info/" + filename;
        
        int maxRetries = 5;
        int retryDelayMs = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ manga-info –¥–ª—è '{}' (–ø–æ–ø—ã—Ç–∫–∞ {}/{})", filename, attempt, maxRetries);
                ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
                Map<String, Object> body = response.getBody();
                
                if (body != null) {
                    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω manga-info –¥–ª—è '{}'", filename);
                    return body;
                } else {
                    logger.warn("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ manga-info –¥–ª—è '{}', –ø–æ–ø—ã—Ç–∫–∞ {}/{}", 
                        filename, attempt, maxRetries);
                }
                
            } catch (org.springframework.web.client.HttpClientErrorException.NotFound e) {
                logger.warn("JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{}' (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): {}. " +
                    "–í–æ–∑–º–æ–∂–Ω–æ, MelonService –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {}ms...",
                    filename, attempt, maxRetries, e.getMessage(), retryDelayMs);
                    
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è manga-info –¥–ª—è '{}' (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): {}", 
                    filename, attempt, maxRetries, e.getMessage());
            }
            
            // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∂–¥–µ–º –ø–µ—Ä–µ–¥ retry
            if (attempt < maxRetries) {
                try {
                    Thread.sleep(retryDelayMs);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    logger.error("–ü—Ä–µ—Ä–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ retry –¥–ª—è '{}'", filename);
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å manga-info –¥–ª—è '{}' –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", filename, maxRetries);
        return Map.of(
            "error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å manga-info –ø–æ—Å–ª–µ " + maxRetries + " –ø–æ–ø—ã—Ç–æ–∫",
            "filename", filename
        );
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤ –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
     * –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –≥–ª–∞–≤.
     * 
     * @param slug Slug –º–∞–Ω–≥–∏
     * @return Map —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–≤ (success, total_chapters, chapters)
     */
    public Map<String, Object> getChaptersMetadataOnly(String slug) {
        try {
            String url = melonServiceUrl + "/manga-info/" + slug + "/chapters-only?parser=mangalib";
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è slug: {}", slug);
            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
            Map<String, Object> result = response.getBody();
            
            if (result != null && Boolean.TRUE.equals(result.get("success"))) {
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {}: {} –≥–ª–∞–≤", 
                    slug, result.get("total_chapters"));
                return result;
            } else {
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤ –¥–ª—è slug '{}': {}", 
                    slug, result != null ? result.get("error") : "Unknown error");
                return Map.of("success", false, "error", 
                    result != null ? result.get("error") : "Unknown error");
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è slug '{}': {}", slug, e.getMessage());
            return Map.of("success", false, "error", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ slug'–æ–≤ –º–∞–Ω–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ MangaLib –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
     * 
     * @param page –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–Ω–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
     * @return Map —Å–æ —Å–ø–∏—Å–∫–æ–º slug'–æ–≤ (success, page, count, slugs)
     */
    public Map<String, Object> getCatalogSlugs(int page, Integer limit) {
        try {
            int pageLimit = (limit != null && limit > 0) ? limit : 60;
            String url = melonServiceUrl + "/catalog/" + page + "?parser=mangalib&limit=" + pageLimit;
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–∞–Ω–≥: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}, –ª–∏–º–∏—Ç {}", page, pageLimit);
            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
            Map<String, Object> result = response.getBody();
            
            if (result != null && Boolean.TRUE.equals(result.get("success"))) {
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–∞—Ç–∞–ª–æ–≥: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}, –Ω–∞–π–¥–µ–Ω–æ {} –º–∞–Ω–≥", 
                    page, result.get("count"));
                return result;
            } else {
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}: {}", 
                    page, result != null ? result.get("error") : "Unknown error");
                return Map.of("success", false, "error", 
                    result != null ? result.get("error") : "Unknown error");
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}: {}", page, e.getMessage());
            return Map.of("success", false, "error", e.getMessage());
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–Ω—É—é –º–∞–Ω–≥—É –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
     */
    @SuppressWarnings("unchecked")
    public Map<String, Object> importToSystem(String filename, String branchId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æÔøΩÔøΩ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–Ω–≥–∏ –æ—Ç MelonService
            Map<String, Object> mangaInfo = getMangaInfo(filename);

            if (mangaInfo == null) {
                throw new RuntimeException("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–ΩÔøΩÔøΩ");
            }

            // –°–æ–∑–¥–∞–µ–º –º–∞–Ω–≥—É –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
            Manga manga = new Manga();

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º title - –∏—Å–ø–æ–ª—å–∑—É–µ–º localized_name (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            String title = (String) mangaInfo.get("localized_name");
            if (title == null || title.trim().isEmpty()) {
                title = (String) mangaInfo.get("eng_name");
                if (title == null || title.trim().isEmpty()) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º filename –∫–∞–∫ title, –µ—Å–ª–∏ –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ
                    title = filename.replace("-", " ").replace("_", " ");
                    // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                    title = title.substring(0, 1).toUpperCase() + title.substring(1);
                }
            }
            manga.setTitle(title.trim());

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞ÔøΩÔøΩ—Ç–æ—Ä–æ–≤
            List<String> authors = (List<String>) mangaInfo.get("authors");
            if (authors != null && !authors.isEmpty()) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                String authorString = authors.stream()
                    .filter(author -> author != null && !author.trim().isEmpty())
                    .map(String::trim)
                    .collect(java.util.stream.Collectors.joining(", "));

                if (!authorString.isEmpty()) {
                    manga.setAuthor(authorString);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            String description = (String) mangaInfo.get("description");
            if (description != null && !description.trim().isEmpty()) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML-—Ç–µ–≥–∏ –≤ Markdown
                description = convertHtmlToMarkdown(description.trim());
                manga.setDescription(description);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            String engName = (String) mangaInfo.get("eng_name");
            if (engName != null && !engName.trim().isEmpty()) {
                manga.setEngName(engName.trim());
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            List<String> anotherNames = (List<String>) mangaInfo.get("another_names");
            System.out.println("DEBUG: another_names = " + anotherNames);
            if (anotherNames != null && !anotherNames.isEmpty()) {
                String altNames = anotherNames.stream()
                    .filter(name -> name != null && !name.trim().isEmpty())
                    .map(String::trim)
                    .collect(java.util.stream.Collectors.joining("; "));
                
                if (!altNames.isEmpty()) {
                    System.out.println("DEBUG: Setting alternative names: " + altNames);
                    manga.setAlternativeNames(altNames);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –º–∞–Ω–≥–∏
            String typeStr = (String) mangaInfo.get("type");
            System.out.println("DEBUG: type from parser = " + typeStr);
            if (typeStr != null && !typeStr.trim().isEmpty()) {
                try {
                    switch (typeStr.toLowerCase().trim()) {
                        case "manhwa":
                        case "–º–∞–Ω—Ö–≤–∞":
                            manga.setType(Manga.MangaType.MANHWA);
                            break;
                        case "manhua":
                        case "–º–∞–Ω—å—Ö—É–∞":
                            manga.setType(Manga.MangaType.MANHUA);
                            break;
                        case "western_comic":
                        case "western comic":
                        case "–∫–æ–º–∏–∫—Å –∑–∞–ø–∞–¥–Ω—ã–π":
                            manga.setType(Manga.MangaType.WESTERN_COMIC);
                            break;
                        case "russian_comic":
                        case "russian comic":
                        case "—Ä—É–º–∞–Ω–≥–∞":
                            manga.setType(Manga.MangaType.RUSSIAN_COMIC);
                            break;
                        case "oel":
                        case "oel-–º–∞–Ω–≥–∞":
                        case "oel-manga":
                            manga.setType(Manga.MangaType.OEL);
                            break;
                        case "manga":
                        case "–º–∞–Ω–≥–∞":
                            manga.setType(Manga.MangaType.MANGA);
                            break;
                        default:
                            // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å—Ç–∞–≤–∏–º MANGA
                            System.out.println("DEBUG: Unknown type '" + typeStr + "', using MANGA");
                            manga.setType(Manga.MangaType.MANGA);
                    }
                    System.out.println("DEBUG: Set type to: " + manga.getType());
                } catch (Exception e) {
                    manga.setType(Manga.MangaType.MANGA);
                }
            } else {
                // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MANGA –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                manga.setType(Manga.MangaType.MANGA);
                System.out.println("DEBUG: No type from parser, set default MANGA");
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            Object ageLimit = mangaInfo.get("age_limit");
            if (ageLimit != null) {
                try {
                    manga.setAgeLimit(Integer.parseInt(ageLimit.toString().trim()));
                } catch (NumberFormatException e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            Object isLicensed = mangaInfo.get("is_licensed");
            if (isLicensed != null) {
                manga.setIsLicensed(Boolean.parseBoolean(isLicensed.toString()));
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            Object statusRaw = mangaInfo.get("status");
            System.out.println("DEBUG: status from parser = " + statusRaw);
            Manga.MangaStatus resolvedStatus = resolveMangaStatus(statusRaw);
            manga.setStatus(resolvedStatus);
            System.out.println("DEBUG: Set status to: " + manga.getStatus());

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∞–Ω—Ä—ã
            List<String> genres = (List<String>) mangaInfo.get("genres");
            if (genres != null && !genres.isEmpty()) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∂–∞–Ω—Ä—ã
                List<String> filteredGenres = genres.stream()
                    .filter(genre -> genre != null && !genre.trim().isEmpty())
                    .map(String::trim)
                    .collect(java.util.stream.Collectors.toList());

                if (!filteredGenres.isEmpty()) {
                    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    Set<Genre> genreSet = filteredGenres.stream()
                        .map(genreName -> genreService.createOrGetGenre(genreName))
                        .collect(Collectors.toSet());
                    manga.setGenres(genreSet);
                    
                    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    manga.setGenre(String.join(", ", filteredGenres));
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
            List<String> tags = (List<String>) mangaInfo.get("tags");
            System.out.println("DEBUG: tags = " + tags);
            if (tags != null && !tags.isEmpty()) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
                List<String> filteredTags = tags.stream()
                    .filter(tag -> tag != null && !tag.trim().isEmpty())
                    .map(String::trim)
                    .collect(java.util.stream.Collectors.toList());

                if (!filteredTags.isEmpty()) {
                    System.out.println("DEBUG: Setting tags: " + String.join(", ", filteredTags));
                    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    Set<Tag> tagSet = filteredTags.stream()
                        .map(tagName -> tagService.createOrGetTag(tagName))
                        .collect(Collectors.toSet());
                    manga.setTags(tagSet);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥
            Object publicationYear = mangaInfo.get("publication_year");
            if (publicationYear != null && !publicationYear.toString().trim().isEmpty()) {
                try {
                    int yearInt = Integer.parseInt(publicationYear.toString().trim());
                    if (yearInt > 1900 && yearInt <= LocalDate.now().getYear()) {
                        manga.setReleaseDate(LocalDate.of(yearInt, 1, 1));
                    }
                } catch (NumberFormatException e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–¥–∞
                }
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
            Map<String, Object> content = (Map<String, Object>) mangaInfo.get("content");
            int totalChapters = 0;
            if (content != null) {
                for (Object chaptersList : content.values()) {
                    if (chaptersList instanceof List) {
                        totalChapters += ((List<?>) chaptersList).size();
                    }
                }
            }
            manga.setTotalChapters(totalChapters);

            // –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            manga = mangaRepository.save(manga);
            System.out.println("Manga saved with ID: " + manga.getId() + " for filename: " + filename);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–≥–∏ - —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ MelonService –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ImageStorageService
            try {
                // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ MelonService
                String coverUrl = melonServiceUrl + "/cover/" + filename;
                System.out.println("Downloading cover from MelonService: " + coverUrl);
                ResponseEntity<byte[]> coverResponse = restTemplate.getForEntity(coverUrl, byte[].class);

                if (coverResponse.getStatusCode().is2xxSuccessful() && coverResponse.getBody() != null) {
                    System.out.println("Downloaded cover size: " + coverResponse.getBody().length + " bytes");
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ Content-Type
                    String contentType = coverResponse.getHeaders().getFirst("Content-Type");
                    String fileExtension = ".jpg"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (contentType != null) {
                        if (contentType.contains("png")) {
                            fileExtension = ".png";
                        } else if (contentType.contains("webp")) {
                            fileExtension = ".webp";
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –∫–∞–∫ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ ImageStorageService
                    String coverFileName = "cover_" + filename + fileExtension;

                    // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–ª–æ–∂–∫–∏
                    MultiValueMap<String, Object> coverRequest = new LinkedMultiValueMap<>();

                    // –°–æ–∑–¥–∞–µ–º ByteArrayResource –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    ByteArrayResource coverResource = new ByteArrayResource(coverResponse.getBody()) {
                        @Override
                        public String getFilename() {
                            return coverFileName;
                        }
                    };
                    coverRequest.add("file", coverResource);

                    HttpHeaders coverHeaders = new HttpHeaders();
                    coverHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);
                    HttpEntity<MultiValueMap<String, Object>> coverEntity = new HttpEntity<>(coverRequest, coverHeaders);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –≤ ImageStorageService
                    ResponseEntity<Map> uploadResponse = restTemplate.postForEntity(
                        "http://image-storage-service:8083/api/images/cover/" + manga.getId(),
                        coverEntity,
                        Map.class
                    );

                    if (uploadResponse.getStatusCode().is2xxSuccessful() && uploadResponse.getBody() != null) {
                        String savedImageUrl = (String) uploadResponse.getBody().get("imageUrl");
                        if (savedImageUrl != null && !savedImageUrl.isEmpty()) {
                            manga.setCoverImageUrl(savedImageUrl);
                            manga = mangaRepository.save(manga);
                            System.out.println("Cover saved successfully: " + savedImageUrl);
                        }
                    } else {
                        System.err.println("Failed to upload cover to ImageStorageService: " + uploadResponse.getStatusCode());
                        System.err.println("Cover will not be set for manga: " + manga.getTitle());
                    }
                } else {
                    System.err.println("Failed to download cover from MelonService: " + coverResponse.getStatusCode());
                    System.err.println("Cover will not be set for manga: " + manga.getTitle());
                }
            } catch (Exception e) {
                System.err.println("Error processing cover: " + e.getMessage());
                System.err.println("Cover will not be set for manga: " + manga.getTitle());
            }

//            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–≥–∏ - —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ MelonService –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
//            try {
//                // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ MelonService
//                String coverUrl = melonServiceUrl + "/cover/" + filename;
//                ResponseEntity<byte[]> coverResponse = restTemplate.getForEntity(coverUrl, byte[].class);
//
//                if (coverResponse.getStatusCode().is2xxSuccessful() && coverResponse.getBody() != null) {
//                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ Content-Type
//                    String contentType = coverResponse.getHeaders().getFirst("Content-Type");
//                    String fileExtension = ".jpg"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
//                    if (contentType != null) {
//                        if (contentType.contains("png")) {
//                            fileExtension = ".png";
//                        } else if (contentType.contains("webp")) {
//                            fileExtension = ".webp";
//                        }
//                    }
//
//                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –∫–∞–∫ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–ª–æ–∂–µ–∫
//                    String coverFileName = "cover_" + filename + fileExtension;
//
//                    // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ–±–ª–æ–∂–µ–∫
//                    MultiValueMap<String, Object> coverRequest = new LinkedMultiValueMap<>();
//
//                    // –°–æ–∑–¥–∞–µ–º ByteArrayResource –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
//                    ByteArrayResource coverResource = new ByteArrayResource(coverResponse.getBody()) {
//                        @Override
//                        public String getFilename() {
//                            return coverFileName;
//                        }
//                    };
//                    coverRequest.add("file", coverResource);
//
//                    HttpHeaders coverHeaders = new HttpHeaders();
//                    coverHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);
//                    HttpEntity<MultiValueMap<String, Object>> coverEntity = new HttpEntity<>(coverRequest, coverHeaders);
//
//                    // –û–°–ù–û–í–ù–û–ô –ø—É—Ç—å - –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Minio —á–µ—Ä–µ–∑ ImageStorageService
//                    ResponseEntity<Map> uploadResponse = restTemplate.postForEntity(
//                        "http://image-storage-service:8083/api/images/cover/" + manga.getId(),
//                        coverEntity,
//                        Map.class
//                    );
//
//
//
//                    if (uploadResponse.getStatusCode().is2xxSuccessful() && uploadResponse.getBody() != null) {
//                        String savedImageUrl = (String) uploadResponse.getBody().get("imageUrl");
//                        if (savedImageUrl != null) {
//                            if (savedImageUrl != null && !savedImageUrl.isEmpty() && !savedImageUrl.isBlank()) {
//                                manga.setCoverImageUrl(savedImageUrl);
//                            } else {
//                            }
//                            System.out.println("Cover saved successfully to Minio for manga: " + filename + " with URL: " + savedImageUrl);
//                        }
//                    } else {
//                        System.err.println("Failed to save cover to Minio for manga " + filename +
//                            ", status: " + uploadResponse.getStatusCode());
//                        // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
//                        setFallbackCoverFromJson(manga, mangaInfo);
//                    }
//                } else {
//                    System.err.println("Failed to download cover for manga: " + filename +
//                        ", status: " + coverResponse.getStatusCode());
//                    // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
//                    setFallbackCoverFromJson(manga, mangaInfo);
//                }
//            } catch (Exception e) {
//                System.err.println("Error processing cover for manga " + filename + ": " + e.getMessage());
//                // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
//                setFallbackCoverFromJson(manga, mangaInfo);
//            }

            return Map.of(
                "success", true,
                "manga_id", manga.getId(),
                "title", manga.getTitle(),
                "total_chapters", totalChapters,
                "selected_branch", branchId != null ? branchId : "auto"
            );

        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–∞–Ω–≥–∏: " + e.getMessage(), e);
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–Ω—É—é –º–∞–Ω–≥—É –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
     */
    public Map<String, Object> importToSystemAsync(String filename, String branchId) {
        String taskId = UUID.randomUUID().toString();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        ImportTaskService.ImportTask task = importTaskService.createTask(taskId);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        importMangaWithProgressAsync(taskId, filename, branchId);

        return Map.of(
            "success", true,
            "taskId", taskId,
            "status", "pending",
            "message", "–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω"
        );
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∞
     */
    public Map<String, Object> getImportTaskStatus(String taskId) {
        ImportTaskService.ImportTask task = importTaskService.getTask(taskId);
        if (task == null) {
            return Map.of("error", "–ó–∞ÔøΩÔøΩ–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        return task.toMap();
    }

    @Async
    public CompletableFuture<Void> importMangaWithProgressAsync(String taskId, String filename, String branchId) {
        ImportTaskService.ImportTask task = importTaskService.getTask(taskId);
        
        logger.info("=== –ù–ê–ß–ê–õ–û –ò–ú–ü–û–†–¢–ê ===");
        logger.info("Task ID: {}", taskId);
        logger.info("Filename: {}", filename);
        logger.info("Branch ID: {}", branchId);

        try {
            // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–Ω–≥–∏
            task.setStatus(ImportTaskService.TaskStatus.IMPORTING_MANGA);
            task.setProgress(5);
            task.setMessage("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–Ω–≥–∏...");
            
            logger.info("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–Ω–≥–∏ –∏–∑ MelonService...");
            Map<String, Object> mangaInfo = getMangaInfo(filename);
            
            if (mangaInfo == null) {
                logger.error("–û–®–ò–ë–ö–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MelonService –¥–ª—è filename: {}", filename);
                importTaskService.markTaskFailed(taskId, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return CompletableFuture.completedFuture(null);
            }
            
            logger.info("‚úì –î–∞–Ω–Ω—ã–µ –º–∞–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {}", mangaInfo.get("localized_name"));

            // –®–∞–≥ 2: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ —Å–∫–∞—á–∞–Ω—ã –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            task.setProgress(15);
            task.setMessage("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–∞–Ω–≥–∏...");
            
            logger.info("–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–∞–Ω–≥–∏ –≤ –ë–î...");
            Manga manga = createMangaFromData(mangaInfo, filename);
            logger.info("‚úì –ú–∞–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {}", manga.getId(), manga.getTitle());

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤—ã
            logger.info("–®–∞–≥ 3: –ü–æ–¥—Å—á–µ—Ç –≥–ª–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...");
            Map<String, Object> content = (Map<String, Object>) mangaInfo.get("content");
            int totalChapters = 0;
            int totalPages = 0;
            List<Map<String, Object>> chaptersToImport = new ArrayList<>();

            if (content != null) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π branch, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
                if (branchId != null && !branchId.isEmpty()) {
                    Object branchContent = content.get(branchId);
                    if (branchContent instanceof List) {
                        chaptersToImport = (List<Map<String, Object>>) branchContent;
                    }
                } else {
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ç–∫—É
                    for (Object branchContent : content.values()) {
                        if (branchContent instanceof List) {
                            chaptersToImport = (List<Map<String, Object>>) branchContent;
                            break;
                        }
                    }
                }

                totalChapters = chaptersToImport.size();

                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                for (Map<String, Object> chapter : chaptersToImport) {
                    List<Map<String, Object>> slides = (List<Map<String, Object>>) chapter.get("slides");
                    if (slides != null) {
                        totalPages += slides.size();
                    }
                }
            }

            manga.setTotalChapters(totalChapters);
            manga = mangaRepository.save(manga);
            logger.info("‚úì –ù–∞–π–¥–µ–Ω–æ {} –≥–ª–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞, {} —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–æ", totalChapters, totalPages);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task.setMangaId(manga.getId());
            task.setTitle(manga.getTitle());
            task.setTotalChapters(totalChapters);
            task.setTotalPages(totalPages);

            // –®–∞–≥ 3: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã
            logger.info("–®–∞–≥ 4: –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü...");
            task.setStatus(ImportTaskService.TaskStatus.IMPORTING_CHAPTERS);
            task.setProgress(20);
            task.setMessage("–ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤: 0/" + totalChapters);

            importChaptersWithProgress(taskId, manga.getId(), chaptersToImport, filename);
            
            logger.info("‚úì –í—Å–µ –≥–ª–∞–≤—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            importTaskService.markTaskCompleted(taskId);
            logger.info("=== –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===");

        } catch (Exception e) {
            logger.error("=== –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê ===");
            logger.error("Task ID: {}", taskId);
            logger.error("Filename: {}", filename);
            logger.error("–¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getName());
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {}", e.getMessage());
            logger.error("–°—Ç–µ–∫ —Ç—Ä–µ–π—Å:", e);
            importTaskService.markTaskFailed(taskId, e.getMessage());
        }

        return CompletableFuture.completedFuture(null);
    }

    private Manga createMangaFromData(Map<String, Object> mangaInfo, String filename) {
        Manga manga = new Manga();

        // MangaLib –∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ä–º–∞—Ç slug: —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å "7580--i-alone-level-up"
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ "i-alone-level-up" –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        String normalizedSlug = normalizeSlugForMangaLib(filename);
        
        // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º melonSlug –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        manga.setMelonSlug(normalizedSlug);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º title - –∏—Å–ø–æ–ª—å–∑—É–µ–º localized_name (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
        String title = (String) mangaInfo.get("localized_name");
        if (title == null || title.trim().isEmpty()) {
            title = (String) mangaInfo.get("eng_name");
            if (title == null || title.trim().isEmpty()) {
                title = filename.replace("-", " ").replace("_", " ");
                title = title.substring(0, 1).toUpperCase() + title.substring(1);
            }
        }
        manga.setTitle(title.trim());

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        List<String> authors = (List<String>) mangaInfo.get("authors");
        if (authors != null && !authors.isEmpty()) {
            String authorString = authors.stream()
                .filter(author -> author != null && !author.trim().isEmpty())
                .map(String::trim)
                .collect(java.util.stream.Collectors.joining(", "));

            if (!authorString.isEmpty()) {
                manga.setAuthor(authorString);
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        String description = (String) mangaInfo.get("description");
        if (description != null && !description.trim().isEmpty()) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML-—Ç–µ–≥–∏ –≤ Markdown
            description = convertHtmlToMarkdown(description.trim());
            manga.setDescription(description);
        }

        Object statusRaw = mangaInfo.get("status");
        System.out.println("DEBUG: status from parser (async flow) = " + statusRaw);
        Manga.MangaStatus asyncResolvedStatus = resolveMangaStatus(statusRaw);
        manga.setStatus(asyncResolvedStatus);
        System.out.println("DEBUG: Async flow set status to: " + manga.getStatus());

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∞–Ω—Ä—ã
        List<String> genres = (List<String>) mangaInfo.get("genres");
        if (genres != null && !genres.isEmpty()) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∂–∞–Ω—Ä—ã
            List<String> filteredGenres = genres.stream()
                .filter(genre -> genre != null && !genre.trim().isEmpty())
                .map(String::trim)
                .collect(java.util.stream.Collectors.toList());

            if (!filteredGenres.isEmpty()) {
                // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –º–∞–Ω–≥–µ
                for (String genreName : filteredGenres) {
                    Genre genre = genreService.createOrGetGenre(genreName);
                    manga.addGenre(genre);
                    // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
                    genreService.saveGenre(genre);
                }
                
                // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                manga.setGenre(String.join(", ", filteredGenres));
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥
        Object publicationYear = mangaInfo.get("publication_year");
        if (publicationYear != null && !publicationYear.toString().trim().isEmpty()) {
            try {
                int yearInt = Integer.parseInt(publicationYear.toString().trim());
                if (yearInt > 1900 && yearInt <= LocalDate.now().getYear()) {
                    manga.setReleaseDate(LocalDate.of(yearInt, 1, 1));
                }
            } catch (NumberFormatException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–¥–∞
            }
        }

        // DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
        System.out.println("=== DEBUG PARSING DATA ===");
        System.out.println("Filename: " + filename);
        System.out.println("Full mangaInfo: " + mangaInfo);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –º–∞–Ω–≥–∏ (manga/manhwa/manhua)
        String type = (String) mangaInfo.get("type");
        System.out.println("DEBUG: Raw type from parsing: " + type);
        if (type != null && !type.trim().isEmpty()) {
            try {
                Manga.MangaType mangaType = Manga.MangaType.valueOf(type.trim().toUpperCase());
                manga.setType(mangaType);
                System.out.println("DEBUG: Set manga type to: " + mangaType);
            } catch (IllegalArgumentException e) {
                System.err.println("DEBUG: Unknown manga type: " + type + ", setting to MANGA");
                manga.setType(Manga.MangaType.MANGA);
            }
        } else {
            System.out.println("DEBUG: No type found, setting to MANGA by default");
            manga.setType(Manga.MangaType.MANGA);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        String engName = (String) mangaInfo.get("eng_name");
        System.out.println("DEBUG: Raw eng_name from parsing: " + engName);
        if (engName != null && !engName.trim().isEmpty()) {
            manga.setEngName(engName.trim());
            System.out.println("DEBUG: Set eng_name to: " + engName.trim());
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        List<String> alternativeNames = (List<String>) mangaInfo.get("another_names");
        System.out.println("DEBUG: Raw another_names from parsing: " + alternativeNames);
        if (alternativeNames != null && !alternativeNames.isEmpty()) {
            List<String> filteredNames = alternativeNames.stream()
                .filter(name -> name != null && !name.trim().isEmpty())
                .map(String::trim)
                .collect(java.util.stream.Collectors.toList());

            if (!filteredNames.isEmpty()) {
                String alternativeNamesString = String.join(", ", filteredNames);
                manga.setAlternativeNames(alternativeNamesString);
                System.out.println("DEBUG: Set alternative_names to: " + alternativeNamesString);
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
        List<String> tags = (List<String>) mangaInfo.get("tags");
        System.out.println("DEBUG: Raw tags from parsing: " + tags);
        if (tags != null && !tags.isEmpty()) {
            List<String> filteredTags = tags.stream()
                .filter(tag -> tag != null && !tag.trim().isEmpty())
                .map(String::trim)
                .collect(java.util.stream.Collectors.toList());

            if (!filteredTags.isEmpty()) {
                // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –º–∞–Ω–≥–µ
                for (String tagName : filteredTags) {
                    Tag tag = tagService.createOrGetTag(tagName);
                    manga.addTag(tag);
                    // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
                    tagService.saveTag(tag);
                }
                System.out.println("DEBUG: Set tags to: " + String.join(", ", filteredTags));
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥
        Object ageLimit = mangaInfo.get("age_limit");
        System.out.println("DEBUG: Raw age_limit from parsing: " + ageLimit);
        if (ageLimit != null && !ageLimit.toString().trim().isEmpty()) {
            try {
                int ageLimitInt = Integer.parseInt(ageLimit.toString().trim());
                if (ageLimitInt >= 0 && ageLimitInt <= 21) {
                    manga.setAgeLimit(ageLimitInt);
                    System.out.println("DEBUG: Set age_limit to: " + ageLimitInt);
                }
            } catch (NumberFormatException e) {
                System.err.println("DEBUG: Invalid age_limit format: " + ageLimit);
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏
        Object isLicensed = mangaInfo.get("is_licensed");
        System.out.println("DEBUG: Raw is_licensed from parsing: " + isLicensed);
        if (isLicensed != null) {
            if (isLicensed instanceof Boolean) {
                manga.setIsLicensed((Boolean) isLicensed);
                System.out.println("DEBUG: Set is_licensed to: " + isLicensed);
            } else if (isLicensed instanceof String) {
                String licensedStr = isLicensed.toString().toLowerCase();
                boolean licensed = "true".equals(licensedStr) || "1".equals(licensedStr) || "yes".equals(licensedStr);
                manga.setIsLicensed(licensed);
                System.out.println("DEBUG: Set is_licensed to: " + licensed + " (parsed from string: " + licensedStr + ")");
            }
        }

        System.out.println("=== END DEBUG PARSING ===");

        // –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        manga = mangaRepository.save(manga);
        System.out.println("Manga saved with ID: " + manga.getId() + " for filename: " + filename);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É - —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ MelonService –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        try {
            System.out.println("Starting cover processing for manga: " + filename);
            // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ MelonService
            String coverUrl = melonServiceUrl + "/cover/" + filename;
            ResponseEntity<byte[]> coverResponse = restTemplate.getForEntity(coverUrl, byte[].class);

            if (coverResponse.getStatusCode().is2xxSuccessful() && coverResponse.getBody() != null) {
                System.out.println("Cover downloaded successfully from: " + coverUrl);
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ Content-Type
                String contentType = coverResponse.getHeaders().getFirst("Content-Type");
                String fileExtension = ".jpg"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (contentType != null) {
                    if (contentType.contains("png")) {
                        fileExtension = ".png";
                    } else if (contentType.contains("webp")) {
                        fileExtension = ".webp";
                    }
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –∫–∞–∫ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                String coverFileName = "cover_" + filename + fileExtension;

                // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ–±–ª–æ–∂–µ–∫
                MultiValueMap<String, Object> coverRequest = new LinkedMultiValueMap<>();

                // –°–æ–∑–¥–∞–µ–º ByteArrayResource –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                ByteArrayResource coverResource = new ByteArrayResource(coverResponse.getBody()) {
                    @Override
                    public String getFilename() {
                        return coverFileName;
                    }
                };
                coverRequest.add("file", coverResource);

                HttpHeaders coverHeaders = new HttpHeaders();
                coverHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);
                HttpEntity<MultiValueMap<String, Object>> coverEntity = new HttpEntity<>(coverRequest, coverHeaders);

                System.out.println("Uploading cover to ImageStorageService for manga ID: " + manga.getId());
                // –û–°–ù–û–í–ù–û–ô –ø—É—Ç—å - –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Minio —á–µ—Ä–µ–∑ ImageStorageService
                ResponseEntity<Map> uploadResponse = restTemplate.postForEntity(
                    "http://image-storage-service:8083/api/images/cover/" + manga.getId(),
                    coverEntity,
                    Map.class
                );

                if (uploadResponse.getStatusCode().is2xxSuccessful() && uploadResponse.getBody() != null) {
                    String savedImageUrl = (String) uploadResponse.getBody().get("imageUrl");
                    if (savedImageUrl != null) {
                        // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç http, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
                        if (!savedImageUrl.startsWith("http")) {
                            savedImageUrl = "http://image-storage-service:8083/api/images/public/" + savedImageUrl;
                        }
                        manga.setCoverImageUrl(savedImageUrl);
                        manga = mangaRepository.save(manga); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL
                        System.out.println("Cover saved successfully to Minio for manga: " + filename + " with URL: " + savedImageUrl);
                    }
                } else {
                    System.err.println("Failed to save cover to Minio for manga " + filename +
                        ", status: " + uploadResponse.getStatusCode());
                    // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
                    setFallbackCoverFromJson(manga, mangaInfo);
                }
            } else {
                System.err.println("Failed to download cover for manga: " + filename +
                    ", status: " + coverResponse.getStatusCode());
                // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
                setFallbackCoverFromJson(manga, mangaInfo);
            }
        } catch (Exception e) {
            System.err.println("Error processing cover for manga " + filename + ": " + e.getMessage());
            e.printStackTrace();
            // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
            setFallbackCoverFromJson(manga, mangaInfo);
        }

        return manga;
    }

    private Manga.MangaStatus resolveMangaStatus(Object statusRaw) {
        if (statusRaw == null) {
            return Manga.MangaStatus.ONGOING;
        }

        String statusStr;
        if (statusRaw instanceof String) {
            statusStr = ((String) statusRaw).trim();
        } else {
            statusStr = statusRaw.toString().trim();
        }

        if (statusStr.isEmpty()) {
            return Manga.MangaStatus.ONGOING;
        }

        String normalized = statusStr.toLowerCase(Locale.ROOT);

        switch (normalized) {
            case "ongoing":
            case "–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è":
            case "–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤—ã–ø—É—Å–∫":
                return Manga.MangaStatus.ONGOING;
            case "completed":
            case "–∑–∞–≤–µ—Ä—à–µ–Ω":
            case "–∑–∞–≤–µ—Ä—à—ë–Ω":
            case "–∑–∞–≤–µ—Ä—à–µ–Ω–∞":
            case "–∑–∞–≤–µ—Ä—à–µ–Ω–æ":
                return Manga.MangaStatus.COMPLETED;
            case "announced":
            case "–∞–Ω–æ–Ω—Å":
            case "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω":
            case "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ":
                return Manga.MangaStatus.ANNOUNCED;
            case "hiatus":
            case "–∑–∞–º–æ—Ä–æ–∂–µ–Ω":
            case "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞":
            case "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ":
            case "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω":
            case "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞":
            case "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
                return Manga.MangaStatus.HIATUS;
            case "cancelled":
            case "canceled":
            case "dropped":
            case "–æ—Ç–º–µ–Ω–µ–Ω":
            case "–æ—Ç–º–µ–Ω—ë–Ω":
            case "–æ—Ç–º–µ–Ω–µ–Ω–∞":
            case "–æ—Ç–º–µ–Ω–µ–Ω–æ":
            case "–≤—ã–ø—É—Å–∫ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω":
            case "–≤—ã–ø—É—Å–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω":
            case "–≤—ã–ø—É—Å–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞":
            case "–≤—ã–ø—É—Å–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ":
                return Manga.MangaStatus.CANCELLED;
            default:
                return Manga.MangaStatus.ONGOING;
        }
    }

    private void setFallbackCoverFromJson(Manga manga, Map<String, Object> mangaInfo) {
        // Fallback - –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ JSON
        List<Map<String, Object>> covers = (List<Map<String, Object>>) mangaInfo.get("covers");
        if (covers != null && !covers.isEmpty()) {
            Map<String, Object> firstCover = covers.get(0);
            String coverUrl = (String) firstCover.get("link");
            if (coverUrl != null && !coverUrl.trim().isEmpty()) {
                manga.setCoverImageUrl(coverUrl.trim());
                mangaRepository.save(manga);
            }
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –º–∞–Ω–≥—É –∏–∑ MelonService (JSON, –æ–±–ª–æ–∂–∫—É, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
     */
    public Map<String, Object> deleteManga(String filename) {
        try {
            String url = melonServiceUrl + "/delete/" + filename;
            ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.DELETE, null, Map.class);
            return response.getBody();
        } catch (Exception e) {
            return Map.of("success", false, "message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MelonService
     */
    public boolean isServiceAvailable() {
        try {
            String url = melonServiceUrl + "/";
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            return response.getStatusCode() == HttpStatus.OK;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑ MelonService –≤ Minio
     */
    public Map<String, Object> migrateExistingCovers() {
        try {
            System.out.println("Starting migration of existing covers from MelonService to Minio");

            // –ü–æ–ªÔøΩÔøΩ—á–∞–µ–º –≤—Å–µ –º–∞–Ω–≥–∏ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –æ—Ç MelonService
            List<Manga> mangasToMigrate = mangaRepository.findAll().stream()
                .filter(manga -> manga.getCoverImageUrl() != null &&
                               manga.getCoverImageUrl().contains("localhost:8084/cover/"))
                .collect(java.util.stream.Collectors.toList());

            System.out.println("Found " + mangasToMigrate.size() + " mangas with MelonService covers to migrate");

            int successCount = 0;
            int failureCount = 0;

            for (Manga manga : mangasToMigrate) {
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º filename –∏–∑ URL –æ–±–ª–æ–∂–∫–∏ MelonService
                    String coverUrl = manga.getCoverImageUrl();
                    String filename = coverUrl.substring(coverUrl.lastIndexOf("/") + 1);

                    System.out.println("Migrating cover for manga ID: " + manga.getId() +
                                     ", filename: " + filename + ", title: " + manga.getTitle());

                    // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ MelonService
                    String melonCoverUrl = melonServiceUrl + "/cover/" + filename;
                    ResponseEntity<byte[]> coverResponse = restTemplate.getForEntity(melonCoverUrl, byte[].class);

                    if (coverResponse.getStatusCode().is2xxSuccessful() && coverResponse.getBody() != null) {
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—ÅÔøΩÔøΩ–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                        String contentType = coverResponse.getHeaders().getFirst("Content-Type");
                        String fileExtension = ".jpg";
                        if (contentType != null) {
                            if (contentType.contains("png")) {
                                fileExtension = ".png";
                            } else if (contentType.contains("webp")) {
                                fileExtension = ".webp";
                            }
                        }

                        String coverFileName = "cover_" + filename + fileExtension;

                        // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å
                        MultiValueMap<String, Object> coverRequest = new LinkedMultiValueMap<>();
                        ByteArrayResource coverResource = new ByteArrayResource(coverResponse.getBody()) {
                            @Override
                            public String getFilename() {
                                return coverFileName;
                            }
                        };
                        coverRequest.add("file", coverResource);

                        HttpHeaders coverHeaders = new HttpHeaders();
                        coverHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);
                        HttpEntity<MultiValueMap<String, Object>> coverEntity = new HttpEntity<>(coverRequest, coverHeaders);

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Minio
                        ResponseEntity<Map> uploadResponse = restTemplate.postForEntity(
                            "http://image-storage-service:8083/api/images/cover/" + manga.getId(),
                            coverEntity,
                            Map.class
                        );

                        if (uploadResponse.getStatusCode().is2xxSuccessful() && uploadResponse.getBody() != null) {
                            String savedImageUrl = (String) uploadResponse.getBody().get("imageUrl");
                            if (savedImageUrl != null) {
                                // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                manga.setCoverImageUrl(savedImageUrl);
                                mangaRepository.save(manga);

                                System.out.println("Successfully migrated cover for manga: " + manga.getTitle() +
                                                 " to URL: " + savedImageUrl);
                                successCount++;
                            } else {
                                System.err.println("Failed to get saved image URL for manga: " + manga.getTitle());
                                failureCount++;
                            }
                        } else {
                            System.err.println("Failed to upload cover to Minio for manga: " + manga.getTitle() +
                                             ", status: " + uploadResponse.getStatusCode());
                            failureCount++;
                        }
                    } else {
                        System.err.println("Failed to download cover from MelonService for manga: " + manga.getTitle() +
                                         ", status: " + coverResponse.getStatusCode());
                        failureCount++;
                    }

                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
                    Thread.sleep(100);

                } catch (Exception e) {
                    System.err.println("Error migrating cover for manga " + manga.getTitle() + ": " + e.getMessage());
                    failureCount++;
                }
            }

            System.out.println("Cover migration completed. Success: " + successCount + ", Failures: " + failureCount);

            return Map.of(
                "success", true,
                "message", "Cover migration completed",
                "totalManga", mangasToMigrate.size(),
                "successCount", successCount,
                "failureCount", failureCount
            );

        } catch (Exception e) {
            System.err.println("Error during cover migration: " + e.getMessage());
            e.printStackTrace();
            return Map.of(
                "success", false,
                "error", "Error during cover migration: " + e.getMessage()
            );
        }
    }

    // –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è importChaptersWithProgress
    private void importChaptersWithProgress(String taskId, Long mangaId, List<Map<String, Object>> chapters, String filename) {
        ImportTaskService.ImportTask task = importTaskService.getTask(taskId);
        
        logger.info("=== –ò–ú–ü–û–†–¢ –ì–õ–ê–í ===");
        logger.info("Manga ID: {}", mangaId);
        logger.info("Filename (slug): {}", filename);
        logger.info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {}", chapters.size());

        for (int i = 0; i < chapters.size(); i++) {
            Map<String, Object> chapterData = chapters.get(i);

            try {
                logger.info("--- –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤—ã {}/{} ---", i + 1, chapters.size());
                // DEBUG: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–µ
                System.out.println("=== CHAPTER DEBUG ===");
                System.out.println("Chapter data: " + chapterData);

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChapterService
                Map<String, Object> chapterRequest = new HashMap<>();
                chapterRequest.put("mangaId", mangaId);

                // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã
                Object volumeObj = chapterData.get("volume");
                Object numberObj = chapterData.get("number");
                
                System.out.println("Raw volume: " + volumeObj);
                System.out.println("Raw number: " + numberObj);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã —Å —É—á–µ—Ç–æ–º —Ç–æ–º–∞
                double chapterNumber;
                int volume = 1;
                double originalNumber = 1;
                boolean isSpecialChapter = false;
                
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–º
                    volume = volumeObj != null ? Integer.parseInt(volumeObj.toString()) : 1;
                } catch (NumberFormatException e) {
                    volume = 1;
                    System.out.println("Failed to parse volume, using default: " + e.getMessage());
                }
                
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∫–∞–∫ —á–∏—Å–ª–æ
                    originalNumber = Double.parseDouble(numberObj.toString());
                    
                    // –§–æ—Ä–º—É–ª–∞: —Ç–æ–º * 1000 + –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
                    // –ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–º 2, –≥–ª–∞–≤–∞ 12.5 = 2012.5
                    chapterNumber = volume * 1000 + originalNumber;
                    
                    System.out.println("Calculated chapter number: " + chapterNumber);
                } catch (NumberFormatException e) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ, —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
                    isSpecialChapter = true;
                    
                    // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à-–∫–æ–¥ + –±–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä
                    String numberStr = numberObj.toString().toLowerCase().trim();
                    int hashCode = Math.abs(numberStr.hashCode()) % 1000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 999
                    
                    // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤: —Ç–æ–º * 1000 + 9000 + —Ö—ç—à
                    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥–ª–∞–≤—ã –±—É–¥—É—Ç –ø–æ—Å–ª–µ –æ–±—ã—á–Ω—ã—Ö
                    chapterNumber = volume * 1000 + 9000 + hashCode;
                    originalNumber = chapterNumber; // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä = –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–º—É
                    
                    System.out.println("Special chapter detected: '" + numberStr + "', calculated number: " + chapterNumber + ", error: " + e.getMessage());
                }

                chapterRequest.put("chapterNumber", chapterNumber);
                chapterRequest.put("volumeNumber", volume);
                chapterRequest.put("originalChapterNumber", originalNumber);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º title - –º–æ–∂–µ—Ç –±—ã—Ç—å null
                Object titleObj = chapterData.get("name");
                String title;
                if (titleObj != null && !titleObj.toString().trim().isEmpty()) {
                    title = titleObj.toString().trim();
                } else {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    if (isSpecialChapter) {
                        title = numberObj.toString(); // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤
                    } else if (volumeObj != null && !volumeObj.toString().equals("1")) {
                        title = "–¢–æ–º " + volumeObj + ", –ì–ª–∞–≤–∞ " + numberObj;
                    } else {
                        title = "–ì–ª–∞–≤–∞ " + numberObj;
                    }
                }
                chapterRequest.put("title", title);

                System.out.println("Final chapter request: " + chapterRequest);
                System.out.println("=== END CHAPTER DEBUG ===");

                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                HttpEntity<Map<String, Object>> entity = new HttpEntity<>(chapterRequest, headers);

                ResponseEntity<Map> response = restTemplate.postForEntity(
                    "http://chapter-service:8082/api/chapters",
                    entity,
                    Map.class
                );

                if (response.getStatusCode().is2xxSuccessful()) {
                    Long chapterId = Long.parseLong(response.getBody().get("id").toString());

                    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ MelonService
                    List<Map<String, Object>> slides = (List<Map<String, Object>>) chapterData.get("slides");
                    task.setStatus(ImportTaskService.TaskStatus.IMPORTING_PAGES);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –¥–ª—è URL-–∞ –≤ MelonService
                    String originalChapterName = numberObj.toString();
                    importChapterPagesFromMelonService(taskId, chapterId, slides, filename, originalChapterName);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    importTaskService.incrementImportedChapters(taskId);

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏ÔøΩÔøΩ–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 20% –¥–æ 95%
                    int progress = 20 + (75 * (i + 1)) / chapters.size();
                    task.setProgress(progress);

                    System.out.println("Successfully imported chapter: " + title + " with ID: " + chapterId);
                } else {
                    System.err.println("Failed to create chapter, response: " + response.getStatusCode());
                }

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥–ª–∞–≤—ã " + chapterData.get("number") + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–ª–∞–≤—ã –∏–∑ MelonService —á–µ—Ä–µ–∑ HTTP API
     */
    private void importChapterPagesFromMelonService(String taskId, Long chapterId, List<Map<String, Object>> slides,
                                                   String mangaFilename, String originalChapterName) {
        if (slides == null || slides.isEmpty()) {
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        slides.sort((slide1, slide2) -> {
            Integer index1 = Integer.parseInt(slide1.get("index").toString());
            Integer index2 = Integer.parseInt(slide2.get("index").toString());
            return index1.compareTo(index2);
        });

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ HTTP API MelonService
        for (Map<String, Object> slide : slides) {
            Integer pageIndex = Integer.parseInt(slide.get("index").toString());

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MelonService –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã
            String imageUrl = String.format("%s/images/%s/%s/%d",
                melonServiceUrl, mangaFilename, originalChapterName, pageIndex);

            System.out.println("Importing page from URL: " + imageUrl);

            try {
                // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ MelonService –≤ MangaService
                System.out.println("Downloading image from MelonService: " + imageUrl);
                ResponseEntity<byte[]> imageResponse = restTemplate.getForEntity(imageUrl, byte[].class);
                
                if (!imageResponse.getStatusCode().is2xxSuccessful() || imageResponse.getBody() == null) {
                    System.err.println("Failed to download image from MelonService: " + imageUrl + ", status: " + imageResponse.getStatusCode());
                    continue;
                }
                
                byte[] imageBytes = imageResponse.getBody();
                System.out.println("Downloaded image size: " + imageBytes.length + " bytes");

                // –°–æ–∑–¥–∞–µ–º ByteArrayResource –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                String filename = "page_" + pageIndex + ".jpg";
                ByteArrayResource imageResource = new ByteArrayResource(imageBytes) {
                    @Override
                    public String getFilename() {
                        return filename;
                    }
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ ImageStorageService
                MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
                body.add("file", imageResource);

                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.MULTIPART_FORM_DATA);
                HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ImageStorageService endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                String uploadUrl = "http://image-storage-service:8083/api/images/chapter/" + chapterId + "/page/" + pageIndex;
                ResponseEntity<Map> response = restTemplate.postForEntity(uploadUrl, entity, Map.class);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if (response.getStatusCode().is2xxSuccessful()) {
                    importTaskService.incrementImportedPages(taskId);
                    System.out.println("Successfully imported page " + pageIndex + " for chapter " + chapterId);
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    Thread.sleep(50);
                } else {
                    System.err.println("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã " + pageIndex + " –¥–ª—è –≥–ª–∞–≤—ã " + chapterId + ": HTTP " + response.getStatusCode());
                }
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.err.println("–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –¥–ª—è –≥–ª–∞–≤—ã " + chapterId);
                break;
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã " + pageIndex + " –¥–ª—è –≥–ª–∞–≤—ã " + chapterId + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–±–Ω–æ–≤–ª—è–µ–º pageCount –≤ ChapterService
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ ImageStorageService
            String getPageCountUrl = "http://image-storage-service:8083/api/images/chapter/" + chapterId + "/count";
            ResponseEntity<Integer> pageCountResponse = restTemplate.getForEntity(getPageCountUrl, Integer.class);
            
            if (pageCountResponse.getStatusCode().is2xxSuccessful() && pageCountResponse.getBody() != null) {
                Integer actualPageCount = pageCountResponse.getBody();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º pageCount –≤ ChapterService
                Map<String, Object> updateRequest = new HashMap<>();
                updateRequest.put("pageCount", actualPageCount);
                
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                HttpEntity<Map<String, Object>> updateEntity = new HttpEntity<>(updateRequest, headers);
                
                String updateChapterUrl = "http://chapter-service:8082/api/chapters/" + chapterId + "/pagecount";
                restTemplate.put(updateChapterUrl, updateEntity);
                
                System.out.println("Updated chapter " + chapterId + " pageCount to: " + actualPageCount);
            }
        } catch (Exception e) {
            System.err.println("Failed to update pageCount for chapter " + chapterId + ": " + e.getMessage());
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏ –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏:
     * - <b>, <strong> ‚Üí **bold**
     * - <i>, <em> ‚Üí *italic*
     * - <br>, <br/> ‚Üí –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
     * - <p> ‚Üí –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
     * - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è
     *
     * @param html –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å HTML-—Ç–µ–≥–∞–º–∏
     * @return —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
     */
    private String convertHtmlToMarkdown(String html) {
        if (html == null || html.isEmpty()) {
            return html;
        }

        String markdown = html
            // <br> ‚Üí –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            .replaceAll("<br\\s*/?>", "\n")
            // <p> ‚Üí –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            .replaceAll("</p>\\s*<p>", "\n\n")
            .replaceAll("</?p>", "\n\n")
            // <b>, <strong> ‚Üí **bold**
            .replaceAll("<b>(.*?)</b>", "**$1**")
            .replaceAll("<strong>(.*?)</strong>", "**$1**")
            // <i>, <em> ‚Üí *italic*
            .replaceAll("<i>(.*?)</i>", "*$1*")
            .replaceAll("<em>(.*?)</em>", "*$1*")
            // <b><i> ‚Üí ***bold+italic***
            .replaceAll("<b>\\s*<i>(.*?)</i>\\s*</b>", "***$1***")
            .replaceAll("<i>\\s*<b>(.*?)</b>\\s*</i>", "***$1***")
            .replaceAll("<strong>\\s*<em>(.*?)</em>\\s*</strong>", "***$1***")
            .replaceAll("<em>\\s*<strong>(.*?)</strong>\\s*</em>", "***$1***")
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
            .replaceAll("<[^>]*>", "")
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ ‚Üí –æ–¥–∏–Ω)
            .replaceAll(" +", " ")
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 3 –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ ‚Üí 2 –ø–µ—Ä–µ–Ω–æ—Å–∞)
            .replaceAll("\n{3,}", "\n\n")
            .trim();

        return markdown;
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ MelonService
     */
    public Map<String, Object> cancelMelonTask(String taskId) {
        String url = melonServiceUrl + "/tasks/" + taskId + "/cancel";
        
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            ResponseEntity<Map> response = restTemplate.postForEntity(url, entity, Map.class);
            Map<String, Object> body = response.getBody();
            
            if (body != null) {
                logger.info("–ó–∞–¥–∞—á–∞ {} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ MelonService: {}", taskId, body);
                return body;
            } else {
                logger.warn("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {}", taskId);
                return Map.of(
                    "cancelled", false,
                    "message", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç MelonService"
                );
            }
            
        } catch (org.springframework.web.client.HttpClientErrorException.NotFound e) {
            logger.warn("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MelonService: {}", taskId);
            return Map.of(
                "cancelled", false,
                "message", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MelonService"
            );
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {}: {}", taskId, e.getMessage());
            return Map.of(
                "cancelled", false,
                "message", "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: " + e.getMessage()
            );
        }
    }
}
