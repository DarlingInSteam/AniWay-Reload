package shadowshift.studio.parserservice.config;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.core5.http.HttpHost;
import org.apache.hc.core5.util.Timeout;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import shadowshift.studio.parserservice.service.ProxyManagerService;
import shadowshift.studio.parserservice.service.ProxyManagerService.ProxyServer;

@Configuration
public class RestTemplateConfig {
    
    private static final Logger logger = LoggerFactory.getLogger(RestTemplateConfig.class);

    @Autowired
    private ProxyManagerService proxyManager;
    
    // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±—â–∏–π Connection Pool –¥–ª—è –í–°–ï–• –ø—Ä–æ–∫—Å–∏ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
    private PoolingHttpClientConnectionManager sharedConnectionManager;
    
    @PostConstruct
    public void initConnectionPool() {
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–≥–æ Connection Pool –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏...");
        
        sharedConnectionManager = new PoolingHttpClientConnectionManager();
        sharedConnectionManager.setMaxTotal(200);          // 20 –ø—Ä–æ–∫—Å–∏ √ó 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        sharedConnectionManager.setDefaultMaxPerRoute(10); // 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 20 –ø—Ä–æ–∫—Å–∏)
        
        logger.info("‚úÖ Connection Pool —Å–æ–∑–¥–∞–Ω: MaxTotal=200, MaxPerRoute=10 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 20 –ø—Ä–æ–∫—Å–∏, 1 –≥–ª–∞–≤–∞)");
    }
    
    @PreDestroy
    public void closeConnectionPool() {
        if (sharedConnectionManager != null) {
            logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—â–µ–≥–æ Connection Pool...");
            sharedConnectionManager.close();
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç RestTemplate —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏
     * ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Sticky Proxy Assignment (–∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ–∫—Å–∏)
     */
    @Bean
    @Primary
    @Scope("prototype")
    public RestTemplate restTemplate() {
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (sticky assignment)
        ProxyServer proxy = proxyManager.getProxyForCurrentThread();
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π Connection Manager –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        CloseableHttpClient httpClient = createHttpClientWithSharedPool(proxy);
        
        // Create factory
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);
        
        return new RestTemplate(factory);
    }
    
    /**
     * ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞—ë—Ç HTTP –∫–ª–∏–µ–Ω—Ç —Å –æ–±—â–∏–º Connection Pool
     */
    private CloseableHttpClient createHttpClientWithSharedPool(ProxyServer proxy) {
        if (proxy == null || proxy.getHost() == null) {
            logger.debug("Thread {}: No proxy, using direct connection with shared pool", 
                Thread.currentThread().getName());
            return createDirectHttpClientWithSharedPool();
        }
        
        logger.debug("Thread {}: Using proxy {} with shared pool", 
            Thread.currentThread().getName(), proxy.getHost());
        
        // Configure proxy
        HttpHost proxyHost = new HttpHost(proxy.getHost(), proxy.getPort());
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–∞–∫ –≤ Python)
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofSeconds(2))    // 5s ‚Üí 2s: –ø—Ä–æ–∫—Å–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ
                .setResponseTimeout(Timeout.ofSeconds(8))   // 15s ‚Üí 8s: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏–µ
                .setProxy(proxyHost)
                .build();
        
        // ‚ö° –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ë–©–ò–ô Connection Manager –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setConnectionManager(sharedConnectionManager)  // ‚Üê –û–ë–©–ò–ô –ü–£–õ!
                .build();
    }
    
    private CloseableHttpClient createDirectHttpClientWithSharedPool() {
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –≤ Python)
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofSeconds(2))    // 5s ‚Üí 2s
                .setResponseTimeout(Timeout.ofSeconds(8))   // 15s ‚Üí 8s
                .build();
        
        // ‚ö° –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ë–©–ò–ô Connection Manager
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setConnectionManager(sharedConnectionManager)  // ‚Üê –û–ë–©–ò–ô –ü–£–õ!
                .build();
    }
    
    /**
     * @deprecated –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ shared pool - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
     */
    @Deprecated
    private CloseableHttpClient createHttpClientWithProxy(ProxyServer proxy) {
        if (proxy == null || proxy.getHost() == null) {
            logger.warn("No proxy available, using direct connection");
            return createDirectHttpClient();
        }
        
        logger.debug("Creating HTTP client with proxy: {}:{}", proxy.getHost(), proxy.getPort());
        
        // Configure proxy
        HttpHost proxyHost = new HttpHost(proxy.getHost(), proxy.getPort());
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofSeconds(5))       // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10s –¥–æ 5s
                .setResponseTimeout(Timeout.ofSeconds(15))     // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 30s –¥–æ 15s
                .setProxy(proxyHost)
                .build();
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–µ–Ω connection pool –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(200);           // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å–æ 100 –¥–æ 200
        connectionManager.setDefaultMaxPerRoute(50);  // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 50
        
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setConnectionManager(connectionManager)
                .build();
    }
    
    private CloseableHttpClient createDirectHttpClient() {
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofSeconds(5))       // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10s –¥–æ 5s
                .setResponseTimeout(Timeout.ofSeconds(15))     // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 30s –¥–æ 15s
                .build();
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–µ–Ω connection pool –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(200);           // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å–æ 100 –¥–æ 200
        connectionManager.setDefaultMaxPerRoute(50);  // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 50
        
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setConnectionManager(connectionManager)
                .build();
    }

}

