package shadowshift.studio.parserservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import shadowshift.studio.parserservice.config.ParserProperties;

import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞
 */
@Service
public class MaintenanceService {

    private static final Logger logger = LoggerFactory.getLogger(MaintenanceService.class);

    @Autowired
    private ParserProperties properties;

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (archives, images, titles)
     */
    public Map<String, Object> cleanup() {
        logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...");

        Map<String, Object> result = new LinkedHashMap<>();
        List<Map<String, Object>> details = new ArrayList<>();
        
        try {
            Path outputPath = Paths.get(properties.getOutputPath());

            if (!Files.exists(outputPath)) {
                logger.warn("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", outputPath);
                result.put("success", true);
                result.put("base_path", outputPath.toString());
                result.put("details", details);
                return result;
            }

            // –û—á–∏—â–∞–µ–º —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: archives, images, titles
            String[] targets = {"archives", "images", "titles"};
            
            for (String targetName : targets) {
                Path targetPath = outputPath.resolve(targetName);
                Map<String, Object> summary = cleanupDirectory(targetPath, targetName);
                details.add(summary);
            }

            boolean hasErrors = details.stream()
                .anyMatch(d -> !((List<?>) d.get("errors")).isEmpty());
            
            result.put("success", !hasErrors);
            result.put("base_path", outputPath.toString());
            result.put("details", details);
            
            if (hasErrors) {
                logger.warn("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: {}", details);
            } else {
                logger.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            }

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {}", e.getMessage(), e);
            result.put("success", false);
            result.put("error", e.getMessage());
        }

        return result;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    private Map<String, Object> cleanupDirectory(Path targetPath, String name) {
        Map<String, Object> summary = new LinkedHashMap<>();
        summary.put("name", name);
        summary.put("path", targetPath.toString());
        
        List<String> errors = new ArrayList<>();
        int deletedFiles = 0;
        int deletedDirs = 0;
        long freedSpace = 0;

        try {
            if (!Files.exists(targetPath)) {
                summary.put("exists", false);
                summary.put("deleted_files", 0);
                summary.put("deleted_directories", 0);
                summary.put("freed_space_bytes", 0);
                summary.put("errors", errors);
                logger.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {}", name, targetPath);
                return summary;
            }

            summary.put("exists", true);

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try (var stream = Files.walk(targetPath)) {
                var paths = stream.sorted(java.util.Comparator.reverseOrder())
                    .collect(java.util.stream.Collectors.toList());
                
                for (Path path : paths) {
                    if (path.equals(targetPath)) {
                        continue; // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    }
                    
                    try {
                        if (Files.isRegularFile(path)) {
                            long size = Files.size(path);
                            Files.delete(path);
                            deletedFiles++;
                            freedSpace += size;
                        } else if (Files.isDirectory(path)) {
                            Files.delete(path);
                            deletedDirs++;
                        }
                    } catch (IOException e) {
                        errors.add(String.format("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è %s: %s", path.getFileName(), e.getMessage()));
                    }
                }
            }

            logger.info("–û—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {}: —É–¥–∞–ª–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤, {} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {} –±–∞–π—Ç", 
                name, deletedFiles, deletedDirs, freedSpace);

        } catch (Exception e) {
            errors.add(String.format("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ %s: %s", name, e.getMessage()));
            logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {}: {}", name, e.getMessage(), e);
        }

        summary.put("deleted_files", deletedFiles);
        summary.put("deleted_directories", deletedDirs);
        summary.put("freed_space_bytes", freedSpace);
        summary.put("freed_space_mb", freedSpace / (1024 * 1024));
        summary.put("errors", errors);

        return summary;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–∞–Ω–≥
     */
    public List<String> listParsedMangas() {
        try {
            Path titlesDir = Paths.get(properties.getOutputPath(), "titles");

            if (!Files.exists(titlesDir)) {
                return Collections.emptyList();
            }

            // –ò—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ titles/
            try (Stream<Path> paths = Files.walk(titlesDir, 1)) {
                return paths
                        .filter(Files::isRegularFile)
                        .filter(p -> p.toString().endsWith(".json"))
                        .map(p -> p.getFileName().toString().replace(".json", ""))
                        .sorted()
                        .collect(Collectors.toList());
            }

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞–Ω–≥: {}", e.getMessage(), e);
            return Collections.emptyList();
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞–Ω–≥–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
     * –í–ê–ñ–ù–û: JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ù–ï —É–¥–∞–ª—è—é—Ç—Å—è (–Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
     * –£–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤ –∏ –æ–±–ª–æ–∂–∫–∏
     */
    public boolean deleteManga(String slug) {
        try {
            Path outputPath = Paths.get(properties.getOutputPath());
            int deletedCount = 0;

            // JSON –ù–ï –£–î–ê–õ–Ø–ï–ú - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            logger.debug("JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: titles/{}.json", slug);

            // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ archives/ (–≥–ª–∞–≤—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
            Path archivesDir = outputPath.resolve("archives").resolve(slug);
            if (Files.exists(archivesDir) && Files.isDirectory(archivesDir)) {
                deleteDirectory(archivesDir);
                deletedCount++;
                logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≥–ª–∞–≤–∞–º–∏: {}", archivesDir);
            }

            // –£–¥–∞–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ images/
            Path imagesDir = outputPath.resolve("images");
            if (Files.exists(imagesDir) && Files.isDirectory(imagesDir)) {
                try (Stream<Path> files = Files.list(imagesDir)) {
                    long coverCount = files.filter(f -> f.getFileName().toString().startsWith(slug + "."))
                        .peek(coverFile -> {
                            try {
                                Files.delete(coverFile);
                                logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: {}", coverFile);
                            } catch (IOException e) {
                                logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ {}: {}", coverFile, e.getMessage());
                            }
                        })
                        .count();
                    deletedCount += coverCount;
                }
            }

            boolean deleted = deletedCount > 0;
            if (deleted) {
                logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è '{}': –≥–ª–∞–≤—ã –∏ –æ–±–ª–æ–∂–∫–∏ —É–¥–∞–ª–µ–Ω—ã, JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω", slug);
            } else {
                logger.warn("‚ö†Ô∏è –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –¥–ª—è '{}': —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", slug);
            }

            return deleted;

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ {}: {}", slug, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    private void deleteDirectory(Path directory) throws IOException {
        Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.delete(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.delete(dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }
}
