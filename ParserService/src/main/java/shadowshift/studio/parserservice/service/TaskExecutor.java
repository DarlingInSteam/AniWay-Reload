package shadowshift.studio.parserservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import shadowshift.studio.parserservice.domain.task.ParserTask;
import shadowshift.studio.parserservice.domain.task.TaskStatus;

import java.time.Instant;

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
@Service
public class TaskExecutor {
    
    private static final Logger logger = LoggerFactory.getLogger(TaskExecutor.class);
    
    private final MangaLibParserService parserService;
    private final TaskService taskService;
    
    public TaskExecutor(MangaLibParserService parserService, TaskService taskService) {
        this.parserService = parserService;
        this.taskService = taskService;
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    @Async
    public void executeParseTask(ParserTask task) {
        try {
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", task.getId());
            
            taskService.markRunning(task);
            taskService.appendLog(task, "Starting parse task");
            
            String slug = task.getSlugs().get(0);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            var result = parserService.parseManga(slug, "mangalib").join();
            
            if (result != null && result.getChapters() != null && !result.getChapters().isEmpty()) {
                taskService.markCompleted(task);
                taskService.appendLog(task, String.format("Parse completed: %d chapters", result.getChapters().size()));
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {} ({} –≥–ª–∞–≤)", 
                    task.getId(), result.getChapters().size());
            } else {
                task.setStatus(TaskStatus.FAILED);
                task.setCompletedAt(Instant.now());
                taskService.appendLog(task, "Parse failed: no chapters found");
                logger.error("‚ùå –ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {} (–≥–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)", task.getId());
            }
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ {}: {}", task.getId(), e.getMessage(), e);
            task.setStatus(TaskStatus.FAILED);
            task.setCompletedAt(Instant.now());
            taskService.appendLog(task, "Parse failed: " + e.getMessage());
        }
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –±–∏–ª–¥–∞ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
     */
    @Async
    public void executeBuildTask(ParserTask task) {
        try {
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–∏–ª–¥–∞: {}", task.getId());
            
            taskService.markRunning(task);
            taskService.appendLog(task, "Starting build task");
            
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            taskService.appendLog(task, "Build not implemented yet");
            task.setStatus(TaskStatus.FAILED);
            task.setCompletedAt(Instant.now());
            
            logger.warn("‚ö†Ô∏è Build task not implemented: {}", task.getId());
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–∏–ª–¥–∞ {}: {}", task.getId(), e.getMessage(), e);
            task.setStatus(TaskStatus.FAILED);
            task.setCompletedAt(Instant.now());
            taskService.appendLog(task, "Build failed: " + e.getMessage());
        }
    }
}
