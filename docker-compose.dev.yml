version: '3.8'

networks:
  aniway-network:
    driver: bridge

services:
  # Manga Service - для разработки с volume binding
  manga-service:
    build:
      context: ./MangaService
      dockerfile: Dockerfile.dev
    volumes:
      - ./MangaService/src:/app/src:ro
      - ./MangaService/build.gradle.kts:/app/build.gradle.kts:ro
      - gradle-cache-manga:/home/gradle/.gradle
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DATASOURCE_URL=jdbc:postgresql://manga-postgres:5432/manga_db
      - SPRING_DATASOURCE_USERNAME=manga_user
      - SPRING_DATASOURCE_PASSWORD=manga_password
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MELON_SERVICE_URL=http://melon-service:8084
      - MELON_SERVICE_PUBLIC_URL=http://192.168.0.3:8084
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8081:8081"
    depends_on:
      manga-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aniway-network

  # Chapter Service - для разработки
  chapter-service:
    build:
      context: ./ChapterService
      dockerfile: Dockerfile.dev
    volumes:
      - ./ChapterService/src:/app/src:ro
      - ./ChapterService/build.gradle.kts:/app/build.gradle.kts:ro
      - gradle-cache-chapter:/home/gradle/.gradle
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DATASOURCE_URL=jdbc:postgresql://chapter-postgres:5432/chapter_db
      - SPRING_DATASOURCE_USERNAME=chapter_user
      - SPRING_DATASOURCE_PASSWORD=chapter_password
      - MANGA_SERVICE_URL=http://manga-service:8081
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8082:8082"
    depends_on:
      chapter-postgres:
        condition: service_healthy
    networks:
      - aniway-network

  # Image Storage Service - для разработки
  image-storage-service:
    build:
      context: ./ImageStorageService
      dockerfile: Dockerfile.dev
    volumes:
      - ./ImageStorageService/src:/app/src:ro
      - ./ImageStorageService/build.gradle.kts:/app/build.gradle.kts:ro
      - gradle-cache-image:/home/gradle/.gradle
      - melon_data:/app/Output  # Общий том с MelonService для доступа к скачанным изображениям
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DATASOURCE_URL=jdbc:postgresql://image-storage-postgres:5432/image_storage_db
      - SPRING_DATASOURCE_USERNAME=image_user
      - SPRING_DATASOURCE_PASSWORD=image_password
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_PUBLIC_ENDPOINT=http://192.168.0.3:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MANGA_SERVICE_URL=http://manga-service:8081
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
    ports:
      - "8083:8083"
    depends_on:
      image-storage-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aniway-network

  # Gateway Service - для разработки
  gateway-service:
    build:
      context: ./GateWayService
      dockerfile: Dockerfile.dev
    volumes:
      - ./GateWayService/src:/app/src:ro
      - ./GateWayService/build.gradle.kts:/app/build.gradle.kts:ro
      - gradle-cache-gateway:/home/gradle/.gradle
    environment:
      - SPRING_PROFILES_ACTIVE=dev,docker
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - MANGA_SERVICE_URL=http://manga-service:8081
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8080:8080"
    depends_on:
      - manga-service
      - chapter-service
      - image-storage-service
    networks:
      - aniway-network

  # MelonService - парсер манги (dev режим)
  melon-service:
    build:
      context: ./MelonService
      dockerfile: Dockerfile.dev
    ports:
      - "8084:8084"
    volumes:
      - ./MelonService:/app:ro
      - melon_data:/app/Output
      - melon_logs:/app/Logs
      - melon_temp:/app/Temp
    environment:
      - PYTHONPATH=/app
    networks:
      - aniway-network
    restart: unless-stopped

  # Frontend - для разработки с hot-reload
  frontend:
    build:
      context: ./AniWayFrontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./AniWayFrontend/src:/app/src
      - ./AniWayFrontend/public:/app/public
      - ./AniWayFrontend/package.json:/app/package.json:ro
      - ./AniWayFrontend/vite.config.ts:/app/vite.config.ts:ro
      - ./AniWayFrontend/tsconfig.json:/app/tsconfig.json:ro
      - ./AniWayFrontend/tailwind.config.js:/app/tailwind.config.js:ro
      - node_modules-cache:/app/node_modules
    ports:
      - "5173:5173"  # Vite dev server
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - manga-service
    networks:
      - aniway-network

volumes:
  gradle-cache-manga:
  gradle-cache-chapter:
  gradle-cache-image:
  gradle-cache-gateway:
  node_modules-cache:
  melon_data:
  melon_logs:
  melon_temp:
  melon_logs_temp:
  melon_data_temp:
