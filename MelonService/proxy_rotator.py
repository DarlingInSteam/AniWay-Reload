#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è MelonService
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import json
import threading
from pathlib import Path
from typing import Dict, List, Optional
from itertools import cycle


class ProxyRotator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    - round-robin: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è (–ø–æ –∫—Ä—É–≥—É)
    - random: –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    - failover: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    """
    
    def __init__(self, settings_path: str = None, parser: str = "mangalib"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—Ç–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏
        
        Args:
            settings_path: –ü—É—Ç—å –∫ settings.json (–µ—Å–ª–∏ None - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            parser: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞ (mangalib, slashlib, etc.)
        """
        self.parser = parser
        self.lock = threading.Lock()  # –î–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ settings.json
        if settings_path is None:
            base_path = Path(__file__).parent / "Parsers" / parser
            settings_path = base_path / "settings.json"
        
        self.settings_path = Path(settings_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._load_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è round-robin
        if self.proxies:
            self.proxy_iterator = cycle(self.proxies)
            self.current_proxy_index = 0
        else:
            self.proxy_iterator = None
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ settings.json"""
        try:
            with open(self.settings_path, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            proxy_config = settings.get("proxy", {})
            self.enabled = proxy_config.get("enable", False)
            self.rotation_strategy = proxy_config.get("rotation", "round-robin")
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            if "host" in proxy_config:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏
                self.proxies = [{
                    "host": proxy_config.get("host"),
                    "port": proxy_config.get("port"),
                    "login": proxy_config.get("login"),
                    "password": proxy_config.get("password")
                }]
            else:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
                self.proxies = proxy_config.get("proxies", [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            self.proxies = [p for p in self.proxies if p.get("host") and p.get("port")]
            
        except Exception as e:
            print(f"[ProxyRotator] ‚ö†Ô∏è  Error loading settings: {e}")
            self.enabled = False
            self.proxies = []
            self.rotation_strategy = "round-robin"
    
    def _build_proxy_url(self, proxy: Dict) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç URL –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            proxy: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ (host, port, login, password)
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "http://login:password@host:port" –∏–ª–∏ "http://host:port"
        """
        host = proxy.get("host")
        port = proxy.get("port")
        login = proxy.get("login")
        password = proxy.get("password")
        
        if login and password:
            return f"http://{login}:{password}@{host}:{port}"
        else:
            return f"http://{host}:{port}"
    
    def get_next_proxy(self) -> Optional[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Ç–∞—Ü–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {'http': '...', 'https': '...'} –∏–ª–∏ None –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
        """
        if not self.enabled or not self.proxies:
            return None
        
        with self.lock:
            if self.rotation_strategy == "round-robin":
                proxy_config = next(self.proxy_iterator)
                self.current_proxy_index = (self.current_proxy_index + 1) % len(self.proxies)
            
            elif self.rotation_strategy == "random":
                import random
                proxy_config = random.choice(self.proxies)
            
            elif self.rotation_strategy == "failover":
                # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏ (—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
                proxy_config = self.proxies[0]
            
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - round-robin
                proxy_config = next(self.proxy_iterator)
            
            proxy_url = self._build_proxy_url(proxy_config)
            
            return {
                'http': proxy_url,
                'https': proxy_url
            }
    
    def get_current_proxy(self) -> Optional[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {'http': '...', 'https': '...'} –∏–ª–∏ None
        """
        if not self.enabled or not self.proxies:
            return None
        
        # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        current_index = self.current_proxy_index if hasattr(self, 'current_proxy_index') else 0
        proxy_config = self.proxies[current_index]
        proxy_url = self._build_proxy_url(proxy_config)
        
        return {
            'http': proxy_url,
            'https': proxy_url
        }
    
    def mark_proxy_failed(self, proxy_url: str):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π (–¥–ª—è failover —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
        
        Args:
            proxy_url: URL –ø—Ä–æ–∫—Å–∏ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É failover
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏
        # –ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        pass
    
    def get_all_proxies(self) -> List[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–æ–∫—Å–∏
        """
        if not self.enabled or not self.proxies:
            return []
        
        result = []
        for proxy_config in self.proxies:
            proxy_url = self._build_proxy_url(proxy_config)
            result.append({
                'http': proxy_url,
                'https': proxy_url
            })
        
        return result
    
    def get_proxy_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        return len(self.proxies) if self.enabled else 0
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ç–æ—Ä–∞"""
        if not self.enabled:
            return "ProxyRotator(disabled)"
        
        count = len(self.proxies)
        strategy = self.rotation_strategy
        return f"ProxyRotator(enabled, {count} proxies, strategy={strategy})"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_global_rotator = None


def get_proxy_rotator(parser: str = "mangalib") -> ProxyRotator:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProxyRotator
    
    Args:
        parser: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
    
    Returns:
        ProxyRotator instance
    """
    global _global_rotator
    
    if _global_rotator is None:
        _global_rotator = ProxyRotator(parser=parser)
    
    return _global_rotator


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Ç–∞—Ç–æ—Ä–∞
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROXY ROTATOR")
    print("="*60)
    
    rotator = ProxyRotator(parser="mangalib")
    print(f"\n{rotator}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏: {rotator.get_proxy_count()}")
    
    if rotator.enabled:
        print("\nüìã –í—Å–µ –ø—Ä–æ–∫—Å–∏:")
        for i, proxy in enumerate(rotator.get_all_proxies(), 1):
            print(f"  {i}. {proxy['http']}")
        
        print("\nüîÑ –†–æ—Ç–∞—Ü–∏—è (5 –∑–∞–ø—Ä–æ—Å–æ–≤):")
        for i in range(5):
            proxy = rotator.get_next_proxy()
            if proxy:
                # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                proxy_str = proxy['http']
                if '@' in proxy_str:
                    parts = proxy_str.split('@')
                    masked = parts[0].split(':')
                    masked[-1] = '***'
                    proxy_str = ':'.join(masked) + '@' + parts[1]
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {proxy_str}")
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
