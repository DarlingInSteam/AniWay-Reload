#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ MangaLib API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π—Ç–ª–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–∞
"""

import requests
import json

# –ü—Ä–æ–∫—Å–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
PROXY = {
    'http': 'http://PS20z2:fFNHVg@168.80.1.136:8000',
    'https': 'http://PS20z2:fFNHVg@168.80.1.136:8000'
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ Chrome 131
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Accept-Encoding': 'gzip, deflate, br',
    'Cache-Control': 'max-age=0',
    'Sec-Ch-Ua': '"Chromium";v="131", "Google Chrome";v="131", "Not_A Brand";v="24"',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Ch-Ua-Platform': '"Windows"',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Sec-Fetch-User': '?1',
    'Upgrade-Insecure-Requests': '1'
}

def test_title_page(slug: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π—Ç–ª–∞ –Ω–∞ MangaLib"""
    
    url = f"https://mangalib.me/{slug}"
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {slug}")
    print(f"{'='*60}")
    print(f"URL: {url}")
    print(f"–ü—Ä–æ–∫—Å–∏: {PROXY['http']}")
    print()
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.get(url, headers=HEADERS, proxies=PROXY, timeout=30)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        print(f"üîó –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {response.url}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        print("üìã –ö–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
        for header in ['content-type', 'content-length', 'server', 'set-cookie']:
            value = response.headers.get(header)
            if value:
                print(f"  {header}: {value[:100]}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = response.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç
        if 'location.href' in content or 'window.location' in content:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω JavaScript —Ä–µ–¥–∏—Ä–µ–∫—Ç!")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            import re
            redirect_match = re.search(r'location\.href\s*=\s*["\']([^"\']+)["\']', content)
            if redirect_match:
                print(f"   –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {redirect_match.group(1)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CloudFlare challenge
        if 'cf-browser-verification' in content or 'Just a moment' in content:
            print("üõ°Ô∏è  CloudFlare Challenge –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
            print("   MangaLib –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±–æ—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
        if 'captcha' in content.lower() or 'recaptcha' in content.lower():
            print("ü§ñ CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ IP
        if '403' in content or 'forbidden' in content.lower() or 'access denied' in content.lower():
            print("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403 Forbidden)")
            print("   –í–æ–∑–º–æ–∂–Ω–æ IP –ø—Ä–æ–∫—Å–∏ —Ç–æ–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–Ω–≥–∏
        if '__DATA__' in content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ __DATA__ (–¥–∞–Ω–Ω—ã–µ —Ç–∞–π—Ç–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
            try:
                import re
                data_match = re.search(r'window\.__DATA__\s*=\s*({.+?});', content, re.DOTALL)
                if data_match:
                    data_json = data_match.group(1)
                    data = json.loads(data_json)
                    print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                    
                    if 'manga' in data:
                        manga = data['manga']
                        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–Ω–≥–∏: {manga.get('name', 'N/A')}")
                        print(f"   Slug: {manga.get('slug', 'N/A')}")
                        print(f"   –¢–∏–ø: {manga.get('type', 'N/A')}")
                        
                        if 'branches' in manga:
                            branches = manga['branches']
                            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–æ–∫: {len(branches)}")
                            for branch in branches:
                                print(f"     - –í–µ—Ç–∫–∞ {branch.get('id')}: {branch.get('count_chapters')} –≥–ª–∞–≤")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ __DATA__: {e}")
        else:
            print("‚ùå –ë–ª–æ–∫ __DATA__ –ù–ï –Ω–∞–π–¥–µ–Ω!")
            print("   –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        output_file = f"test_title_{slug.replace('/', '_')}.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"\nüíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        print(f"   –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
        print(f"   {content[:500]}")
        
        return response.status_code == 200 and '__DATA__' in content
        
    except requests.exceptions.ProxyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False
    except requests.exceptions.Timeout:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>30 —Å–µ–∫)")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


def test_api_endpoint(slug: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–∞"""
    
    # MangaLib –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π API
    api_url = f"https://api.mangalib.me/api/manga/{slug}"
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint: {slug}")
    print(f"{'='*60}")
    print(f"URL: {api_url}")
    print()
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
        response = requests.get(api_url, headers=HEADERS, proxies=PROXY, timeout=30)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        print()
        
        if response.status_code == 200:
            try:
                data = response.json()
                print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys())}")
                
                if 'data' in data:
                    manga_data = data['data']
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {manga_data.get('name', 'N/A')}")
                    print(f"   Slug: {manga_data.get('slug', 'N/A')}")
                    print(f"   –ì–ª–∞–≤—ã: {manga_data.get('chapters_count', 'N/A')}")
                
                return True
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ slug'–∏ –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
    test_slugs = [
        "sweet-home-kim-carnby-",
        "suddenly-became-a-princess-one-day-",
        "nan-hao-shang-feng",
        "the-beginning-after-the-end"
    ]
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–û–í –ö MANGALIB")
    print("="*60)
    
    results = []
    
    for slug in test_slugs:
        # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π—Ç–ª–∞
        page_ok = test_title_page(slug)
        
        # –¢–µ—Å—Ç API endpoint
        api_ok = test_api_endpoint(slug)
        
        results.append({
            'slug': slug,
            'page': page_ok,
            'api': api_ok
        })
        
        print("\n" + "-"*60)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    for result in results:
        status_page = "‚úÖ" if result['page'] else "‚ùå"
        status_api = "‚úÖ" if result['api'] else "‚ùå"
        print(f"{result['slug'][:30]:30} | Page: {status_page} | API: {status_api}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if all(r['page'] for r in results):
        print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ")
    elif not any(r['page'] for r in results):
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ IP")
    else:
        print("‚ö†Ô∏è  –î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π")
    
    if all(r['api'] for r in results):
        print("‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –≤–º–µ—Å—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML")
    elif not any(r['api'] for r in results):
        print("‚ùå API endpoint –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
