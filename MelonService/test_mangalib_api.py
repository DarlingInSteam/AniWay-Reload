#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç API MangaLib (api.cdnlibs.org) - –ø—Ä–æ–≤–µ—Ä–∫–∞ slug'–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤
"""

import requests
import json

PROXY = {
    'http': 'http://PS20z2:fFNHVg@168.80.1.136:8000',
    'https': 'http://PS20z2:fFNHVg@168.80.1.136:8000'
}

def test_catalog_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    api_url = "https://api.cdnlibs.org/api/manga?fields[]=rate_avg&fields[]=rate&fields[]=releaseDate&page=1"
    
    headers = {
        "Site-Id": "1",  # 1 = mangalib
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Accept-Encoding": "gzip, deflate, br",
        "Origin": "https://mangalib.me",
        "Referer": "https://mangalib.me/manga-list",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "cross-site",
        "Sec-Ch-Ua": '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": '"Windows"'
    }
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–∞—Ç–∞–ª–æ–≥–∞ MangaLib")
    print(f"{'='*60}")
    print(f"URL: {api_url}")
    print(f"–ü—Ä–æ–∫—Å–∏: {PROXY['http']}")
    print()
    
    try:
        response = requests.get(api_url, headers=headers, proxies=PROXY, timeout=30)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
        print()
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
            
            manga_list = data.get("data", [])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞–Ω–≥–∏: {len(manga_list)}")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 slug'–æ–≤
            print("üìö –ü–µ—Ä–≤—ã–µ 10 slug'–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:")
            for i, manga in enumerate(manga_list[:10], 1):
                slug = manga.get("slug", "NO SLUG")
                name = manga.get("name", manga.get("rus_name", "NO NAME"))
                print(f"  {i:2}. {slug:40} | {name[:40]}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 slug'–∞
            print(f"\n{'='*60}")
            print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–π—Ç–ª–æ–≤ –ø–æ slug'–∞–º")
            print(f"{'='*60}")
            
            for manga in manga_list[:3]:
                slug = manga.get("slug")
                if slug:
                    test_title_by_slug(slug)
                    print()
            
            return manga_list[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
            return []
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []


def test_title_by_slug(slug: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–∞ –ø–æ slug —á–µ—Ä–µ–∑ web –∏ API"""
    
    print(f"\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ slug: {slug}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ WEB —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    web_url = f"https://mangalib.me/{slug}"
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        }
        r = requests.get(web_url, headers=headers, proxies=PROXY, timeout=10)
        has_data = '__DATA__' in r.text
        web_status = "‚úÖ" if (r.status_code == 200 and has_data) else "‚ùå"
        print(f"    WEB: {web_status} {web_url} - {r.status_code} - DATA: {has_data}")
    except Exception as e:
        print(f"    WEB: ‚ùå {web_url} - ERROR: {str(e)[:50]}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint
    api_url = f"https://api.cdnlibs.org/api/manga/{slug}"
    try:
        headers = {
            "Site-Id": "1",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json",
            "Origin": "https://mangalib.me",
            "Referer": f"https://mangalib.me/{slug}",
        }
        r = requests.get(api_url, headers=headers, proxies=PROXY, timeout=10)
        if r.status_code == 200:
            data = r.json()
            title_data = data.get("data", {})
            name = title_data.get("name", title_data.get("rus_name", "NO NAME"))
            api_status = "‚úÖ"
            print(f"    API: {api_status} {api_url} - {r.status_code} - –ù–∞–∑–≤–∞–Ω–∏–µ: {name[:40]}")
        else:
            print(f"    API: ‚ùå {api_url} - {r.status_code}")
    except Exception as e:
        print(f"    API: ‚ùå {api_url} - ERROR: {str(e)[:50]}")


if __name__ == "__main__":
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API MANGALIB (api.cdnlibs.org)")
    print("="*60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
    manga_list = test_catalog_api()
    
    print(f"\n{'='*60}")
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print(f"{'='*60}")
    
    if manga_list:
        print(f"\nüí° –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(manga_list)} —Ç–∞–π—Ç–ª–æ–≤")
        print("üìå –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ –ø–∞—Ä—Å–µ—Ä–µ - –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–π—Ç–ª–∞")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  1. –ü–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π URL –∏–ª–∏ API endpoint")
        print("  2. MangaLib –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (__DATA__)")
        print("  3. –¢—Ä–µ–±—É–µ—Ç—Å—è JavaScript –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("  4. –ü—Ä–æ–∫—Å–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∞—Ä—Å–µ—Ä–∞")
    else:
        print("\n‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ API")
