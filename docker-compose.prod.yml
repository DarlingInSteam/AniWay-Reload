services:
  # Frontend
  aniway-frontend:
    build:
      context: ./AniWayFrontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - aniway-network

  # Gateway Service
  gateway-service:
    build:
      context: ./GateWayService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_ENABLED=false
      - POST_SERVICE_URL=http://post-service:8097
      - LEVEL_SERVICE_URL=http://level-service:8098
    restart: unless-stopped
    depends_on:
      - auth-service
      - manga-service
      - comment-service
      - friend-service
      - message-service
      - chapter-service
      - image-storage-service
      - forum-service
      - melon-service
      - post-service
      - level-service
      - rabbitmq
    networks:
      - aniway-network

  # Auth Service
  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-postgres:5432/authdb
      - SPRING_DATASOURCE_USERNAME=authuser
      - SPRING_DATASOURCE_PASSWORD=authpass123
      # --- Email verification / SMTP (set real secrets via .env or CI vars) ---
      - MAIL_HOST=${MAIL_HOST:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME:-artempronko241@gmail.com}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-CHANGE_ME_APP_PASSWORD}
      - MAIL_AUTH=${MAIL_AUTH:-true}
      - MAIL_STARTTLS=${MAIL_STARTTLS:-true}
      - MAIL_STARTTLS_REQUIRED=${MAIL_STARTTLS_REQUIRED:-true}
      - MAIL_SSL_TRUST=${MAIL_SSL_TRUST:-smtp.gmail.com}
      - MAIL_CONNECTION_TIMEOUT=${MAIL_CONNECTION_TIMEOUT:-5000}
      - MAIL_TIMEOUT=${MAIL_TIMEOUT:-5000}
      - MAIL_WRITE_TIMEOUT=${MAIL_WRITE_TIMEOUT:-5000}
      - EMAIL_VERIFICATION_ENABLED=${EMAIL_VERIFICATION_ENABLED:-true}
      - EMAIL_VERIFICATION_FROM=${EMAIL_VERIFICATION_FROM:-artempronko241@gmail.com}
    restart: unless-stopped
    depends_on:
      - auth-postgres
    networks:
      - aniway-network

  # Manga Service
  manga-service:
    build:
      context: ./MangaService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://manga-postgres:5432/mangadb
      - SPRING_DATASOURCE_USERNAME=mangauser
      - SPRING_DATASOURCE_PASSWORD=mangapass123
      - MELON_SERVICE_URL=http://melon-service:8084
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    restart: unless-stopped
    depends_on:
      - manga-postgres
      - chapter-service
      - image-storage-service
    networks:
      - aniway-network

  # Comment Service
  comment-service:
    build:
      context: ./CommentService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://comment-postgres:5432/commentdb
      - SPRING_DATASOURCE_USERNAME=commentuser
      - SPRING_DATASOURCE_PASSWORD=commentpass123
      - JWT_SECRET=${JWT_SECRET:-mySecretKey12345678901234567890123456789012345678901234567890}
      - JWT_EXPIRATION=86400000
      - AUTH_SERVICE_URL=http://auth-service:8085
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-aniway}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-aniway_pass}
    restart: unless-stopped
    depends_on:
      - comment-postgres
      - rabbitmq
    networks:
      - aniway-network

  # Friend Service
  friend-service:
    build:
      context: ./FriendService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - FRIEND_DB_URL=jdbc:postgresql://friend-postgres:5432/frienddb
      - FRIEND_DB_USERNAME=frienduser
      - FRIEND_DB_PASSWORD=friendpass123
      - NOTIFICATION_SERVICE_URL=http://notification-service:8095
    restart: unless-stopped
    depends_on:
      - friend-postgres
      - notification-service
    networks:
      - aniway-network

  # Message Service
  message-service:
    build:
      context: ./MessageService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_URL=jdbc:postgresql://message-postgres:5432/messages
      - DATABASE_USERNAME=aniway
      - DATABASE_PASSWORD=aniway_pass
      - NOTIFICATION_SERVICE_URL=http://notification-service:8095
      - FRIEND_SERVICE_URL=http://friend-service:8102
    restart: unless-stopped
    depends_on:
      - message-postgres
      - friend-service
    networks:
      - aniway-network

  # Chapter Service
  chapter-service:
    build:
      context: ./ChapterService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://chapter-postgres:5432/chapterdb
      - SPRING_DATASOURCE_USERNAME=chapteruser
      - SPRING_DATASOURCE_PASSWORD=chapterpass123
    restart: unless-stopped
    depends_on:
      - chapter-postgres
    networks:
      - aniway-network

  # Image Storage Service
  image-storage-service:
    build:
      context: ./ImageStorageService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://image-postgres:5432/imagedb
      - SPRING_DATASOURCE_USERNAME=imageuser
      - SPRING_DATASOURCE_PASSWORD=imagepass123
    restart: unless-stopped
    depends_on:
      - image-postgres
    networks:
      - aniway-network

  # Forum Service
  forum-service:
    build:
      context: ./ForumService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://forum-postgres:5432/forumdb
      - SPRING_DATASOURCE_USERNAME=forumuser
      - SPRING_DATASOURCE_PASSWORD=forumpass123
      - JWT_SECRET=${JWT_SECRET:-mySecretKey12345678901234567890123456789012345678901234567890}
      - JWT_EXPIRATION=86400000
      - AUTH_SERVICE_URL=http://auth-service:8085
      - MANGA_SERVICE_URL=http://manga-service:8081
    restart: unless-stopped
    depends_on:
      - forum-postgres
      - auth-service
      - manga-service
    networks:
      - aniway-network

  # Melon Service - парсер манги
  melon-service:
    build:
      context: ./MelonService
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      # PROXY ROTATION: Теперь используется 3 прокси через settings.json
      # Ротация управляется через ProxyRotator в api_server.py и main.py
      # Прокси настроены в MelonService/Parsers/mangalib/settings.json (round-robin)
      # HTTP_PROXY/HTTPS_PROXY не нужны - ротация внутри приложения
      # - HTTP_PROXY=http://PS20z2:fFNHVg@168.80.1.136:8000
      # - HTTPS_PROXY=http://PS20z2:fFNHVg@168.80.1.136:8000
      - NO_PROXY=localhost,127.0.0.1,manga-service,chapter-service,auth-service
    ports:
      - "8084:8084"
    volumes:
      - ./MelonService:/app
      - melon_data:/app/Output
      - melon_logs:/app/Logs
      - melon_temp:/app/Temp
    restart: unless-stopped
    networks:
      - aniway-network

  # Databases
  post-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: postdb
      POSTGRES_USER: postuser
      POSTGRES_PASSWORD: postpass123
    volumes:
      - post_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aniway-network

  auth-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass123
    volumes:
      - auth_data:/var/lib/postgresql/data
      - ./AuthService/authDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  manga-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: mangadb
      POSTGRES_USER: mangauser
      POSTGRES_PASSWORD: mangapass123
    volumes:
      - manga_data:/var/lib/postgresql/data
      - ./MangaService/mangaDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  comment-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: commentdb
      POSTGRES_USER: commentuser
      POSTGRES_PASSWORD: commentpass123
    volumes:
      - comment_data:/var/lib/postgresql/data
      - ./CommentService/commentDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  friend-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: frienddb
      POSTGRES_USER: frienduser
      POSTGRES_PASSWORD: friendpass123
    volumes:
      - friend_data:/var/lib/postgresql/data
      - ./FriendService/friendDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  chapter-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: chapterdb
      POSTGRES_USER: chapteruser
      POSTGRES_PASSWORD: chapterpass123
    volumes:
      - chapter_data:/var/lib/postgresql/data
      - ./ChapterService/chapterDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  image-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: imagedb
      POSTGRES_USER: imageuser
      POSTGRES_PASSWORD: imagepass123
    volumes:
      - image_data:/var/lib/postgresql/data
      - ./ImageStorageService/imageStorageDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  forum-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: forumdb
      POSTGRES_USER: forumuser
      POSTGRES_PASSWORD: forumpass123
    volumes:
      - forum_data:/var/lib/postgresql/data
      - ./ForumService/forumDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  # Notification Service
  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-postgres:5432/notificationdb
      - SPRING_DATASOURCE_USERNAME=notificationuser
      - SPRING_DATASOURCE_PASSWORD=notificationpass123
    restart: unless-stopped
    depends_on:
      - notification-postgres
    networks:
      - aniway-network

  notification-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: notificationuser
      POSTGRES_PASSWORD: notificationpass123
    volumes:
      - notification_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aniway-network

  message-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: messages
      POSTGRES_USER: aniway
      POSTGRES_PASSWORD: aniway_pass
    volumes:
      - message_data:/var/lib/postgresql/data
      - ./MessageService/messageDB.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aniway-network

  # Post Service
  post-service:
    build:
      context: ./PostService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://post-postgres:5432/postdb
      - SPRING_DATASOURCE_USERNAME=postuser
      - SPRING_DATASOURCE_PASSWORD=postpass123
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-aniway}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-aniway_pass}
    restart: unless-stopped
    depends_on:
      - post-postgres
      - image-storage-service
      - rabbitmq
    networks:
      - aniway-network

  # Level Service
  level-service:
    build:
      context: ./LevelService
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://level-postgres:5432/leveldb
      - SPRING_DATASOURCE_USERNAME=leveluser
      - SPRING_DATASOURCE_PASSWORD=levelpass123
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-aniway}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-aniway_pass}
    restart: unless-stopped
    depends_on:
      - level-postgres
      - rabbitmq
    networks:
      - aniway-network

  level-postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: leveldb
      POSTGRES_USER: leveluser
      POSTGRES_PASSWORD: levelpass123
    volumes:
      - level_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - aniway-network

  # RabbitMQ broker
  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-aniway}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-aniway_pass}
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    networks:
      - aniway-network

volumes:
  auth_data:
  manga_data:
  comment_data:
  friend_data:
  chapter_data:
  image_data:
  forum_data:
  melon_data:
  melon_logs:
  melon_temp:
  notification_data:
  message_data:
  post_data:
  level_data:

networks:
  aniway-network:
    driver: bridge
