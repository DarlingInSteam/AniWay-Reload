/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_headerModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/headerModule */ "./resources/js/modules/headerModule.js");
/* harmony import */ var _modules_authModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/authModule */ "./resources/js/modules/authModule.js");
/* harmony import */ var _modules_commentModule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/commentModule */ "./resources/js/modules/commentModule.js");
/* harmony import */ var _modules_bookmarkModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/bookmarkModule */ "./resources/js/modules/bookmarkModule.js");
/* harmony import */ var _modules_collectionModule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/collectionModule */ "./resources/js/modules/collectionModule.js");
/* harmony import */ var _modules_productModule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/productModule */ "./resources/js/modules/productModule.js");
/* harmony import */ var _modules_adminPanelModule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/adminPanelModule */ "./resources/js/modules/adminPanelModule.js");
/* harmony import */ var _modules_lastReadModule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/lastReadModule */ "./resources/js/modules/lastReadModule.js");
/* harmony import */ var _modules_otherModule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/otherModule */ "./resources/js/modules/otherModule.js");
/* harmony import */ var _modules_auctionModule__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/auctionModule */ "./resources/js/modules/auctionModule.js");
/* harmony import */ var _modules_messageModule__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/messageModule */ "./resources/js/modules/messageModule.js");
/* harmony import */ var _modules_ratingModule__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/ratingModule */ "./resources/js/modules/ratingModule.js");
/* harmony import */ var _modules_stickerModule__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/stickerModule */ "./resources/js/modules/stickerModule.js");
/* harmony import */ var _modules_notificationModule__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/notificationModule */ "./resources/js/modules/notificationModule.js");
/* harmony import */ var _modules_searchModule__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/searchModule */ "./resources/js/modules/searchModule.js");
/* harmony import */ var _modules_achievementModule__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/achievementModule */ "./resources/js/modules/achievementModule.js");
/* harmony import */ var _modules_statusModule__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modules/statusModule */ "./resources/js/modules/statusModule.js");
/* harmony import */ var _modules_friendModule__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modules/friendModule */ "./resources/js/modules/friendModule.js");
/* harmony import */ var _modules_editDecorModule__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/editDecorModule */ "./resources/js/modules/editDecorModule.js");
/* harmony import */ var _modules_importBookmarkModule__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./modules/importBookmarkModule */ "./resources/js/modules/importBookmarkModule.js");
/* harmony import */ var _modules_giftModule__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./modules/giftModule */ "./resources/js/modules/giftModule.js");
/* harmony import */ var _modules_reviewModule__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./modules/reviewModule */ "./resources/js/modules/reviewModule.js");
/* harmony import */ var _modules_chapterModule__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modules/chapterModule */ "./resources/js/modules/chapterModule.js");
/* harmony import */ var _modules_blackListModule__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./modules/blackListModule */ "./resources/js/modules/blackListModule.js");
/* harmony import */ var _modules_tenorModule__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./modules/tenorModule */ "./resources/js/modules/tenorModule.js");
/* harmony import */ var _modules_proModule__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./modules/proModule */ "./resources/js/modules/proModule.js");
/* harmony import */ var _modules_mineModule__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./modules/mineModule */ "./resources/js/modules/mineModule.js");
/* harmony import */ var _modules_feedModule__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./modules/feedModule */ "./resources/js/modules/feedModule.js");
/* harmony import */ var _modules_cardBattleModule__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./modules/cardBattleModule */ "./resources/js/modules/cardBattleModule.js");
/* harmony import */ var _modules_cardModule__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./modules/cardModule */ "./resources/js/modules/cardModule.js");
/* harmony import */ var _modules_cardUpgradeModule__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./modules/cardUpgradeModule */ "./resources/js/modules/cardUpgradeModule.js");
/* harmony import */ var _modules_clubModule__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./modules/clubModule */ "./resources/js/modules/clubModule.js");
/* harmony import */ var _modules_moderModule__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./modules/moderModule */ "./resources/js/modules/moderModule.js");
/* harmony import */ var _modules_cardFilterModule__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./modules/cardFilterModule */ "./resources/js/modules/cardFilterModule.js");
/* harmony import */ var _modules_achEventModule__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./modules/achEventModule */ "./resources/js/modules/achEventModule.js");
/* harmony import */ var _modules_personalizationModule__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./modules/personalizationModule */ "./resources/js/modules/personalizationModule.js");
/* harmony import */ var _modules_halloweenModule__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./modules/halloweenModule */ "./resources/js/modules/halloweenModule.js");
/* harmony import */ var _modules_momentModule__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./modules/momentModule */ "./resources/js/modules/momentModule.js");
/* harmony import */ var _modules_newYearModule__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./modules/newYearModule */ "./resources/js/modules/newYearModule.js");
/* harmony import */ var _modules_marketModule__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./modules/marketModule */ "./resources/js/modules/marketModule.js");
/* harmony import */ var _modules_quizModule__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./modules/quizModule */ "./resources/js/modules/quizModule.js");
/* harmony import */ var _modules_payModule__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./modules/payModule */ "./resources/js/modules/payModule.js");
/* harmony import */ var _modules_contractModule__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./modules/contractModule */ "./resources/js/modules/contractModule.js");
/* harmony import */ var _modules_cbgModule__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./modules/cbgModule */ "./resources/js/modules/cbgModule.js");
/* harmony import */ var _modules_cbgIndexModule__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./modules/cbgIndexModule */ "./resources/js/modules/cbgIndexModule.js");
/* harmony import */ var _modules_cbgForgeModule__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./modules/cbgForgeModule */ "./resources/js/modules/cbgForgeModule.js");
/* harmony import */ var _modules_cbgDecksModule__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./modules/cbgDecksModule */ "./resources/js/modules/cbgDecksModule.js");
/* harmony import */ var _modules_cardCreateModule__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./modules/cardCreateModule */ "./resources/js/modules/cardCreateModule.js");
















































$(function () {
  $.ajaxSetup({
    headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    },
    error: function error(xhr, status, err) {
      var text = "";
      if (xhr.status === 419) {
        text = "Произошла ошибка, обновите страницу";
      } else if (xhr.status === 429) {
        text = "Ой, попробуйте через пару секунд";
        $('.lootbox__row').removeClass('loot-lock');
      } else if (xhr.responseJSON.errors) {
        $.each(xhr.responseJSON.errors, function (key, value) {
          text = text + value.join('<br>') + "<br>";
        });
      } else if (xhr.responseJSON.message) {
        text = xhr.responseJSON.message;
      }
      toastr.error(text);
      if (text == "Пользователь только что получил карту и ее пока нельзя обменять") {
        $('.trade__send-trade-btn').hide();
      }
    }
  });
  (0,_modules_headerModule__WEBPACK_IMPORTED_MODULE_0__.initializeHeader)();
  (0,_modules_authModule__WEBPACK_IMPORTED_MODULE_1__.initializeAuth)();
  (0,_modules_commentModule__WEBPACK_IMPORTED_MODULE_2__.initializeComment)();
  (0,_modules_bookmarkModule__WEBPACK_IMPORTED_MODULE_3__.initializeBookmark)();
  (0,_modules_collectionModule__WEBPACK_IMPORTED_MODULE_4__.initializeCollection)();
  (0,_modules_productModule__WEBPACK_IMPORTED_MODULE_5__.initializeProduct)();
  (0,_modules_adminPanelModule__WEBPACK_IMPORTED_MODULE_6__.initializeAdminPanel)();
  (0,_modules_lastReadModule__WEBPACK_IMPORTED_MODULE_7__.initializeLastRead)();
  (0,_modules_otherModule__WEBPACK_IMPORTED_MODULE_8__.initializeOther)();
  (0,_modules_messageModule__WEBPACK_IMPORTED_MODULE_10__.initializeMessage)();
  (0,_modules_ratingModule__WEBPACK_IMPORTED_MODULE_11__.initializeRating)();
  (0,_modules_stickerModule__WEBPACK_IMPORTED_MODULE_12__.initializeSticker)();
  (0,_modules_notificationModule__WEBPACK_IMPORTED_MODULE_13__.initializeNotification)();
  (0,_modules_searchModule__WEBPACK_IMPORTED_MODULE_14__.initializeSearch)();
  (0,_modules_achievementModule__WEBPACK_IMPORTED_MODULE_15__.initializeAchievement)();
  (0,_modules_statusModule__WEBPACK_IMPORTED_MODULE_16__.initializeStatus)();
  (0,_modules_friendModule__WEBPACK_IMPORTED_MODULE_17__.initializeFriend)();
  (0,_modules_editDecorModule__WEBPACK_IMPORTED_MODULE_18__.initializeEditDecor)();
  (0,_modules_importBookmarkModule__WEBPACK_IMPORTED_MODULE_19__.initializeImportBookmark)();
  (0,_modules_giftModule__WEBPACK_IMPORTED_MODULE_20__.initializeGift)();
  (0,_modules_reviewModule__WEBPACK_IMPORTED_MODULE_21__.initializeReview)();
  (0,_modules_chapterModule__WEBPACK_IMPORTED_MODULE_22__.initializeChapter)();
  (0,_modules_blackListModule__WEBPACK_IMPORTED_MODULE_23__.initializeBlackList)();
  (0,_modules_tenorModule__WEBPACK_IMPORTED_MODULE_24__.initializeTenor)();
  (0,_modules_auctionModule__WEBPACK_IMPORTED_MODULE_9__.initializeAuction)();
  (0,_modules_proModule__WEBPACK_IMPORTED_MODULE_25__.initializePro)();
  (0,_modules_mineModule__WEBPACK_IMPORTED_MODULE_26__.initializeMine)();
  (0,_modules_feedModule__WEBPACK_IMPORTED_MODULE_27__.initializeFeed)();
  (0,_modules_cardBattleModule__WEBPACK_IMPORTED_MODULE_28__.initializeCardBattle)();
  (0,_modules_cardModule__WEBPACK_IMPORTED_MODULE_29__.initializeCard)();
  (0,_modules_cardUpgradeModule__WEBPACK_IMPORTED_MODULE_30__.initializeCardUpgrade)();
  (0,_modules_clubModule__WEBPACK_IMPORTED_MODULE_31__.initializeClub)();
  (0,_modules_moderModule__WEBPACK_IMPORTED_MODULE_32__.initializeModer)();
  (0,_modules_cardFilterModule__WEBPACK_IMPORTED_MODULE_33__.initializeCardFilter)();
  (0,_modules_achEventModule__WEBPACK_IMPORTED_MODULE_34__.initializeAchEvent)();
  (0,_modules_personalizationModule__WEBPACK_IMPORTED_MODULE_35__.initializePersonalization)();
  (0,_modules_halloweenModule__WEBPACK_IMPORTED_MODULE_36__.initializeHalloween)();
  (0,_modules_momentModule__WEBPACK_IMPORTED_MODULE_37__.initializeMoment)();
  (0,_modules_newYearModule__WEBPACK_IMPORTED_MODULE_38__.initializeNewYear)();
  (0,_modules_marketModule__WEBPACK_IMPORTED_MODULE_39__.initializeMarket)();
  (0,_modules_quizModule__WEBPACK_IMPORTED_MODULE_40__.initializeQuiz)();
  (0,_modules_payModule__WEBPACK_IMPORTED_MODULE_41__.initializePay)();
  (0,_modules_cbgModule__WEBPACK_IMPORTED_MODULE_43__.initializeCbg)();
  (0,_modules_cbgForgeModule__WEBPACK_IMPORTED_MODULE_45__.initializeCbgForge)();
  (0,_modules_cbgDecksModule__WEBPACK_IMPORTED_MODULE_46__.initializeCbgDecks)();
  (0,_modules_contractModule__WEBPACK_IMPORTED_MODULE_42__.initializeContract)();
  (0,_modules_cbgIndexModule__WEBPACK_IMPORTED_MODULE_44__.initializeCbgIndex)();
  (0,_modules_cardCreateModule__WEBPACK_IMPORTED_MODULE_47__.initializeCardCreate)();
});

/***/ }),

/***/ "./resources/js/modules/achEventModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/achEventModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeAchEvent": () => (/* binding */ initializeAchEvent)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeAchEvent() {}

/***/ }),

/***/ "./resources/js/modules/achievementModule.js":
/*!***************************************************!*\
  !*** ./resources/js/modules/achievementModule.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeAchievement": () => (/* binding */ initializeAchievement)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeAchievement() {
  $('.achievements__item').on('click', function () {
    var name = $(this).attr('data-achievement-name');
    var description = $(this).attr('data-achievement-description');
    var id = $(this).attr('data-achievement-id');
    var condition = $(this).attr('data-achievement-condition');
    var total_points = $(this).attr('data-achievement-total-points');
    var cur_points = $(this).attr('data-achievement-points');
    $('.achievement__title').text(name);
    $('.achievement__description').text(description);
    $('.achievement__condition').text(condition);
    $('.achievement__progress-current').text(cur_points);
    $('.achievement__progress-total').text(total_points);
    $('.achievement__bar--fill').css('width', getPercentFromNumber(cur_points, total_points) + '%');
    $('.achievement__image img').attr("src", "/img/achievements/" + id + ".png");
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal("modal-achievement-info");
  });
}
function getPercentFromNumber(number, max_number) {
  if (max_number === 0) return 1;
  var r = Math.round(number / max_number * 100);
  if (r > 100) r = 100;
  if (r < 1) r = 1;
  return r;
}

/***/ }),

/***/ "./resources/js/modules/adminPanelModule.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/adminPanelModule.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeAdminPanel": () => (/* binding */ initializeAdminPanel)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeAdminPanel() {
  $('.admin-panel__show-task-btn').on('click', function () {
    $('.admin-panel__tasks').toggleClass('admin-panel__tasks--show');
    return false;
  });
  $('.admin-panel__tasks-close').on('click', function () {
    $('.admin-panel__tasks').removeClass('admin-panel__tasks--show');
    return false;
  });
  $('.admin-panel__tasks-add-btn').on('click', function () {
    if ($('.admin-panel__tasks input').filter(function () {
      return $(this).val() === '';
    }).length) {
      toastr.error('Заполните все поля');
      return false;
    }
    var button = $(this);
    var data = $(this).closest('form').serialize();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/parser-task/store', data, button, function (result) {
      $('.admin-upload__url').val('');
      $('.admin-upload__chapter').val('');
      toastr.success(result.message);
    });
    return false;
  });
  if (window.isAdmin) {
    setInterval(function () {
      if (document.hidden || window.user_id === 49) return false;
      $.get('/admin/parser-task/getActiveTask', function (result) {
        $('.admin-panel__active-task').text(result.active_task);
        $('.admin-panel__err-task').text(result.err_task);
      });
    }, 4000);
  }
}

/***/ }),

/***/ "./resources/js/modules/auctionModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/auctionModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeAuction": () => (/* binding */ initializeAuction)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");


function initializeAuction() {
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("auction_bid", function (data) {
      $('.auction__bidder').attr('href', '/users/' + data.message.user_id);
      $('.auction__bidder-avatar img').attr('src', data.message.user_avatar);
      $('.auction__bidder-name').text(data.message.user_name);
      $('.auction__bid-count').text(data.message.count);
      toastr.success("Новая лучшая ставка!");
    });
  }
  if (window.location.pathname === '/auctions') {
    var tick = function tick() {
      var now = new Date();
      var diff = finishAt.getTime() - now.getTime();
      if (diff <= 0) {
        $timer.text('завершён');
        return clearInterval(_int);
      }
      var h = Math.floor(diff / 3600000);
      var m = Math.floor(diff % 3600000 / 60000);
      var s = Math.floor(diff % 60000 / 1000);
      var text = [h, m, s].map(function (v) {
        return String(v).padStart(2, '0');
      }).join(':');
      $timer.fadeTo(150, 0.3, function () {
        $(this).text(text).fadeTo(150, 1);
      });
    };
    var $timer = $('#auction-timer');
    var finishAt = new Date($timer.data('finish'));
    tick();
    var _int = setInterval(tick, 1000);
  }
  $('.auction__send-auction-btn').on('click', function () {
    var button = $(this);
    var auction_id = $('.auction').attr('data-id');
    var user_card_ids = $('.card-pool--auction .card-pool__item').map(function () {
      return $(this).attr('data-id');
    }).get();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/auctions/bid', {
      auction_id: auction_id,
      user_card_ids: user_card_ids
    }, button, function (result) {
      toastr.success(result.message);
      $('.card-pool__item').click();
    });
    return false;
  });
  $('.auction__vote-card-item').on('click', function () {
    var button = $(this);
    var auction_id = $('.auction').attr('data-id');
    var card_id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/auctions/vote-card', {
      auction_id: auction_id,
      card_id: card_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.auction__vote-category-item').on('click', function () {
    var button = $(this);
    var auction_id = $('.auction').attr('data-id');
    var rank = button.attr('data-rank');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/auctions/vote-category', {
      auction_id: auction_id,
      rank: rank
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.card-inventory-container--auction .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var elem = $(this);
    if ($('.card-pool__item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    var showcaseItem = $('<div>', {
      'class': 'card-pool__item',
      'data-id': dataId
    });
    var imgElement = $('<img>', {
      'src': imgSrc
    });
    showcaseItem.append(imgElement);
    $('.card-pool__container').append(showcaseItem);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId);
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.card-pool--auction .card-pool__item', function () {
    var dataId = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId, true);
    $(this).remove();
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.auction__fill-cards-btn', function () {
    var priceRank = 'S';
    $('.card-filter-list__card[data-in-trade="0"]').each(function () {
      var card = $(this);
      var rank = card.data('rank');
      var dataId = card.data('id');
      if (rank == priceRank && $('.card-pool__item[data-id="' + dataId + '"]').length === 0) {
        card.trigger('click');
      }
    });
    toastr.success('Карты вложены');
  });
}

/***/ }),

/***/ "./resources/js/modules/authModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/authModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeAuth": () => (/* binding */ initializeAuth)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeAuth() {
  $('.reg-button').on('click', function () {
    var name = $(this).closest('.form').find('input[name="name"]').val();
    var email = $(this).closest('.form').find('input[name="email"]').val();
    var password = $(this).closest('.form').find('input[name="password"]').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/reg', {
      'name': name,
      'email': email,
      'password': password
    }, button, function (result) {
      //window.location.href = '/users/' + result.user_id;
      toastr.success('Подтведите аккаунт на почте!');
      button.remove();
    });
  });
  /* login */
  $('.login-button').on('click', function () {
    var email = $(this).closest('.form').find('input[name="email"]').val();
    var password = $(this).closest('.form').find('input[name="password"]').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/login', {
      'email': email,
      'password': password
    }, button, function (result) {
      window.location.href = '/';
    });
  });

  /* reset */
  $('.reset-send-btn').on('click', function () {
    var identifier = $(this).closest('.form').find('input[type="email"]').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/forgot-password', {
      'identifier': identifier
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/blackListModule.js":
/*!*************************************************!*\
  !*** ./resources/js/modules/blackListModule.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeBlackList": () => (/* binding */ initializeBlackList)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeBlackList() {
  $('.profile__info--ignore-btn').on('click', function () {
    if (!confirm("Дейстительно добавить в черный список?")) return false;
    var button = $(this);
    var user_id = button.attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/users/block', {
      user_id: user_id
    }, button, function (result) {
      if (result.is_added) {
        button.text('Удалить из черного списка');
      } else {
        button.text('Добавить в чёрный список');
      }
    });
  });
  $('.friends-controls__ignore--btn').on('click', function () {
    var button = $(this);
    var user_id = button.attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/users/block', {
      user_id: user_id
    }, button, function (result) {
      button.closest('.friend-controls__item').remove();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/bookmarkModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/bookmarkModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeBookmark": () => (/* binding */ initializeBookmark)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeBookmark() {
  /* bookmarks */
  $('body').on('click', '.manga__bookmark-btn, .reader-menu__item--bookmark', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
  });
  $('body').on('click', '.menu--bookmark .menu__item', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var trigger_button = $(this).closest('.dropdown').find('.dropdown__trigger');
    var menu = $(this).closest('.menu--bookmark');
    var manga_id = menu.attr('data-manga-id');
    var folder_id = $(this).attr('data-folder-id');
    var bookmark_name = $(this).text();
    var button = $(this);
    $.post("/bookmarks", {
      'manga_id': manga_id,
      'folder_id': folder_id
    }, function (result) {
      if (trigger_button.hasClass('reader-menu__item--bookmark')) {
        if (folder_id === 'delete') trigger_button.removeClass('reader-menu__item--active');else trigger_button.addClass('reader-menu__item--active');
      } else trigger_button.text(folder_id === 'delete' ? 'В закладки' : bookmark_name);
      menu.find('.menu__item').removeClass('menu__item--active');
      if (folder_id === 'delete') menu.find('.menu__item[data-folder-id=delete]').addClass('menu__item--hide');else {
        menu.find('.menu__item[data-folder-id=delete]').removeClass('menu__item--hide');
        button.addClass('menu__item--active');
      }
    });
  });
  $('body').on('click', '.modal-bookmark-edit__save-btn', function () {
    var manga_id = $(this).closest('.modal').attr('data-manga-id');
    var folder_id = $('.modal-bookmark-edit__type').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks', {
      manga_id: manga_id,
      folder_id: folder_id
    }, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
  $('.bookmark-group-update').on('click', function () {
    $('.bookmark').toggleClass('mass-edit');
    if ($(this).hasClass('bookmark-group-update--active')) {
      $('.bookmark__edit-checkbox').prop('checked', false).trigger('change');
    }
    $(this).toggleClass('bookmark-group-update--active').text(function (_, text) {
      return text === 'Изменить все' ? 'Отменить' : 'Изменить все';
    });
  });
  $('.bookmark__edit-checkbox').change(function () {
    var manga_list_ids = [];
    $('.bookmark__right input[type="checkbox"]:checked').each(function () {
      var mangaId = $(this).closest('.bookmark__manga').data('manga-id');
      manga_list_ids.push(mangaId);
    });
    var select_manga_count = manga_list_ids.length;
    if (select_manga_count > 0) {
      $('.bookmark-header__status-text span').text(select_manga_count);
      $('.bookmark-header').show();
    } else {
      $('.bookmark-header').hide();
    }
  });
  $('body').on('click', '.bookmark-header__select-all-btn', function () {
    $('.bookmark__edit-checkbox').prop('checked', true).trigger('change');
  });
  $('body').on('click', '.bookmark-header__close-btn', function () {
    $('.bookmark__edit-checkbox').prop('checked', false).trigger('change');
  });
  $('.modal-bookmark-mass-edit__save-btn').on('click', function () {
    var manga_list_ids = [];
    $('.bookmark__right input[type="checkbox"]:checked').each(function () {
      var mangaId = $(this).closest('.bookmark__manga').data('manga-id');
      manga_list_ids.push(mangaId);
    });
    var folder_id = $('.modal-bookmark-mass-edit__type').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks/massUpdate', {
      manga_list_ids: manga_list_ids,
      folder_id: folder_id
    }, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
      $('.bookmark__edit-checkbox').prop('checked', false).trigger('change');
      $('.bookmark').removeClass('mass-edit');
      $('.bookmark-group-update').removeClass('bookmark-group-update--active').text('Множественное редактирование');
    });
  });
  $('body').on('click', '.bookmark-header__delete-btn', function () {
    var manga_list_ids = [];
    $('.bookmark__right input[type="checkbox"]:checked').each(function () {
      var mangaId = $(this).closest('.bookmark__manga').data('manga-id');
      manga_list_ids.push(mangaId);
    });
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks/massUpdate', {
      manga_list_ids: manga_list_ids,
      folder_id: 'delete'
    }, button, function (result) {
      $('.bookmark__edit-checkbox').prop('checked', false).trigger('change');
      $('.bookmark').removeClass('mass-edit');
      $('.bookmark-group-update').removeClass('bookmark-group-update--active').text('Множественное редактирование');
      manga_list_ids.forEach(function (manga_id) {
        return $('.bookmark__manga[data-manga-id="' + manga_id + '"]').remove();
      });
    });
  });
  $('body').on('click', '.mass-edit .bookmark__manga-image', function () {
    return false;
  });
  $('body').on('click', '.modal-bookmark-edit__remove-btn', function () {
    var manga_id = $(this).closest('.modal').attr('data-manga-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks', {
      manga_id: manga_id,
      'folder_id': 'delete'
    }, button, function (result) {
      $('.bookmark__manga[data-manga-id="' + manga_id + '"]').remove();
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
  $('body').on('click', '.modal-bookmark-folder-create__create-btn', function () {
    var name = $('.modal-bookmark-folder-create__name').val();
    var is_public = $('#bookmark_visible').is(':checked') ? 1 : 0;
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/folders/create', {
      name: name,
      is_public: is_public
    }, button, function (result) {
      var div = "<a href=\"/users/" + result.folder.user_id + "/bookmarks?folder_id=" + result.folder.id + "\" class=\"side-menu__item\">\n" + "                            <div class=\"side-menu__name\"><i class=\"icon icon-reading\"></i>" + name + "</div>\n" + "                            <div class=\"side-menu__count\">0</div>\n" + "                        </a>";
      $('.side-menu__item--favourite').before(div);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
  $('body').on('click', '.modal-bookmark-folder-delete', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/folders/' + id + '/delete', {}, button, function (result) {
      $('.side-menu__item[data-folder-id="' + id + '"]').remove();
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
  $('.bookmark__search-input').on('input', function () {
    var input_value = $(this).val();
    if (input_value !== "") {
      $('.bookmark__manga').hide();
      $('.bookmark__manga-name').each(function () {
        if ($(this).text().toLowerCase().includes(input_value.toLowerCase())) {
          $(this).closest('.bookmark__manga').show();
        }
      });
    } else {
      $('.bookmark__manga').show();
    }
  });
  $('.notify-new-chapter').on('click', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    if (button.text() === "Уведомим о выходе!") return false;
    var manga_id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks', {
      'manga_id': manga_id,
      'folder_id': 1
    }, button, function (result) {
      if (result.status) {
        button.text('Уведомим о выходе!');
      }
    });
  });
  function openPanel(editMode) {
    $('#note-panel').show();
    if (editMode) {
      $('#note-edit-wrap').show();
      $('#note-read').hide();
      $('#note-body').focus();
    } else {
      $('#note-edit-wrap').hide();
      $('#note-read').show();
    }
  }
  function closePanel() {
    $('#note-panel').hide();
    if (!$('#note-panel').data('note-id')) {
      $('#note-open-btn').show(); // показываем плавающую кнопку, если заметки нет
    }
  }

  // открыть (создание)
  $(document).on('click', '#note-open-btn', function () {
    $(this).hide();
    openPanel(true);
  });

  // закрыть
  $(document).on('click', '#note-close', function () {
    closePanel();
  });

  // перейти в редактирование
  $(document).on('click', '#note-edit', function () {
    $('#note-body').val($('#note-text').text());
    $('#note-edit-wrap').show();
    $('#note-read').hide();
    $('#note-body').focus();
  });

  // сохранить
  $(document).on('click', '#note-save', function () {
    var btn = $(this);
    var chapterId = $('#note-panel').data('chapter-id');
    var body = ($('#note-body').val() || '').trim();

    // пустой текст — удаляем (единая логика)
    if (body === '') {
      var noteId = $('#note-panel').data('note-id');
      if (!noteId) {
        closePanel();
        return;
      }
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/chapter-notes/' + noteId, {
        _method: 'DELETE'
      }, btn, function () {
        $('#note-panel').removeAttr('data-note-id');
        $('#note-text').text('');
        $('#note-delete').hide();
        closePanel();
      });
      return;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/chapter-notes', {
      chapter_id: chapterId,
      body: body
    }, btn, function (result) {
      // показать режим чтения и обновить состояние
      $('#note-text').text(body);
      $('#note-edit-wrap').hide();
      $('#note-read').show();
      if (result && result.note && result.note.id) {
        $('#note-panel').attr('data-note-id', result.note.id);
      }
      $('#note-delete').show(); // если раньше не было заметки — появится
    });
  });

  // удалить
  $(document).on('click', '#note-delete', function () {
    var btn = $(this);
    var noteId = $('#note-panel').data('note-id');
    if (!noteId) return;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/chapter-notes/' + noteId, {
      _method: 'DELETE'
    }, btn, function () {
      $('#note-panel').removeAttr('data-note-id');
      $('#note-text').text('');
      $('#note-delete').hide();
      closePanel();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/cardBattleModule.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/cardBattleModule.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCardBattle": () => (/* binding */ initializeCardBattle)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");


function initializeCardBattle() {
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    var chatBody = $('.join-room-chat__body');
    if (chatBody.length) {
      chatBody.scrollTop(chatBody[0].scrollHeight);
    }
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on('cardbattle_update', function (data) {
      console.log('Обновление боя:', data.message);
      updateJoinRoomUI(data.message);
    });
    if ($('.join-room').length) {
      var roomName = window.location.pathname;
      setInterval(function () {
        _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('getRoomCount', {
          room: roomName
        });
      }, 5000);
      _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on('room-count', function (data) {
        if (data.count) $('.join-room__icon--views span').text(data.count);
      });
    }
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on('cardbattle_chat', function (data) {
      var log = $('.join-room-chat__body');
      var avatar = escapeHtml(data.message.avatar);
      var userId = data.message.user_id;
      var creatorId = $('.join-room').data('creator-id');
      var opponentId = $('.join-room').data('opponent-id');
      var colorClass = '';
      if (userId === creatorId) {
        colorClass = 'username-creator';
      } else if (userId === opponentId) {
        colorClass = 'username-opponent';
      }
      var safeUser = escapeHtml(data.message.user);
      var safeMessage = escapeHtml(data.message.text);
      var html = "<div class=\"join-room-chat__message\">\n        <div class=\"join-room-chat__user\">\n            <img src=\"".concat(avatar, "\">\n            <a href=\"/users/").concat(userId, "\" class=\"").concat(colorClass, "\">").concat(safeUser, ":</a>\n        </div>\n        <span>").concat(safeMessage, "</span>\n    </div>");
      log.append(html);
      log.scrollTop(log[0].scrollHeight);
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on('cardbattle_lobby_update', function (data) {
      updateLobbyUI(data.message);
    });
  }
  $('.join-room__btn--forfeit').on('click', function (e) {
    var button = $(this);
    var battleId = $('.join-room').attr('data-battle-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/forfeit', {}, button, function (result) {
      toastr.success(result.message);
    });
    return false;
  });
  $('.join-room__btn--cancel').on('click', function (e) {
    var button = $(this);
    var battleId = $('.join-room').attr('data-battle-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/cancelBattle', {}, button, function (result) {
      window.location = '/cardbattle';
    });
    return false;
  });
  $('.cardbattle-create__submit').on('click', function (e) {
    e.preventDefault();
    var form = $('.cardbattle-create__form');
    var selectedRank = form.find('select[name="rank"]').val();
    var cardsCount = form.find('input[name="cards_count"]').val();
    if (!cardsCount) {
      toastr.error('Укажите ставку в картах');
      return false;
    }
    if (cardsCount > 30) {
      toastr.error('Ставка не может быть больше 30');
      return false;
    }
    $('.cardbattle-create__form').hide();
    $('.cardbattle-create-step').show();
    $('.card-pool__stats').attr('data-max', cardsCount);
    $('.card-pool__stats-number-max span').text(cardsCount);
    $('.card-pool__stats').attr('data-rank', selectedRank);
  });
  $('.cardbattle-create-step__create-room-btn').on('click', function (e) {
    var button = $(this);
    var card_ids = $('.card-pool__item').map(function () {
      return $(this).attr('data-id');
    }).get();
    var form = $('.cardbattle-create__form');
    var password = form.find('input[name="password"]').val();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle', {
      card_ids: card_ids,
      password: password
    }, button, function (result) {
      toastr.success(result.message);
      window.location = '/cardbattle/' + result.battle_id;
    });
    return false;
  });
  $('.cardbattle-create-step__join-room-btn').on('click', function (e) {
    var button = $(this);
    var battle_id = $('.cardbattle-create').attr('data-id');
    var card_ids = $('.card-pool__item').map(function () {
      return $(this).attr('data-id');
    }).get();
    var form = $('.cardbattle-create__form');
    var password = form.find('input[name="password"]').val();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battle_id + '/join', {
      card_ids: card_ids,
      password: password
    }, button, function (result) {
      toastr.success(result.message);
      window.location = '/cardbattle/' + result.battle_id;
    });
    return false;
  });
  $('.join-room__bet-btn').on('click', function (e) {
    var button = $(this);
    var battleId = $('.join-room').attr('data-battle-id');
    var betValue = $('.join-room__bet-input').val();
    if (!betValue) {
      toastr.error('Введите сумму ставки');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/bet', {
      bet: betValue
    }, button, function (result) {
      //toastr.success(result.message);
    });
    return false;
  });
  $('.join-room__choices--even, .join-room__choices--odd').on('click', function (e) {
    var button = $(this);
    var battleId = $('.join-room').attr('data-battle-id');
    var guess = $(this).hasClass('join-room__choices--even') ? 'even' : 'odd';
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/guess', {
      guess: guess
    }, button, function (result) {
      //toastr.success(result.message);
    });
    return false;
  });
  $('.join-room-chat__button').on('click', function () {
    var input = $('.join-room-chat__input');
    var message = input.val().trim();
    var battleId = $('.join-room').data('battle-id');
    var button = $(this);
    if (message === '') {
      toastr.error('Введите сообщение');
      return;
    }
    button.prop('disabled', true);
    input.prop('disabled', true);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/chat', {
      message: message
    }, button, function (result) {
      input.val('');
      button.prop('disabled', false);
      input.prop('disabled', false);
      input.focus();
    });
  });
  $('.join-room-chat__input').on('keydown', function (e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      var button = $('.join-room-chat__button');
      if (!button.prop('disabled')) {
        button.click();
      }
    }
  });
  $('body').on('click', '.cardbattle__show-card-btn', function (e) {
    e.preventDefault();
    var button = $(this);
    var battleId = button.attr('data-battle-id');
    if ($('#modal-cardbattle-poster').length === 0) {
      $('body').append("\n            <div class=\"modal modal--fixed-bottom\" id=\"modal-cardbattle-poster\" tabindex=\"-1\">\n                <div class=\"modal__inner\">\n                    <div class=\"modal__content\">\n                        <div class=\"modal__body\">\n                            <div class=\"modal__title\"></div>\n                            <div class=\"modal__close\" data-close-modal=\"\"><i class=\"icon icon-close\"></i></div>\n                            <div class=\"modal-cardbattle-poster\">\n                                <div class=\"modal-cardbattle-poster__result\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ");
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cardbattle/' + battleId + '/posters', {}, button, function (data) {
      var resultContainer = $('.modal-cardbattle-poster__result');
      resultContainer.empty();
      if (data.cards.length === 0) {
        resultContainer.append('<div>Карточки не найдены</div>');
      } else {
        data.cards.forEach(function (card) {
          var cardHtml = "\n                    <div class=\"modal-card-item\" style=\"display:inline-block; margin:0 5px 5px 0;\">\n                        <img src=\"".concat(card.poster, "\" alt=\"Card\" style=\"width:74px; height:102px; object-fit:cover; border-radius:5px;\">\n                    </div>\n                ");
          resultContainer.append(cardHtml);
        });
      }
      $('.modal__title').text('Карты в банке');
      var modal = $('#modal-cardbattle-poster');
      modal.addClass('modal--open');
      $(document).on("mouseup.hideCardbattleModal", function (e) {
        var container = modal.find('.modal__content');
        if (!container.is(e.target) && container.has(e.target).length === 0) {
          modal.removeClass('modal--open');
          $(document).off('.hideCardbattleModal');
        }
      });
    });
    return false;
  });
  function updateJoinRoomUI(data) {
    var userId = $('.join-room').data('user-id');
    var creator = data.creator;
    var opponent = data.opponent || {
      id: 0,
      name: 'Ожидание',
      small_avatar: '/assets/card-placeholder.jpg',
      points: 0
    };
    var isFinished = data.status === 'finished';
    var hasOpponent = data.opponent !== null;

    // Определяем better и guesser
    var betterUser = data.creator_turn ? creator : opponent;
    var guesserUser = data.creator_turn ? opponent : creator;
    var isMyTurnToBet = !data.has_current_bet && userId === betterUser.id;
    var isMyTurnToGuess = data.has_current_bet && userId === guesserUser.id;

    // Показать/скрыть блоки в зависимости от наличия оппонента
    if (hasOpponent) {
      $('.join-room__waiting').hide();
      $('.join-room__header').show();
      $('.join-room__players').show();
    } else {
      $('.join-room__waiting').show();
      $('.join-room__header').hide();
      $('.join-room__players').hide();
    }

    // Очки и цвета
    var creatorPoints = creator.points;
    var opponentPoints = opponent.points;
    var creatorPointsClass = 'join-room__points--green';
    var opponentPointsClass = 'join-room__points--green';
    if (creatorPoints > opponentPoints) {
      creatorPointsClass = 'join-room__points--green';
      opponentPointsClass = 'join-room__points--red';
    } else if (creatorPoints < opponentPoints) {
      creatorPointsClass = 'join-room__points--red';
      opponentPointsClass = 'join-room__points--green';
    }
    $('.join-room__player--1 .join-room__points').removeClass('join-room__points--green join-room__points--red').addClass(creatorPointsClass).text(creatorPoints + ' очков');
    $('.join-room__player--2 .join-room__points').removeClass('join-room__points--green join-room__points--red').addClass(opponentPointsClass).text(opponentPoints + ' очков');

    // Активный игрок
    $('.join-room__player').removeClass('join-room__player--active');
    var activeUserId = !data.has_current_bet ? betterUser.id : guesserUser.id;
    if (activeUserId === creator.id) {
      $('.join-room__player--1').addClass('join-room__player--active');
    } else if (opponent && activeUserId === opponent.id) {
      $('.join-room__player--2').addClass('join-room__player--active');
    }

    // Обновляем количество карт
    var cardCount = data.opponent ? data.card_count * 2 : data.card_count;
    $('.join-room__icon.cardbattle__show-card-btn').html("<i class=\"icon icon-cards\"></i> ".concat(cardCount).concat(data.rank));

    // Раунд
    $('.join-room__title').text('Раунд ' + data.round);

    // Кнопки
    $('.join-room__bet').toggle(!isFinished && isMyTurnToBet);
    $('.join-room__choices').toggle(!isFinished && isMyTurnToGuess);

    // Сообщение ожидания или победителя
    var waitMessage = '';
    if (isFinished) {
      var winner = creator.points > opponent.points ? creator.name : opponent.name;
      waitMessage = '🏆 Победитель: ' + winner;
    } else if (!hasOpponent) {
      waitMessage = 'Ожидаем соперника…';
    } else if (!data.has_current_bet) {
      waitMessage = betterUser.name + ' делает ставку';
    } else {
      waitMessage = guesserUser.name + ' угадывает';
    }
    $('.join-room__wait-btn').text(waitMessage).toggle(!isMyTurnToBet && !isMyTurnToGuess || isFinished);

    // Обновляем аватары и имена
    $('.join-room__player--1 .join-room__avatar').attr('src', creator.small_avatar);
    $('.join-room__player--1 .join-room__name').text(creator.name).attr('href', '/users/' + creator.id);
    $('.join-room__player--2 .join-room__avatar').attr('src', opponent.small_avatar);
    $('.join-room__player--2 .join-room__name').text(opponent.name).attr('href', opponent.id !== 0 ? '/users/' + opponent.id : '#');
    $('.join-room').attr('data-opponent-id', data.opponent ? data.opponent.id : 0);

    // История
    var historyContainer = $('.join-room-history__inner').empty();
    if (data.log.length === 0) {
      historyContainer.append('<div class="join-room-history__empty">Ещё нет истории</div>');
    } else {
      data.log.forEach(function (entry) {
        var text = '';
        if (entry.type === 'bet') {
          text = "".concat(entry.user, " \u0441\u0434\u0435\u043B\u0430\u043B \u0441\u0442\u0430\u0432\u043A\u0443 \u2014 <b>\u0441\u043E\u043F\u0435\u0440\u043D\u0438\u043A \u0434\u043E\u043B\u0436\u0435\u043D \u0443\u0433\u0430\u0434\u0430\u0442\u044C</b>");
        } else if (entry.type === 'guess') {
          var guessRu = entry.guess === 'even' ? 'чёт' : 'нечёт';
          var numberInfo = entry.value !== undefined && entry.value !== null ? " (\u0431\u044B\u043B\u043E ".concat(entry.value, ")") : '';
          text = "".concat(entry.user, " \u0432\u044B\u0431\u0440\u0430\u043B ").concat(guessRu, " \u2192 <b>").concat(entry.success ? 'угадал!' : 'не угадал', "</b>").concat(numberInfo);
        }
        var html = "<div class=\"join-room-history__item\">\n                <div class=\"join-room-history__avatar\"><img src=\"".concat(entry.avatar, "\"></div>\n                <div class=\"join-room-history__text\">").concat(text, "</div>\n            </div>");
        historyContainer.append(html);
      });
    }
    $('.join-room-history').scrollTop($('.join-room-history')[0].scrollHeight);
  }
  function updateLobbyUI(data) {
    var waitingContainer = $('.cardbattle__list').first().empty();
    var activeContainer = $('.cardbattle__list--mini').empty();
    if (data.waiting.length === 0) {
      waitingContainer.append('<div class="cardbattle__empty">Нет ожидающих соперника боёв</div>');
    } else {
      data.waiting.forEach(function (battle) {
        waitingContainer.append("\n                <a href=\"/cardbattle/".concat(battle.id, "\" class=\"cardbattle-room\">\n                    <div class=\"cardbattle-room__background\" style=\"background-image: url('").concat(battle.creator.cover_image, "')\">\n                        <div class=\"cardbattle-room__badge cardbattle__show-card-btn\" data-battle-id=\"").concat(battle.id, "\">\n                            ").concat(battle.card_count).concat(battle.rank, "\n                        </div>\n                        <div class=\"cardbattle-room__content\">\n                            <div class=\"cardbattle-room__players\">\n                                <div class=\"cardbattle-room__player\">\n                                    <img src=\"").concat(battle.creator.big_avatar, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\">\n                                    <div class=\"cardbattle-room__player-rank\">").concat(battle.creator.name, "</div>\n                                </div>\n                                <div class=\"cardbattle-room__vs\">\u2694\uFE0F</div>\n                                <div class=\"cardbattle-room__player\">\n                                    <img src=\"/assets/card-placeholder.jpg\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\">\n                                    <div class=\"cardbattle-room__player-rank\">\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </a>\n            "));
      });
    }
    if (data.active.length === 0) {
      activeContainer.append('<div class="cardbattle__empty">Нет активных боев</div>');
    } else {
      data.active.forEach(function (battle) {
        activeContainer.append("\n                <a href=\"/cardbattle/".concat(battle.id, "\" class=\"cardbattle-room\">\n                    <div class=\"cardbattle-room__background\" style=\"background-image: url('").concat(battle.creator.cover_image, "')\">\n                        <div class=\"cardbattle-room__badge cardbattle__show-card-btn\" data-battle-id=\"").concat(battle.id, "\">\n                            ").concat(battle.card_count).concat(battle.rank, "\n                        </div>\n                        <div class=\"cardbattle-room__content\">\n                            <div class=\"cardbattle-room__players\">\n                                <div class=\"cardbattle-room__player\">\n                                    <img src=\"").concat(battle.creator.big_avatar, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\">\n                                    <div class=\"cardbattle-room__player-rank\">").concat(battle.creator.name, "</div>\n                                </div>\n                                <div class=\"cardbattle-room__vs\">\u2694\uFE0F</div>\n                                <div class=\"cardbattle-room__player\">\n                                    <img src=\"").concat(battle.opponent.big_avatar, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\">\n                                    <div class=\"cardbattle-room__player-rank\">").concat(battle.opponent.name, "</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </a>\n            "));
      });
    }
  }
  function escapeHtml(text) {
    return $('<div>').text(text).html();
  }
}

/***/ }),

/***/ "./resources/js/modules/cardCreateModule.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/cardCreateModule.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCardCreate": () => (/* binding */ initializeCardCreate)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function initializeCardCreate() {
  if (!$('.cards-create--v2').length) return;
  var canvas = $('#canvas')[0];
  var ctx = canvas.getContext('2d');
  var video = document.createElement('video');
  video.muted = true;
  var mediaType = null,
    mediaImage = null,
    frameImage = null;
  var scale = 1,
    offsetX = 0,
    offsetY = 0;
  var dragging = false,
    startX = 0,
    startY = 0;
  var defaultFrameUrl = $('.card-create__rang-item--active').data('src');
  if (defaultFrameUrl) {
    loadFrameFromUrl(defaultFrameUrl);
  }
  var defaultImageUrl = $('.card-create__wrapper').data('image');
  if (defaultImageUrl) {
    mediaType = 'image';
    mediaImage = new Image();
    mediaImage.onload = function () {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.save();
      ctx.translate(offsetX, offsetY);
      ctx.scale(scale, scale);
      ctx.drawImage(mediaImage, 0, 0);
      ctx.restore();
    };
    mediaImage.src = defaultImageUrl;
  }
  window.addEventListener('createCardImageChange', function (e) {
    var url = e.detail.url;
    updateCanvasImage(url);
  });

  // Зум
  var zoomSlider = document.getElementById('zoomSlider');
  $(canvas).on('wheel', function (e) {
    e.preventDefault();
    scale -= e.originalEvent.deltaY * 0.001;
    scale = Math.min(Math.max(0.2, scale), 3);
    zoomSlider.value = scale.toFixed(2); // обновляем ползунок
  });

  $(zoomSlider).on('input', function () {
    scale = parseFloat(this.value);
  });

  // Перетаскивание
  $(canvas).on('mousedown touchstart', function (e) {
    e.preventDefault();
    dragging = true;
    var clientX = e.type === 'touchstart' ? e.originalEvent.touches[0].clientX : e.offsetX;
    var clientY = e.type === 'touchstart' ? e.originalEvent.touches[0].clientY : e.offsetY;
    var rect = canvas.getBoundingClientRect();
    startX = clientX - rect.left;
    startY = clientY - rect.top;
  }).on('mouseup touchend mouseleave', function () {
    return dragging = false;
  }).on('mousemove touchmove', function (e) {
    if (!dragging) return;
    e.preventDefault();
    var clientX = e.type === 'touchmove' ? e.originalEvent.touches[0].clientX : e.offsetX;
    var clientY = e.type === 'touchmove' ? e.originalEvent.touches[0].clientY : e.offsetY;
    var rect = canvas.getBoundingClientRect();
    var offsetXNew = clientX - rect.left;
    var offsetYNew = clientY - rect.top;
    offsetX += offsetXNew - startX;
    offsetY += offsetYNew - startY;
    startX = offsetXNew;
    startY = offsetYNew;
  });

  // Загрузка медиа
  $('#mediaInput').on('change', function (e) {
    var file = e.target.files[0];
    if (!file) return;
    var url = URL.createObjectURL(file);
    if (file.type.startsWith('video/')) {
      mediaType = 'video';
      mediaImage = null;
      video.src = url;
      video.loop = true;
      video.play();
      if (!window.location.search.includes('step=') && !window.location.search.includes('replace_id=')) {
        $('.card-create__input[data-type="static_card_id"]').show();
      }
    } else {
      mediaType = 'image';
      mediaImage = new Image();
      mediaImage.onload = function () {
        video.src = '';
        video.pause();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(offsetX, offsetY);
        ctx.scale(scale, scale);
        ctx.drawImage(mediaImage, 0, 0);
        ctx.restore();
        if (frameImage) ctx.drawImage(frameImage, 0, 0, canvas.width, canvas.height);
      };
      mediaImage.src = url;
    }
  });

  // Рендер
  (function render() {
    requestAnimationFrame(render);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if (mediaType === 'video' && video.readyState >= 2) {
      ctx.save();
      ctx.translate(offsetX, offsetY);
      ctx.scale(scale, scale);
      ctx.drawImage(video, 0, 0);
      ctx.restore();
    }
    if (mediaType === 'image' && mediaImage) {
      ctx.save();
      ctx.translate(offsetX, offsetY);
      ctx.scale(scale, scale);
      ctx.drawImage(mediaImage, 0, 0);
      ctx.restore();
    }
    if (frameImage) ctx.drawImage(frameImage, 0, 0, canvas.width, canvas.height);
  })();

  // Сохранение результата
  $('#processBtn').on('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _mediaImage, _mediaImage2;
    var $btn, _ref2, mediaFile, card_name, manga_name, $input, static_card_id, _static_card_id, formData, response, blob, fileFromBlob;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            $btn = $(this);
            if (!$btn.prop('disabled')) {
              _context.next = 3;
              break;
            }
            return _context.abrupt("return");
          case 3:
            _ref2 = [$('#mediaInput')[0].files[0]], mediaFile = _ref2[0];
            card_name = $('.card-create__name').text();
            manga_name = $('.card-create__title').text();
            $input = $('.card-create__static-id-input');
            static_card_id = $input.val();
            if (!$input.is(':visible')) {
              _context.next = 13;
              break;
            }
            _static_card_id = $input.val().trim();
            if (!(_static_card_id === '' || !/^\d+$/.test(_static_card_id))) {
              _context.next = 13;
              break;
            }
            toastr.error('Введите ID статичной карты');
            return _context.abrupt("return", false);
          case 13:
            if (!(card_name == "Имя" || card_name == "")) {
              _context.next = 16;
              break;
            }
            toastr.error("Укажите имя");
            return _context.abrupt("return", false);
          case 16:
            if (/^[А-ЯA-ZЁ]/.test(card_name)) {
              _context.next = 19;
              break;
            }
            toastr.error("Имя должно быть с большой буквы");
            return _context.abrupt("return", false);
          case 19:
            $btn.prop('disabled', true).addClass('disabled');
            formData = new FormData();
            if (!mediaFile) {
              _context.next = 25;
              break;
            }
            formData.append('video', mediaFile);
            _context.next = 41;
            break;
          case 25:
            _context.prev = 25;
            _context.next = 28;
            return fetch(mediaImage.src);
          case 28:
            response = _context.sent;
            _context.next = 31;
            return response.blob();
          case 31:
            blob = _context.sent;
            fileFromBlob = new File([blob], 'default-image.png', {
              type: blob.type
            });
            formData.append('video', fileFromBlob);
            _context.next = 41;
            break;
          case 36:
            _context.prev = 36;
            _context.t0 = _context["catch"](25);
            toastr.error("Не удалось загрузить изображение");
            $btn.prop('disabled', false).removeClass('disabled');
            return _context.abrupt("return");
          case 41:
            formData.append('name', card_name);
            formData.append('title', manga_name);
            formData.append('rank', $('.card-create__rang-item--active').attr('data-rank'));
            formData.append('frame', $('.card-create__rang-item--active').attr('data-frame'));
            formData.append('chapter_id', $('.card-create').attr('data-chapter-id'));
            formData.append('replace_id', $('.card-create').attr('data-replace-id'));
            formData.append('is_step', $('.card-create').attr('data-replace-step'));
            formData.append('text_for_moderator', $('.card-create__text').val());
            formData.append('scale', scale);
            formData.append('offsetX', offsetX);
            formData.append('static_card_id', static_card_id);
            formData.append('offsetY', offsetY);
            formData.append('videoWidth', video.videoWidth || ((_mediaImage = mediaImage) === null || _mediaImage === void 0 ? void 0 : _mediaImage.width) || 0);
            formData.append('videoHeight', video.videoHeight || ((_mediaImage2 = mediaImage) === null || _mediaImage2 === void 0 ? void 0 : _mediaImage2.height) || 0);
            formData.append('canvasWidth', canvas.width);
            formData.append('canvasHeight', canvas.height);
            if ($btn) $btn.attr('disabled', true).addClass('button--loading');
            $.ajax({
              url: window.location.pathname,
              type: 'POST',
              data: formData,
              processData: false,
              contentType: false,
              success: function success(result) {
                toastr.success("Карточка отправлена!");
                _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
              },
              error: function error() {
                toastr.error("Произошла ошибка при отправке карточки");
              },
              complete: function complete() {
                if ($btn) $btn.attr('disabled', false).removeClass('button--loading');
              }
            });
          case 59:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[25, 36]]);
  })));
  $('.card-create__rang-item').on('click', function () {
    $('.card-create__rang-item').removeClass('card-create__rang-item--active');
    $(this).addClass('card-create__rang-item--active');
    var newUrl = $(this).data('src');
    if (newUrl) {
      loadFrameFromUrl(newUrl);
    }
  });
  function loadFrameFromUrl(url) {
    var img = new Image();
    img.onload = function () {
      return frameImage = img;
    };
    img.src = url;
  }
  function updateCanvasImage(url) {
    mediaType = 'image';
    mediaImage = new Image();
    mediaImage.onload = function () {
      video.src = '';
      video.pause();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.save();
      ctx.translate(offsetX, offsetY);
      ctx.scale(scale, scale);
      ctx.drawImage(mediaImage, 0, 0);
      ctx.restore();
      if (frameImage) ctx.drawImage(frameImage, 0, 0, canvas.width, canvas.height);
    };
    mediaImage.src = url;
  }
}

/***/ }),

/***/ "./resources/js/modules/cardFilterModule.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/cardFilterModule.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCardFilter": () => (/* binding */ initializeCardFilter)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function initializeCardFilter() {
  $('body').on('click', '.card-inventory-container--default .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var rank = $(this).data('rank');
    var maxCount = parseInt($('.card-pool__stats').attr('data-max'));
    var onlyRank = $('.card-pool__stats').attr('data-rank');
    var elem = $(this);
    var currentCount = $('.card-pool__item').length;
    if ($('.card-pool__item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    if (currentCount >= maxCount) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      toastr.error('Лимит карт, вы не можете вложить больше');
      return false;
    }
    if (onlyRank && onlyRank !== rank) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      toastr.error('Этот ранг нельзя использовать');
      return false;
    }
    var showcaseItem = $('<div>', {
      'class': 'card-pool__item',
      'data-id': dataId,
      'data-rank': rank
    });
    var imgElement = $('<img>', {
      'src': imgSrc
    });
    showcaseItem.append(imgElement);
    $('.card-pool__container').append(showcaseItem);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId);
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.card-filter-form__decks-btn', function () {
    $('.card-filter-form__decks').toggle();
    $(this).toggleClass('card-filter-form__btn--active');
  });
  $('body').on('click', '.card-pool--default .card-pool__item', function () {
    var dataId = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId, true);
    $(this).remove();
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('.card-filter-form').each(function () {
    var $form = $(this);
    var url = $form.data('url');
    var perPage = $form.data('per-page');
    $form.on('reloadCards', function () {
      loadCards();
    });
    var filters = {
      search: $form.data('search') || '',
      rank: $form.data('rank') || '',
      deck_id: $form.data('deck-id') || '',
      is_enchant: $form.data('is_enchant') || '',
      is_battle: $form.data('is-battle') || '',
      is_anim: $form.data('is_anim') || '',
      is_part_anim: $form.data('is_part_anim') || '',
      want: $form.data('want') || '',
      no_want: $form.data('no_want') || '',
      is_locked: $form.data('is-locked') == '0' ? 0 : $form.data('is-locked') || ''
    };
    if (filters.is_locked == 0) {
      $('.card-filter-form__lock[data-locked="0"]').addClass('card-filter-form__btn--active');
    } else if (filters.is_locked == 1) {
      $('.card-filter-form__lock[data-locked="1"]').addClass('card-filter-form__btn--active');
    }
    var lastRequestTime = 0;
    function loadDecks() {
      $.ajax({
        url: '/cards-filter/deck',
        method: 'POST',
        success: function success(data) {
          var html = '';
          data.forEach(function (deck) {
            html += "<div class=\"card-filter-form__decks-item\" data-id=\"".concat(deck.id, "\">").concat(deck.name, "</div>");
          });
          if (html === "") html = "Список колод пуст";
          $('.card-filter-form__decks').html(html);
        },
        error: function error() {
          console.log('err load decks');
        }
      });
    }
    function loadCards() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var $clickedButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var currentTime = new Date().getTime();
      if (currentTime - lastRequestTime < 500) {
        return;
      }
      lastRequestTime = currentTime;
      var $cardListItems = $form.closest('.card-inventory-container').find('.card-filter-list');
      $cardListItems.addClass('card-filter-list--loading');
      $.ajax({
        url: url,
        method: 'post',
        data: _objectSpread(_objectSpread({}, filters), {}, {
          page: page,
          per_page: perPage,
          manga_id: $form.attr('data-manga-id')
        }),
        success: function success(data) {
          renderCards(data.data);
          renderPagination(data);
          if ($clickedButton && !$clickedButton.hasClass('card-filter-form__decks-item')) {
            if ($clickedButton.hasClass('card-filter-form__lock') || $clickedButton.hasClass('card-filter-form__enchant') || $clickedButton.hasClass('card-filter-form__battle') || $clickedButton.hasClass('card-filter-form__cnt-btn')) {
              if ($clickedButton.hasClass('card-filter-form__btn--active')) {
                $clickedButton.removeClass('card-filter-form__btn--active');
              } else {
                if (!$clickedButton.hasClass('card-filter-form__cnt-btn')) $clickedButton.siblings().removeClass('card-filter-form__btn--active');
                $clickedButton.addClass('card-filter-form__btn--active');
              }
            } else {
              $clickedButton.siblings().removeClass('card-filter-form__btn--active');
              $clickedButton.addClass('card-filter-form__btn--active');
            }
          }
        },
        complete: function complete() {
          $cardListItems.removeClass('card-filter-list--loading');
        }
      });
    }
    function hasCardId(cardId) {
      return ($('.card-filter-list').attr('data-cards-ids') || '').split(' ').includes(cardId.toString());
    }
    function renderCards(cards) {
      var html = '';
      cards.forEach(function (card) {
        var existsClass = hasCardId(card.id) ? ' card-filter-list__card--exists' : '';
        var partAnimClass = card.next_rank_card_id ? ' card-filter-list__card--available-animation' : '';
        var imageSrc = card.level >= 3 && card.image_step_1 ? card.image_step_1 : card.image;
        var lockDiv = card.is_lock ? "<div class='card-filter-list__card--lock'><i class=\"icon icon-lock\"></i></div>" : "";
        var videoSrc = card.level >= 3 && card.video_step_1 ? card.video_step_1 : card.video;
        //videoSrc = undefined;

        var videoBlock = "<video poster=\"/assets/card-placeholder.jpg\" pip=\"false\" webkit-playsinline=\"\" playsinline=\"\" autoplay=\"\" muted=\"\" loop=\"\" data-src=\"/img/cards-video/".concat(videoSrc, "\">\n                    <source src=\"/img/cards-video/").concat(videoSrc, "\" type=\"video/mp4\">\n                    Your browser does not support the video tag.\n                </video>");
        var imageBlock = "<img src=\"/img/cards/".concat(imageSrc, "\">");
        if (videoSrc) imageBlock = "";else videoBlock = "";
        var is_need = false;
        var is_has = false;
        if (typeof cardsData !== 'undefined') {
          var form = $form.closest('.card-inventory-container--trade-creator, .card-inventory-container--trade-receiver');
          var card_id = parseInt(card.card_id);
          if (form.hasClass('card-inventory-container--trade-creator') && Array.isArray(cardsData.need_card)) {
            is_need = cardsData.need_card.includes(card_id);
          }
          if (form.hasClass('card-inventory-container--trade-receiver') && Array.isArray(cardsData.not_need_card)) {
            is_need = cardsData.not_need_card.includes(card_id);
          }
          if (form.hasClass('card-inventory-container--trade-receiver')) {
            is_has = cardsData.creator_all_ids.includes(card_id) ? 1 : 0;
          }
        }
        var needDiv = is_need ? "<div class='card-filter-list__card--need'><i class=\"icon icon-trade-need\"></i></div>" : "";
        var aframeRanks = ['E', 'C', 'D', 'B', 'G', 'A', 'S', 'X'];
        var animFrame = "";
        if (Number(card.level) >= 6 && (card.image_step_1 || card.video_step_1) && aframeRanks.includes(card.rank)) {
          var frameFile = card.rank.toLowerCase();
          if (card.rank === 'S' && card.frame_name) {
            var name = card.frame_name;
            name = name.toLowerCase().replace(/[^a-z0-9_-]/g, '');
            if (name) frameFile = name;
          }
          animFrame = "<img src=\"/assets/cards/aframe/".concat(frameFile, ".apng\" class=\"card-anim-frame\">");
        }
        html += "\n            <div class=\"card-filter-list__card".concat(existsClass).concat(partAnimClass, "\"\n                 data-id=\"").concat(card.id, "\"\n                 data-rank=\"").concat(card.rank, "\"\n                 data-in-trade=\"").concat(card.in_trade, "\"\n                 data-card-id=\"").concat(card.card_id, "\"\n                 data-is-lock=\"").concat(card.is_lock, "\"\n                 data-is-not-tradable=\"").concat(card.is_not_tradable, "\"\n                 data-exp=\"").concat(card.exp, "\"\n                 data-has=\"").concat(is_has, "\"\n                 data-level=\"").concat(card.level, "\">\n                ").concat(imageBlock, "\n                ").concat(videoBlock, "\n                ").concat(animFrame, "\n                ").concat(needDiv, "\n                ").concat(lockDiv, "\n                ").concat(card.exp > 0 ? "\n                  <div class=\"card-filter-list__parent\">\n                      <div class=\"card-filter-list__exp\">\n                        <div class=\"card-filter-list__exp--fill\" style=\"width: ".concat(card.exp, "%\"></div>\n                      </div>\n                  </div>\n                ") : '', "\n            </div>");
      });
      if (!html) {
        html = "<div class='secondary-text'>Карт нет</div>";
      }
      $form.closest('.card-inventory-container').find('.card-filter-list__items').html(html);
    }
    function renderPagination(data) {
      var pagination = $form.closest('.card-inventory-container').find('.card-filter-list__pagination');
      pagination.empty();
      if (data.last_page <= 1) return;
      pagination.append("<div class=\"card-filter-list__pagination-item ".concat(data.current_page === 1 ? 'card-filter-list__pagination-item--disabled' : '', "\">\n                <button class=\"button\" data-page=\"").concat(data.current_page - 1, "\" ").concat(data.current_page === 1 ? 'tabindex="-1" aria-disabled="true"' : '', ">\u041D\u0430\u0437\u0430\u0434</button\n            </div>"));
      pagination.append("<div class=\"card-filter-list__pagination-item card-filter-list__pagination-item--active\">\n                <span>".concat(data.current_page, " / ").concat(data.last_page, "</span>\n            </div>"));
      pagination.append("<div class=\"card-filter-list__pagination-item ".concat(data.current_page === data.last_page ? 'card-filter-list__pagination-item--disabled' : '', "\">\n                <button class=\"button\" data-page=\"").concat(data.current_page + 1, "\" ").concat(data.current_page === data.last_page ? 'tabindex="-1" aria-disabled="true"' : '', ">\u0412\u043F\u0435\u0440\u0435\u0434</button>\n            </div>"));
    }
    $form.find('.card-filter-form__search-btn').on('click', function () {
      filters.search = $form.find('.card-filter-form__search').val();
      loadCards(1);
    });
    $form.find('.card-filter-form__rank').on('click', function () {
      filters.rank = $(this).data('rank');
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__search').on('keydown', function (e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        filters.search = $(this).val();
        loadCards(1);
      }
    });
    $form.find('.card-filter-form__lock').on('click', function () {
      var isLocked = $(this).data('locked');
      if ($(this).hasClass('card-filter-form__btn--active')) {
        filters.is_locked = '';
      } else {
        filters.is_locked = isLocked;
      }
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__enchant').on('click', function () {
      filters.is_enchant = filters.is_enchant ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__battle').on('click', function () {
      filters.is_battle = filters.is_battle ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__animation').on('click', function () {
      filters.is_anim = filters.is_anim ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__a-plus').on('click', function () {
      filters.is_part_anim = filters.is_part_anim ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__want').on('click', function () {
      if ($('.card-filter-form__no-want').hasClass('card-filter-form__btn--active')) return false;
      filters.want = filters.want ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__no-want').on('click', function () {
      if ($('.card-filter-form__want').hasClass('card-filter-form__btn--active')) return false;
      filters.no_want = filters.no_want ? null : 1;
      loadCards(1, $(this));
    });
    $form.find('.card-filter-form__decks').on('click', '.card-filter-form__decks-item', function () {
      var clickedDeckId = $(this).attr('data-id');

      // Если нажали на уже выбранную — сбрасываем
      if (filters.deck_id == clickedDeckId) {
        filters.deck_id = null;
        $(this).removeClass('card-filter-form__btn--active');
      } else {
        filters.deck_id = clickedDeckId;

        // Снимаем класс со всех и вешаем на текущую
        $form.find('.card-filter-form__decks-item').removeClass('card-filter-form__btn--active');
        $(this).addClass('card-filter-form__btn--active');
      }
      loadCards(1, $(this));
    });
    $form.closest('.card-inventory-container').on('click', '.card-filter-list__pagination button', function (e) {
      e.preventDefault();
      var page = $(this).data('page');
      if (!$(this).parent().hasClass('card-filter-list__pagination-item--disabled')) {
        loadCards(page);
      }
    });
    loadCards();
    loadDecks();
  });
}

/***/ }),

/***/ "./resources/js/modules/cardModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/cardModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCard": () => (/* binding */ initializeCard)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager */ "./resources/js/modules/socketManager.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


function initializeCard() {
  var currentIndexPageCard = window.currentIndexPageCard;
  $('.lock-card-mode-btn').on('click', function () {
    $('.lock-card-btn').toggle();
    $('.card-controls--lock-block').toggle();
    $('.manga-cards__mass-controls').toggle().each(function () {
      if ($(this).is(':visible')) {
        $(this).css('display', 'flex');
      }
    });
  });
  if (typeof _socketManager__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager__WEBPACK_IMPORTED_MODULE_1__["default"].on("newLevel", function (data) {
      var _data$message$split = data.message.split(';'),
        _data$message$split2 = _slicedToArray(_data$message$split, 3),
        avatar = _data$message$split2[0],
        level = _data$message$split2[1],
        points = _data$message$split2[2];
      showUpgradeNotification(avatar, parseInt(level), parseInt(points));
    });
  }
  $('body').on('click', '.card-level-up__scroll-btn', function () {
    var button = $(this);
    button.toggleClass('card-level-up__scroll-btn--enable');
  });
  $('body').on('click', '.card-inventory-container--level .card-filter-list__card', function () {
    var button = $(this);
    var img = button.find('img').attr('src');
    var rank = $(this).attr('data-rank');
    $('.card-level').attr('data-rank', rank);
    var scrollItem = $('.card-level-scrolls__item[data-rank="' + rank + '"]');
    var count = parseInt(scrollItem.attr('data-count'), 10);
    var blessedCount = parseInt(scrollItem.attr('data-blessed-count'), 10);
    var hasScrolls = count + blessedCount > 0;
    var controls = $('.card-level-up__controls');
    if (hasScrolls) {
      controls.addClass('card-level-up__controls--scroll-enable');
    } else {
      controls.removeClass('card-level-up__controls--scroll-enable');
    }
    $('.card-level-up__item img').attr('src', img);
    var $info = $('.card-level-up__info');
    var price = 100;
    if (button.attr('data-level') == 0) price = 50;else if (button.attr('data-level') == 1) price = 75;
    $info.fadeOut(300, function () {
      $info.html('Шанс на повышение уровня карты за ' + price + ' алмазов').fadeIn(300);
    });
    $('.card-level-up').attr('data-id', button.attr('data-id'));
    $('.card-level-up').attr('data-exp', button.attr('data-exp'));
    $('.card-level-up').attr('data-level', button.attr('data-level'));
    $('.card-level-up__item-footer').css('display', 'flex');
    $('.card-level-up__item-level').text(parseInt(button.attr('data-level')) + 1);
    $('.card-level-up__item-exp-text').text(button.attr('data-exp') + '%');
    $('.card-level-up__item-exp-fill').css({
      'transition': 'width 0.5s ease-in-out'
    }).width(button.attr('data-exp') + '%');
  });
  $('.card-level-up__i').on('click', function () {
    $('.card-level__header').toggle();
  });
  $('body').on('click', '.tabs__item--questions', function () {
    var link = $(this);
    var questionMarks = ['?', '?', '?'];
    var positions = [{
      top: '-50px',
      left: '-50px'
    },
    // Влево вверх
    {
      top: '-50px',
      left: '0'
    },
    // Прямо вверх
    {
      top: '-50px',
      left: '50px'
    } // Вправо вверх
    ];

    var linkOffset = link.offset();
    var linkWidth = link.outerWidth();
    var linkHeight = link.outerHeight();
    var centerX = linkOffset.left + linkWidth / 2;
    var centerY = linkOffset.top + linkHeight / 2;
    questionMarks.forEach(function (mark, index) {
      var $mark = $('<div class="question-mark">').text(mark);
      $('body').append($mark);
      $mark.css({
        position: 'absolute',
        top: centerY,
        left: centerX,
        fontSize: '24px',
        color: '#000',
        opacity: 1,
        transform: 'translate(-50%, -50%)'
      });
      $mark.animate({
        top: "+=".concat(positions[index].top),
        left: "+=".concat(positions[index].left),
        opacity: 0
      }, 1000, function () {
        $mark.remove();
      });
    });
    return false;
  });
  $('.card-show__up-enable').on('click', function () {
    var $button = $(this);
    var newSrc = $button.data('image');
    var $image = $('.card-show__image');
    var isVideo = newSrc.includes('cards-video');
    if (isVideo) {
      var $videos = $('.card-show__header video, .card-show__wrapper video');
      $videos.each(function () {
        var $video = $(this);
        var $sources = $video.find('source');
        $sources.each(function () {
          var $source = $(this);
          if (!$source.data('original-src')) {
            $source.data('original-src', $source.attr('src'));
          }
          var originalSrc = $source.data('original-src');
          var currentSrc = $source.attr('src');
          var isOriginal = currentSrc === originalSrc;
          $source.attr('src', isOriginal ? newSrc : originalSrc);
        });
        this.load();
      });
      return;
    }
    if (!$image.data('original-src')) {
      $image.data('original-src', $image.attr('src'));
    }
    var originalSrc = $image.data('original-src');
    var currentSrc = $image.attr('src');
    var isOriginal = currentSrc === originalSrc;
    $image.css({
      transition: 'transform 0.4s',
      transform: 'rotateY(90deg)'
    });
    setTimeout(function () {
      $image.attr('src', isOriginal ? newSrc : originalSrc);
      $image.css('transform', 'rotateY(0deg)');
    }, 200);
  });
  $('body').on('click', '.card-level-up__start-btn', function () {
    var button = $(this);
    if (button.text() == "...") return false;
    var rank = $('.card-level').attr('data-rank');
    var card_user_id = $('.card-level-up').attr('data-id');
    var card_two_user_id = null;
    if (!card_user_id) {
      toastr.error('Для начала выберите карту');
      return false;
    }
    button.text('...');
    var $fill = $('.card-level-up__bar--fill');
    var scrollBtn = $('.card-level-up__scroll-btn');
    var isScrollEnabled = false;
    if (scrollBtn.length > 0 && scrollBtn.is(':visible')) {
      isScrollEnabled = scrollBtn.hasClass('card-level-up__scroll-btn--enable');
    }
    $fill.css('width', '0%').animate({
      width: '100%'
    }, 1200, function () {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/upLevel', {
        card_user_id: card_user_id,
        card_two_user_id: card_two_user_id,
        isScrollEnabled: isScrollEnabled
      }, button, function (result) {
        if (isScrollEnabled) decreaseScrollCount(rank, false);
        var scrollItem = $('.card-level-scrolls__item[data-rank="' + rank + '"]');
        var count = parseInt(scrollItem.attr('data-count'), 10);
        var blessedCount = parseInt(scrollItem.attr('data-blessed-count'), 10);
        var hasScrolls = count + blessedCount > 0;
        var controls = $('.card-level-up__controls');
        if (hasScrolls) {
          controls.addClass('card-level-up__controls--scroll-enable');
        } else {
          controls.removeClass('card-level-up__controls--scroll-enable');
        }
        var successMessages = ['🎯 Точное попадание! +35% опыта!', '🌟 Карта сияет ярче! +35% опыта!', '🚀 Успех за гранью реальности! +35% опыта!', '🔥 Пламя удачи разгорелось! +35% опыта!', '🕹️ Идеальный ход! +35% опыта!', '🏅 Карта стала сильнее! +35% опыта!', '🍀 Фортуна на твоей стороне! +35% опыта!'];
        var failureMessages = ['💔 Упс... не повезло', '🌫️ Удача скользнула мимо...', '😅 Слишком близко... но нет', '🔄 Не в этот раз...', '🧨 Что-то пошло не так...', '📉 Падение на шаг назад...', '🚧 Препятствие на пути...'];
        if (result.success) {
          var randomSuccess = successMessages[Math.floor(Math.random() * successMessages.length)];
          toastr.success(randomSuccess);
        } else {
          var randomFailure = failureMessages[Math.floor(Math.random() * failureMessages.length)];
          toastr.error(randomFailure);
        }
        $fill.css('width', '0%');
        button.text('Начать повышение');
        $('.card-level-up__item-level').text(parseInt(result.card.level) + 1);
        $('.card-level-up__item-exp-text').text(result.card.exp + '%');
        $('.card-level-up__item-exp-fill').css({
          'transition': 'width 0.5s ease-in-out'
        }).width(result.card.exp + '%');
      });
    });
    return false;
  });
  $('body').on('click', '.card-manga-list__add-btn', function () {
    var button = $(this);
    var manga_id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/offers/want-all-manga', {
      manga_id: manga_id
    }, button, function (result) {
      toastr.success(result.message);
      button.remove();
    });
    return false;
  });
  $('body').on('click', '.moder-delete-card-btn', function () {
    if (!confirm("Вы уверены?")) return false;
    var button = $(this);
    var card_id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/moderate/' + card_id + '/delete', {
      card_id: card_id
    }, button, function (result) {
      toastr.success(result.message);
      button.remove();
    });
    return false;
  });
  $('body').on('click', '.moder-step-clear-card-btn', function () {
    if (!confirm("Вы уверены?")) return false;
    var button = $(this);
    var card_id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/moderate/' + card_id + '/stepDel', {
      card_id: card_id
    }, button, function (result) {
      toastr.success(result.message);
      button.remove();
    });
    return false;
  });
  $('body').on('click', '.lock-card-modal-btn', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/lockCard/' + id, {}, button, function (result) {
      button.text("Карта заблокирована для обмена");
      button.removeClass('lock-card-modal-btn');
    });
    return false;
  });
  $('body').on('click', '.lock-card-btn', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/lockCard/' + id, {}, button, function (result) {
      //toastr.success(result.message);
      button.find('i').attr('class', result.is_lock ? 'icon icon-lock' : 'icon icon-unlock');
    });
    return false;
  });
  var rankOrder = ['X', 'S', 'A', 'P', 'G', 'B', 'C', 'D', 'E', 'H', 'N'];
  function sortCards(sortType) {
    var $cards = $('.manga-cards__item-wrapper');
    var sortedCards = $cards.sort(function (a, b) {
      switch (sortType) {
        case 'desc':
          return rankOrder.indexOf($(a).data('rank')) - rankOrder.indexOf($(b).data('rank'));
        case 'asc':
          return rankOrder.indexOf($(b).data('rank')) - rankOrder.indexOf($(a).data('rank'));
        case 'new':
          return new Date($(b).data('created')) - new Date($(a).data('created'));
        case 'miss':
          return $(a).hasClass('manga-cards__item-wrapper--exists') - $(b).hasClass('manga-cards__item-wrapper--exists');
      }
    });
    $('.manga-cards').html(sortedCards);
  }
  $('body').on('click', '.cards-sort__item', function () {
    sortCards($(this).data('value'));
    $('.cards-sort__item--active').removeClass('cards-sort__item--active');
    $(this).addClass('cards-sort__item--active');
  });
  $('.card-show__load').on('click', function () {
    var button = $(this);
    var card_id = button.attr('data-id');
    var offset = $('.card-show__owner').length;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/' + card_id + '/usersLoad', {
      offset: offset
    }, button, function (result) {
      $('.card-show__owners').append(result.content);
      var newItems = $(result.content).filter('.card-show__owner').length;
      if (newItems < 41) {
        button.hide();
      }
    });
  });
  $('.decline-tag').on('click', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/tag-requests/' + id + '/reject', {}, button, function (result) {
      toastr.success(result.message);
      location.reload();
    });
  });
  $('.accept-tag').on('click', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/tag-requests/' + id + '/approve', {}, button, function (result) {
      toastr.success(result.message);
      location.reload();
    });
  });
  $('.card-tag-form__request-btn').on('click', function () {
    var button = $(this);
    var card_id = button.attr('data-id');
    var tag_id = $('.card-tag-form__select').val();
    if (!tag_id) return false;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/tag-requests/', {
      tag_id: tag_id,
      card_id: card_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.card-offer-send-btn').on('click', function () {
    var button = $(this);
    var card_id = button.attr('data-id');
    var type = button.attr('data-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/offers', {
      card_id: card_id,
      type: type
    }, button, function (result) {
      toastr.success(result.message);
      button.remove();
      if (result.is_created) {
        var user = window.user;
        var userId = window.user_id;
        var userName = user.name;
        var userAvatarSrc = user.avatar;
        $('.not-found').remove();
        var newContent = "\n                <a href=\"/users/".concat(userId, "\" data-user-id=\"").concat(userId, "\" class=\"profile__friends-item\">\n                    <div class=\"profile__friends-avatar\">\n                        <img src=\"").concat(userAvatarSrc, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\">\n                    </div>\n                    <div class=\"profile__friends-info\">\n                        <div class=\"profile__friends-name\">").concat(userName, "</div>\n                        <div class=\"profile__friends-time\"></div>\n                    </div>\n                </a>");
        $('.profile__friends').prepend(newContent);
      } else {
        $('.profile__friends-item[data-user-id="' + window.user_id + '"]').remove();
      }
    });
    return false;
  });
  $('.card-offer-remove-btn').on('click', function () {
    var button = $(this);
    var card_id = button.attr('data-id');
    var type = button.attr('data-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/offers', {
      card_id: card_id,
      type: type
    }, button, function (result) {
      button.closest('.manga-cards__item-wrapper').remove();
    });
    return false;
  });
  $('.users-offer-card-all-remove-btn').on('click', function () {
    if (!confirm("Дейстительно удалить весь список?")) return false;
    var button = $(this);
    var type = button.attr('data-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/offers', {
      'card_id': -1,
      'type': type
    }, button, function (result) {
      button.remove();
      $('.manga-cards__item').remove();
    });
    return false;
  });

  // deck
  $('body').on('click', '.card-inventory-container--deck .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var elem = $(this);
    if ($('.deck__showcase-item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    var showcaseItem = $('<div>', {
      'class': 'deck__showcase-item',
      'data-id': dataId
    });
    var imgElement = $('<img>', {
      'src': imgSrc
    });
    showcaseItem.append(imgElement);
    $('.deck__showcase-list').append(showcaseItem);
    $('.deck__status span').text($('.deck__showcase-item').length);
  });
  $('body').on('click', '.deck__showcase-item', function () {
    $(this).remove();
    $('.deck__status span').text($('.deck__showcase-item').length);
  });
  $('body').on('click', '.deck-selector__btn', function () {
    var button = $(this);
    var cardId = $(this).closest('.manga-cards__item').find('.lock-card-btn').attr('data-id');
    var deckId = $(this).attr('data-deck-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/decks/' + deckId + '/addCard', {
      cardId: cardId
    }, button, function (data) {
      button.toggleClass('deck-selector__btn--active');
    });
  });

  // Долгий клик на карточке
  $(document).on('touchstart mousedown', '.manga-cards__item', function (e) {
    var $card = $(this);
    if ($card.find('.deck-selector').length > 0 || typeof window.userDecks === 'undefined' || typeof $card.data('deck-ids') === 'undefined' || typeof $card.data('card-id') === 'undefined') return;
    var timer = setTimeout(function () {
      $card.data('wasLongPress', true); // индивидуальный флаг

      $card.attr('data-block-modal', '1'); // блокируем модалку

      var deckIds = ($card.data('deck-ids') || '').toString().split(',').map(function (id) {
        return id.trim();
      }).filter(function (id) {
        return id;
      });
      var cardId = $card.data('card-id');
      var html = "<div class=\"deck-selector\">";
      window.userDecks.forEach(function (deck) {
        var isActive = deckIds.includes(deck.id.toString());
        html += "<button class=\"deck-selector__btn ".concat(isActive ? 'deck-selector__btn--active' : '', "\" data-deck-id=\"").concat(deck.id, "\">").concat(deck.name, "</button>");
      });
      html += "</div>";
      $card.append(html);
    }, 650);
    $card.data('long-press-timer', timer);
  });

  // Отмена таймера при отпускании
  $(document).on('touchend touchcancel mouseup mouseleave', '.manga-cards__item', function () {
    var $card = $(this);
    clearTimeout($card.data('long-press-timer'));
    $card.removeData('long-press-timer');
  });

  // Блокируем открытие модалки, если это было долгим нажатием
  $(document).on('click', '.manga-cards__item', function (e) {
    var $card = $(this);
    if ($card.attr('data-block-modal')) {
      $card.removeAttr('data-block-modal');
      $card.removeData('wasLongPress');
      e.stopImmediatePropagation();
      e.preventDefault();
      return false;
    }
  });

  // Удаляем меню при клике вне карточки
  $(document).on('click touchstart', function (e) {
    if (!$(e.target).closest('.manga-cards__item').length) {
      $('.deck-selector').remove();
      $('.manga-cards__item').removeData('wasLongPress');
    }
  });
  $('.deck__save-btn').on('click', function () {
    var button = $(this),
      cardIds = $('.deck__showcase-item').map(function (_, el) {
        return $(el).data('id');
      }).get(),
      is_trade = $('select[name="is_trade"]').val(),
      is_hidden = $('select[name="is_hidden"]').val(),
      name = $('.deck__create-name input').val();
    if (!name) {
      toastr.error('Укажите имя колоды');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/decks/create', {
      cardIds: cardIds,
      name: name,
      is_trade: is_trade,
      is_hidden: is_hidden
    }, button, function (data) {
      window.location = '/decks/' + data.deck_id;
    });
  });
  $('.deck__del-btn').on('click', function () {
    var button = $(this),
      id = $(this).attr('data-id');
    if (!confirm("Дейстительно удалить колоду?")) return false;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/decks/' + id + '/destroy', {}, button, function (data) {
      window.location = '/decks';
    });
  });
  $('.deck__increase-btn').on('click', function () {
    var button = $(this),
      id = $(this).attr('data-id');
    if (!confirm("Дейстительно хотите увеличить колоду?")) return false;
    var currentLimit = parseInt($('.deck__current-limit').text());
    var newLimit = currentLimit + 50; // Увеличиваем на 50

    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/decks/' + id + '/increaseSize', {}, button, function (data) {
      $('.deck__current-limit').text(newLimit); // Обновляем текущий лимит на странице
      toastr.success("\u041A\u043E\u043B\u043E\u0434\u0430 \u0431\u044B\u043B\u0430 \u0443\u0432\u0435\u043B\u0438\u0447\u0435\u043D\u0430 \u0434\u043E ".concat(newLimit, " \u043A\u0430\u0440\u0442"));
    });
  });
  var observer_decks_cards = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      var img = $(entry.target).find('.manga-cards__collection-image-img');
      if (img.length && img.data('src')) {
        if (entry.isIntersecting) {
          img.attr('src', img.data('src'));
        } else {
          img.attr('src', '/assets/card-placeholder.jpg');
        }
      }
    });
  });
  $('.manga-cards__collection-image').each(function () {
    observer_decks_cards.observe(this);
  });
  $('.market-list__history-cards-item').each(function () {
    observer_decks_cards.observe(this);
  });
  var observer_manga_cards = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      var img = $(entry.target).find('.manga-cards__image');
      var video = $(entry.target).find('video');
      if (img.length && img.data('src')) {
        if (entry.isIntersecting) {
          img.css('background-image', 'url(' + img.data('src') + ')');
        } else {
          img.css('background-image', 'url("/assets/card-placeholder.jpg")');
        }
      }
      if (video.length) {
        if (entry.isIntersecting) {
          // Если элемент видим, то запускаем видео
          video[0].play();
        } else {
          // Если элемент не видим, то останавливаем видео
          video[0].pause();
        }
      }
    });
  });

  //search cards
  function handleInputSearch() {
    var searchTerm = $(this).val().trim();
    var user_id = $(this).attr('data-user-id');
    var $originalCards = $('.manga-cards.manga-cards--full-page');
    var $searchCardsWrapper = $('.search-cards-wrapper');
    if ($searchCardsWrapper.length === 0) {
      $searchCardsWrapper = $('<div class="search-cards-wrapper"></div>');
      $originalCards.before($searchCardsWrapper);
    }
    if (searchTerm.length === 0) {
      $searchCardsWrapper.hide();
      $originalCards.show();
      $('.pagination').show();
    } else {
      $.ajax({
        url: '/search/cards?user_id=' + user_id + '&q=' + encodeURIComponent(searchTerm),
        method: 'GET',
        success: function success(response) {
          $searchCardsWrapper.html(response.content).show();
          $('.manga-cards__item').each(function () {
            observer_manga_cards.observe(this);
          });
          $originalCards.hide();
          $('.pagination').hide();
        }
      });
    }
  }
  var debouncedInput = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce(handleInputSearch);
  $('.manga-cards__search-input').on('input', debouncedInput);
  $('body').on('click', '.cards-search-load-btn', function () {
    var button = $(this);
    var offset = $('.search-cards-wrapper .manga-cards__item').length;
    var searchTerm = $('.manga-cards__search-input').val();
    var user_id = $('.manga-cards__search-input').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.get('/search/cards?user_id=' + user_id + '&offset=' + offset + '&q=' + encodeURIComponent(searchTerm), {}, button, function (data) {
      button.remove();
      var wrapper = $('<div>').html(data.content);
      var items = wrapper.find('.manga-cards--full-page').children();
      $('.search-cards-wrapper .manga-cards').append(items);
      var loadButton = wrapper.find('.cards-search-load-btn');
      if (loadButton.length) {
        $('.search-cards-wrapper .manga-cards').after(loadButton);
      }
      $('.manga-cards__item').each(function () {
        observer_manga_cards.observe(this);
      });
      if ($('.lock-card-btn').length) {
        $('.lock-card-btn').show();
      }
    });
  });
  $('.deck__update-btn').on('click', function () {
    var button = $(this),
      deck_id = $('.deck').attr('data-id'),
      cardIds = $('.deck__showcase-item').map(function (_, el) {
        return $(el).data('id');
      }).get(),
      is_trade = $('select[name="is_trade"]').val(),
      is_hidden = $('select[name="is_hidden"]').val(),
      name = $('.deck__create-name input').val();
    if (!name) {
      toastr.error('Укажите имя колоды');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/decks/' + deck_id + '/edit', {
      cardIds: cardIds,
      name: name,
      is_trade: is_trade,
      deck_id: deck_id,
      is_hidden: is_hidden
    }, button, function (data) {
      window.location = '/decks/' + data.deck_id;
    });
  });
  $('.deck__search-input').on('input', function () {
    var $inventoryItems = $('.deck__inventory-item');
    var $searchInput = $('.deck__search-input');
    var lastQuery = null;
    function debounce(func) {
      var _this = this;
      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
      var timer;
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        clearTimeout(timer);
        timer = setTimeout(function () {
          func.apply(_this, args);
        }, timeout);
      };
    }
    function filterItems() {
      var search_value = $searchInput.val().toLowerCase().trim();
      if (search_value === lastQuery) return;
      lastQuery = search_value;
      $inventoryItems.each(function () {
        var name = $(this).data('name').toLowerCase();
        var mangaName = $(this).data('manga-name').toLowerCase();
        if (name.includes(search_value) || mangaName.includes(search_value) || search_value === '') {
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    }
    $searchInput.on('input', debounce(filterItems));
  });
  var pathRegex = /^\/users\/\d+\/cards\/manga$/;
  if (pathRegex.test(window.location.pathname)) {
    var observer = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        var img = $(entry.target);
        if (entry.isIntersecting) {
          img.attr('src', img.data('src'));
        } else {
          img.attr('src', '/assets/card-placeholder.jpg');
        }
      });
    });
    $('.user-manga__cards-image img[data-src]').each(function () {
      observer.observe(this);
    });
  }
  $('.user-manga__offer-card-btn').on('click', function () {
    var button = $(this);
    if (button.hasClass('user-manga__offer-card-btn--active')) return false;
    var manga_id = button.attr('data-manga-id');
    var user_id = button.attr('data-user-id');
    var type = button.attr('data-type');
    $('.user-manga__result-offer').empty();
    $('.user-manga__offer-card-btn--active').removeClass('user-manga__offer-card-btn--active');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/offersGet/', {
      manga_id: manga_id,
      user_id: user_id,
      type: type
    }, button, function (data) {
      $(button).closest('.user-manga').find('.user-manga__result-offer').html(data.content);
      button.addClass('user-manga__offer-card-btn--active');
      $('.user-manga__result-offer .user-manga__cards-list.owl-carousel').owlCarousel({
        loop: false,
        autoWidth: true,
        dots: false,
        items: 8
      });
    });
  });
  if (window.location.pathname.startsWith('/trades/offers/')) {
    /*if (cardsData.creator.length === limit) {
        tradeDiv.attr('data-loaded', 'false');
        loadCards('creator', limit);
    }
     if (cardsData.receiver.length === limit) {
        tradeDiv.attr('data-loaded', 'false');
        loadCards('receiver', limit);
    }*/
    var loadCards = function loadCards(userType, offset) {
      var user_id = cardsData.creator_id;
      if (userType === 'receiver') {
        user_id = cardsData.receiver_id;
      }
      var url = "/trades/".concat(user_id, "/availableCardsLoad");
      var data = {
        offset: offset
      };
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(url, data, null, function (result) {
        if (result.cards.length > 0) {
          var _cardsData$userType;
          (_cardsData$userType = cardsData[userType]).push.apply(_cardsData$userType, _toConsumableArray(result.cards));
          maxPages = calculateMaxPages(currentSet, currentRank, currentSearch);
          displayCards(currentPage, currentSet, currentSearch);
          if (result.cards.length === limit) {
            setTimeout(function () {
              loadCards(userType, offset + limit);
            }, 1000);
          } else {
            checkAllDataLoaded();
          }
        } else {
          checkAllDataLoaded();
        }
      });
    };
    var checkAllDataLoaded = function checkAllDataLoaded() {
      var tradeDiv = $('.trade');
      // Если обе загрузки завершены, обновляем data-loaded
      if (cardsData.creator.length % limit !== 0 && cardsData.receiver.length % limit !== 0) {
        tradeDiv.attr('data-loaded', 'true');
        console.log('Все данные загружены');
      }
    };
    var calculateMaxPages = function calculateMaxPages(set, rank) {
      var search = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var cards = cardsData[set];
      cards = cards.filter(function (card) {
        return !card.is_lock;
      });
      if (rank !== 'all') {
        cards = cards.filter(function (card) {
          return card.card.rank === rank;
        });
      }
      if (only_anim_card) {
        cards = cards.filter(function (card) {
          return card.card.is_animated;
        });
      }
      if (only_anim_part_card) {
        cards = cards.filter(function (card) {
          return card.card.next_rank_card_id;
        });
      }
      if (currentSet === "creator" && only_need_card) {
        var needCardIds = new Set(cardsData.need_card);
        cards = cards.filter(function (card) {
          return needCardIds.has(card.card_id);
        });
      }
      if (currentSet === "receiver" && only_need_card) {
        var _needCardIds = new Set(cardsData.me_need_card);
        cards = cards.filter(function (card) {
          return _needCardIds.has(card.card_id);
        });
      }
      if (search !== '') {
        cards = cards.filter(function (card) {
          return card.card.name.toLowerCase().includes(search.toLowerCase()) || card.card.manga && card.card.manga.name.toLowerCase().includes(search.toLowerCase());
        });
      }
      return Math.ceil(cards.length / perPage);
    };
    var updatePagination = function updatePagination() {
      $('#current-page').text(currentPage);
      $('#max-pages').text(maxPages);
    };
    var displayCards = function displayCards(page, set) {
      var search = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var start = (page - 1) * perPage;
      var end = start + perPage;
      var cards = cardsData[set];
      cards = cards.filter(function (card) {
        return !card.is_lock;
      });
      if (currentRank !== 'all') {
        cards = cards.filter(function (card) {
          return card.card.rank === currentRank;
        });
      }
      if (only_anim_card) {
        cards = cards.filter(function (card) {
          return card.card.is_animated;
        });
      }
      if (only_anim_part_card) {
        cards = cards.filter(function (card) {
          return card.card.next_rank_card_id;
        });
      }
      if (currentSet === "creator" && only_need_card) {
        var needCardIds = new Set(cardsData.need_card);
        cards = cards.filter(function (card) {
          return needCardIds.has(card.card_id);
        });
      }
      if (currentSet === "receiver" && only_need_card) {
        var _needCardIds2 = new Set(cardsData.me_need_card);
        cards = cards.filter(function (card) {
          return _needCardIds2.has(card.card_id);
        });
      }
      if (search !== '') {
        cards = cards.filter(function (card) {
          return card.card.name.toLowerCase().includes(search.toLowerCase()) || card.card.manga && card.card.manga.name.toLowerCase().includes(search.toLowerCase());
        });
      }
      cards = cards.slice(start, end);
      var container = $(".tabs__page[data-page=\"".concat(set, "\"] .trade__inventory-list")).empty();
      cards.forEach(function (card) {
        var need_class = '';
        if (currentSet === "creator" && card.card_id && cardsData.need_card.includes(card.card_id)) {
          need_class = 'trade__inventory-item--need-card';
        }
        var not_need_class = '';
        if (currentSet === "receiver" && card.card_id && cardsData.not_need_card.includes(card.card_id)) {
          not_need_class = 'trade__inventory-item--not-need-card';
        }
        var has_creator_class = '';
        if (currentSet === "receiver" && card.card_id && cardsData["creator"].some(function (c) {
          return c.card_id === card.card_id;
        })) {
          has_creator_class = 'trade__inventory-item--creator-has';
        }
        var availabilityClass = card.available_for_trade ? '' : 'trade__inventory-item--not-available';
        if (card.is_not_tradable) availabilityClass = 'trade__inventory-item--not-available';
        var availabilityAnimationClass = card.card.next_rank_card_id ? 'trade__inventory-item--available-animation' : '';
        //const availabilityClass = '';
        var lockClass = card.is_lock ? 'trade__inventory-item--lock' : '';
        var mainItemExists = $(".trade__main-item[data-id=\"".concat(card.id, "\"]")).length > 0;
        var levelAttribute = card.level > 0 ? "data-level=\"".concat(card.level, "\"") : '';
        var displayStyle = mainItemExists ? 'style="display: none;"' : '';
        var image = card.level >= 3 && card.card.image_step_1 ? card.card.image_step_1 : card.card.image;
        var html = "<div class=\"trade__inventory-item ".concat(has_creator_class, " ").concat(availabilityClass, " ").concat(availabilityAnimationClass, " ").concat(not_need_class, " ").concat(need_class, " ").concat(lockClass, "\" data-card-id=\"").concat(card.card_id, "\" data-id=\"").concat(card.id, "\" ").concat(levelAttribute, " ").concat(displayStyle, ">\n        <div class=\"trade__inventory-item--exptra\"></div>\n        <img src=\"/img/cards/").concat(image, "\" alt=\"\u041A\u0430\u0440\u0442\u0430\">\n    </div>");
        container.append(html);
      });
      updatePagination();
    };
    var perPage = 50;
    var currentPage = 1;
    var currentSet = 'creator';
    var currentRank = 'all';
    var currentSearch = '';
    var only_need_card = false;
    var only_anim_card = false;
    var only_anim_part_card = false;
    var limit = 10000;
    var tradeDiv = $('.trade');
    $('.tabs__item--trade-creator, .tabs__item--trade-receiver').on('click', function () {
      $('.trade__type-card-button').text($(this).hasClass('tabs__item--trade-creator') ? 'Хочет' : 'Хочу');
    });
    $('.trade__type-card-button').on('click', function () {
      only_need_card = !only_need_card;
      $(this).toggleClass('trade__type-card-button--active');
      currentPage = 1;
      maxPages = calculateMaxPages(currentSet, currentRank);
      displayCards(currentPage, currentSet);
    });
    $('.trade__anim-card-button').on('click', function () {
      only_anim_card = !only_anim_card;
      $(this).toggleClass('trade__anim-card-button--active');
      currentPage = 1;
      maxPages = calculateMaxPages(currentSet, currentRank);
      displayCards(currentPage, currentSet);
    });
    $('.trade__anim-part-card-button').on('click', function () {
      only_anim_part_card = !only_anim_part_card;
      $(this).toggleClass('trade__anim-part-card-button--active');
      currentPage = 1;
      maxPages = calculateMaxPages(currentSet, currentRank);
      displayCards(currentPage, currentSet);
    });
    var maxPages = calculateMaxPages(currentSet, currentRank);
    $('.trade__search-input').on('input', function () {
      currentSearch = $(this).val();
      currentPage = 1;
      maxPages = calculateMaxPages(currentSet, currentRank, currentSearch);
      displayCards(currentPage, currentSet, currentSearch);
    });
    $('.tabs__item[data-page]').on('click', function () {
      if (!$(this).hasClass('tabs__item--active')) {
        $('.tabs__page').removeClass('tabs__item--active');
        $(this).addClass('tabs__item--active');
        currentSet = $(this).attr('data-page');
        currentPage = 1;
        maxPages = calculateMaxPages(currentSet, currentRank);
        displayCards(currentPage, currentSet);
      }
    });
    $('.trade__rank-button').click(function () {
      currentRank = $(this).attr('data-rank');
      currentPage = 1;
      maxPages = calculateMaxPages(currentSet, currentRank);
      displayCards(currentPage, currentSet);
      $('.trade__rank-button').removeClass('trade__rank-button--active');
      $(this).addClass('trade__rank-button--active');
    });
    $('.trade__prev-page').click(function () {
      if (currentPage > 1) {
        currentPage--;
        displayCards(currentPage, currentSet);
      }
    });
    $('.trade__next-page').click(function () {
      if (currentPage < maxPages) {
        currentPage++;
        displayCards(currentPage, currentSet);
      }
    });
    displayCards(currentPage, currentSet);
  }
  $('.lootbox__middle-item').on('click', function () {
    $('.lootbox__middle-item').removeClass('lootbox__middle-item--active');
    $(this).addClass('lootbox__middle-item--active');
  });
  $('.cards-moderate__manga-item').on('click', function () {
    window.location = '/cards/' + $(this).attr('data-id') + '/users';
  });
  $('.cards-moderate__text-btn').on('click', function () {
    var text = $('.cards-moderate__text textarea').val();
    if (text) $('select[name="reason"] option').first().val(text);
    $('select[name="reason"] option').first().text(text);
  });
  $('.card-report__delete-btn').on('click', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/reports/delete', {
      id: id
    }, button, function (data) {
      button.closest('.card-report__item').remove();
    });
  });
  $('.lootbox__open-dust-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/pack/openDust', {}, button, function (data) {
      openCardGiftModal(data.card.image, data.card.name);
      $('.lootbox__dust-balance').text(data.dust_balance);
    });
  });
  function recalcDropProgressToday(opens) {
    var t = {
        E: 1,
        D: 1,
        C: 1,
        G: 2,
        B: 2,
        A: 3,
        P: 3,
        S: 4,
        X: 4,
        H: 4,
        V: 4,
        L: 4,
        N: 4
      },
      w = function w(n) {
        return n % 10 == 1 && n % 100 != 11 ? 'пак' : n % 10 > 1 && n % 10 < 5 && (n % 100 < 10 || n % 100 >= 20) ? 'пака' : 'паков';
      };
    $('.drop-progress__section--today .drop-progress__item').each(function () {
      var r = ($(this).data('rank') || $(this).find('.drop-progress__rarity:first').text() || '').trim().toUpperCase(),
        n = t[r] || 0,
        m = Math.max(0, n - opens),
        p = n ? Math.min(100, Math.floor(opens / n * 100)) : 0;
      if (!n) return;
      $(this).find('.drop-progress__packs').html(m > 0 ? 'Осталось <span class="drop-progress__packs-value" data-need="' + m + '">' + m + '</span> ' + w(m) : 'Порог достигнут');
      $(this).find('.drop-progress__bar').attr('data-progress', p).find('.drop-progress__bar-fill').css('width', p + '%');
      $(this).toggleClass('drop-progress__item--locked', m > 0);
    });
  }
  $('.lootbox__open-btn').on('click', function () {
    var button = $(this);
    var count = $('.lootbox__middle-item--active').attr('data-count');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/pack/open', {
      count: count
    }, button, function (data) {
      $('.lootbox').attr('data-pack-today', parseInt($('.lootbox').attr('data-pack-today'), 10) + parseInt(count));
      recalcDropProgressToday(parseInt($('.lootbox').attr('data-pack-today')));
      $('.lootbox__card').attr('data-anim', null);
      data.cards.cards.forEach(function (item, index) {
        var $card = $('.lootbox__card').eq(index);
        $card.attr('data-id', item.id);
        $card.attr('data-rank', item.rank);
        $card.attr('data-level', item.level);
        if (item.next_rank_card_id) $card.attr('data-anim', item.next_rank_card_id);
        $card.find('img').attr('src', item.poster);
      });
      $('.lootbox__row').attr('data-pack-id', data.cards.id).show();
      $('.lootbox__open-btn').hide();
      $('.lootbox__balance').text(data.balance);
      $('.lootbox__dust-balance').text(data.dust_balance);
      if (data.gift_card) {
        openCardGiftModal(data.gift_card.poster, data.gift_card.name);
      }
      var s_value = (parseInt($('.lootbox__bonus-number-s').text()) - data.count_pack) % 51;
      $('.lootbox__bonus-number-s').text(s_value <= 0 ? s_value + 51 : s_value);
      var x_value = (parseInt($('.lootbox__bonus-number-x').text()) - data.count_pack) % 200;
      $('.lootbox__bonus-number-x').text(x_value <= 0 ? x_value + 200 : x_value);
      var xl_value = (parseInt($('.lootbox__bonus-number-xl').text()) - data.count_pack) % 500;
      $('.lootbox__bonus-number-xl').text(xl_value <= 0 ? xl_value + 500 : xl_value);
      if (parseInt(data.balance.replace(/\s/g, '')) < 70) {
        $('.lootbox__footer').html('<a href="/pay" class="button button--primary button--block">Пополнить счет</a>');
      }
      $('.lootbox__open-dust-btn').hide();
    });
  });
  $('body').on('click', '.lootbox__card', function () {
    var row = $(this).closest('.lootbox__row');
    if (row.hasClass('loot-lock')) {
      return false;
    }
    row.addClass('loot-lock');
    var button = $(this);
    var id = $(this).attr('data-id');
    var pack_id = row.attr('data-pack-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/pack/choose', {
      id: id,
      pack_id: pack_id
    }, button, function (data) {
      $('.lootbox__row').hide();
      $('.lootbox__card img').attr('src', '/assets/empty-card.png');
      openCardGiftModal(data.card.poster, data.card.name, false, data.card.id, data.card.insert_user_id, data.got_dust, data.is_duplicate);
      row.removeClass('loot-lock');
      loadPacks();
      $('.lootbox__dust-balance').text(data.dust_balance);

      /*
      if (data.got_dust) {
          toastr.success('Вы открыли пак и… ого! Алмазная пыль разлетелась во все стороны! Вы успели поймать одну искрящуюся частицу — теперь она ваша!', '', {
              toastClass: 'toast dust-toast',
              timeOut: 2000,
              extendedTimeOut: 2000,
          });
      }*/
    });
  });

  if (window.location.pathname.startsWith('/cards/pack')) {
    loadPacks();
  }
  function loadPacks() {
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/pack/load', {}, null, function (data) {
      if (data.cards) {
        $('.lootbox__card').attr('data-anim', null);
        data.cards.cards.forEach(function (item, index) {
          var $card = $('.lootbox__card').eq(index);
          $card.attr('data-id', item.id);
          $card.attr('data-rank', item.rank);
          $card.attr('data-level', item.level);
          if (item.next_rank_card_id) $card.attr('data-anim', item.next_rank_card_id);
          $card.find('img').attr('src', item.poster);
        });
        $('.lootbox__row').attr('data-pack-id', data.cards.id).show();
        $('.lootbox__open-btn').hide();
        $('.lootbox__open-dust-btn').hide();
      } else {
        $('.lootbox__open-btn').show();
        $('.lootbox__open-dust-btn').show();
      }
    });
  }
  $('body').on('click', '.manga-cards__item, .profile-cards__item, .deck__item, .open-link-card', function () {
    var $el = $(this);
    if ($el.attr('data-block-modal') || $el.find('.deck-selector').length > 0) {
      return;
    }
    openCardModal($el);
  });
  $('body').on('click', '.card-notification', function () {
    var card_image = $(this).attr('data-card-image');
    var card_name = $(this).attr('data-card-name');
    var is_welcome = $(this).attr('data-card-welcome');
    var card_id = $(this).attr('data-card-id');
    openCardGiftModal(card_image, card_name, is_welcome, card_id);
    $(this).hide();
  });
  $('.card-upgrade__search-input').on('input', function () {
    var val = $(this).val().toLowerCase();
    $('.card-upgrade__inventory-item').each(function () {
      $(this).toggle($(this).data('name').toLowerCase().includes(val) || !val);
    });
  });

  /*  $('.lootbox__show-realtime-btn').on('click', function() {
       $('.lootbox__realtime-list').toggle();
    });*/

  $('.manga-cards__mass-lock-btn').on('click', function () {
    var is_search = $('.search-cards-wrapper .lock-card-btn').length;
    var card_ids = undefined;
    if (is_search) {
      card_ids = $('.search-cards-wrapper .manga-cards__item').map(function () {
        return $(this).find('.lock-card-btn').data('id');
      }).get();
    } else {
      card_ids = $('.manga-cards__item').map(function () {
        return $(this).find('.lock-card-btn').data('id');
      }).get();
    }
    var is_lock = $(this).attr('data-type');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/lockCards', {
      card_ids: card_ids,
      is_lock: is_lock
    }, button, function (data) {
      toastr.success(data.message);
      var s_class = 'icon icon-unlock';
      if (is_lock == "1") {
        s_class = 'icon icon-lock';
      }
      if (is_search) {
        $('.search-cards-wrapper .manga-cards__item .lock-card-btn i').each(function () {
          $(this).attr('class', s_class);
        });
      } else {
        $('.manga-cards__item .lock-card-btn i').each(function () {
          $(this).attr('class', s_class);
        });
      }
    });
  });
  $('.tags-card-delete-btn').on('click', function () {
    var id = $(this).attr('data-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/tag-requests/delete/' + id, {}, button, function (data) {
      toastr.success(data.message);
      button.closest('.tags__item').remove();
    });
    return false;
  });
  $('.trade__cancel-btn').on('click', function () {
    var trade_id = $('.trade').attr('data-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/' + trade_id + '/cancel', {}, button, function (data) {
      toastr.success(data.message);
      $('.trade__controls').hide();
    });
  });
  $('.trade__rejected-btn').on('click', function () {
    var trade_id = $('.trade').attr('data-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/' + trade_id + '/reject', {}, button, function (data) {
      toastr.error(data.message);
      $('.trade__controls').hide();
      var texts = ["Понимаю, карточки ещё не готовы покинуть твою коллекцию. Ну что ж, жду новых предложений!", "Кажется, твои карточки решили остаться дома. Надеюсь, в следующий раз они будут более решительными!", "Как жаль, что обмен не состоялся. Ну что ж, всегда рад попытаться снова!", "Такое случается, не все обмены доходят до финала. Но я всегда на связи для новых сделок!", "Обмен отменен? Что ж, твои карточки явно ещё не готовы переехать. Буду ждать нового шанса!", "Обмен не произошел, но я надеюсь, это только отсрочка. Всегда рад предложить что-то новое!", "Не каждый обмен достигает цели, но я всегда готов к новым попыткам. Спасибо за интерес!", "Ну что ж, карточки сегодня не в настроении путешествовать. Жду новых предложений, когда они будут готовы!", "Кажется, мои предложения сегодня не в твоем вкусе. Давай попробуем в другой раз!", "Хорошо, пусть твои карточки пока останутся с тобой. Я всегда открыт к новым обменам!", "Очень жаль, что обмен отменен. Но я не теряю надежды увидеть новые предложения от тебя!", "Видимо, не судьба в этот раз. Жду новых возможностей для обмена!", "Как говорится, не все герои носят плащи. И не все карточки меняются при первой попытке. До новых встреч!", "Обмен отменен, но мой интерес к сделкам с тобой остается. До следующего раза!", "Ничего страшного, отмена сегодня — это шанс для лучшего обмена завтра.", "Каждый обмен — это история, и сегодняшняя еще не написана.", "Хорошо, давай дадим нашим карточкам больше времени. Они скажут нам, когда будут готовы.", "Отмена — это просто ещё один шаг к идеальному обмену. С нетерпением жду нашей с попытки!", "Иногда лучшее решение — это отмена. Но я всегда на связи для будущих обменов!", "Каждая отмена обмена — это возможность подумать и сделать следующий раз еще лучше.", "Может, это знак, что наш идеальный обмен еще впереди.", "Похоже, наши карточки сегодня решили остаться верными своим коллекциям. Надеюсь, в другой раз они будут более социальными!", "Похоже, наши карточки слишком привязались к своим коллекциям. Ну что ж, уважаем их выбор!", "Сегодняшний обмен отменён, но это не повод для грусти. Всё, что откладывается, обязательно случится!", "Ох, кажется, наши карточки сегодня решили играть в «труднодоступные». Ну что ж, удачи нам в следующий раз!", "Сегодня не судьба, но я верю в наши будущие обмены. Будем надеяться на лучшее!", "Похоже, наши карточки решили остаться в зоне комфорта. Давай не будем их пугать, попробуем обменять в другой раз!", "Обмен отменен, но наше стремление к обмену — нет. До следующего попытки!", "Сегодня без обмена, как кофе без кофеина — все ждут большего. Надеюсь, в следующий раз получится лучше!", "Кажется, сегодня не тот день для наших карточек. Давай подождем лучшего момента.", "Сегодня без обмена, но не без надежд. Все самое интересное еще впереди!", "Карточки решили не выходить сегодня из колоды — боятся потеряться."];
      var randomText = texts[Math.floor(Math.random() * texts.length)];
      var avatarSrc = $('.trade__main-user img').first().attr('src');
      var $div = $("\n                <div class=\"trade__thanks\">\n                    <div class=\"trade__thanks-avatar\">\n                        <img src=\"".concat(avatarSrc, "\" alt=\"Avatar\">\n                    </div>\n                    <div class=\"trade__thanks-text\"></div>\n                </div>\n            "));
      $('.trade__main').after($div);
      var $textElement = $div.find('.trade__thanks-text');
      var index = 0;
      function typeWriter() {
        if (index < randomText.length) {
          $textElement.append(randomText.charAt(index));
          var delay = randomText.charAt(index) === ' ' ? 120 : 15;
          index++;
          setTimeout(typeWriter, delay);
        }
      }
      typeWriter();
    });
  });
  $('.trade__accepted-btn').on('click', function () {
    if (!confirm("Действительно принять обмен?")) return false;
    var trade_id = $('.trade').attr('data-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/' + trade_id + '/accept', {}, button, function (data) {
      toastr.success(data.message);
      $('.trade__controls').hide();
      $('.trade__main-items--creator .lock-card-btn').css('display', 'block');
      var texts = ["Твоя карточка в моей коллекции, как пицца в руках студента во время сессии — жизненно необходима! Благодарю!", "Ай да ты, карточный волшебник! Спасибо за этот чудесный обмен!", "Поздравляю нас обоих с успешной сделкой! Спасибо за твою щедрость!", "Ты только что улучшил мой день на 1000%! Спасибо за карточку!", "Теперь каждый раз, когда я буду смотреть на эту карточку, буду вспоминать об этом моменте!", "Ты сделал мой день настолько лучше! Поменялся карточкой — подарил улыбку", "Ты как Санта для коллекционера: принёс именно то, что я хотел! Спасибо за чудесный обмен!", "Принял твой обмен и почувствовал себя, как когда находишь деньги в старых джинсах. Вот это сюрприз! Спасибо!", "Ты только что повысил уровень моего счастья на 1000%! Спасибо за карточку!", "Обмен прошел как по нотам! Моя коллекция теперь поет песни счастья. Спасибо!", "Обмен прошел так идеально, что я думаю, это был сон. Спасибо за карточку!", "Твоя карточка – как вишенка на торте! Моя коллекция теперь вкуснее. Спасибо!", "Ты – карточечный герой! Моя коллекция теперь на седьмом небе. Спасибо!", "Твоя карточка – как долгожданный подарок! Спасибо за обмен!", "Обмен совершен! Моя коллекция ликует, и я тоже! Спасибо!", "Ты как Санта-Клаус, но только с карточками. Спасибо за обмен!", "Если бы у меня была шляпа, я бы её снял в твою честь. Спасибо за обмен!", "Ну, наконец-то моя коллекция стала совершенной. Как я раньше без этой карточки жил?", "Ты сделал мою коллекцию лучше. Ну, по крайней мере, она так думает. Спасибо!", "Если бы карточки были злодеями, ты был бы моим спасителем! Спасибо за обмен!", "Спасибо за обмен! Твоя карточка – это как десерт, которого я ждал весь вечер!", "Ты только что обменялся с мастером обмена.", "Как будто нашел последний кусочек паззла — теперь все на своих местах. Благодарю за обмен!", "Твоя карточка в моей коллекции, как соль в супе — без неё никак! Спасибо!", "Ты не просто отдал карточку, ты отдал частичку чуда. Моя благодарность не знает границ!", "С этой карточкой моя коллекция теперь как новогодняя елка — полностью украшена! Спасибо!", "Как хорошее вино к ужину — так твоя карточка к моей коллекции. Идеально подходит!", "Твоя карточка в моей коллекции, как кофе утром — просто необходимо! Благодарю за пополнение!", "Этот обмен — как идеальный поцелуй: мгновенный и запоминающийся! Спасибо!", "Ты только что повысил мои коллекционные акции! Спасибо за эту инвестицию!", "Это не просто карточка, это золотой билет в мир моих коллекционных мечтаний. Спасибо!", "Как настоящий археолог, ты нашел реликвию для моей коллекции. Благодарю за эту находку!", "Этот обмен — как успешная посадка на Луну, только в мире коллекционирования. Спасибо, что взлетели вместе со мной!", "Этот обмен — как отличная пицца в поздний час: приходит точно вовремя и сильно радует. Спасибо!", "Твоя карточка в моей коллекции, как солнечный луч в пасмурный день. Спасибо за свет!", "Как маг, что извлекает кролика из шляпы, так ты достал великолепную карточку для моей коллекции. Благодарю за чудо!", "Ты превратил мою коллекцию в галерею искусств. Каждая карточка теперь — шедевр. Благодарю за вклад в культуру!", "Твоя карточка добавила моей коллекции столько света, как новая лампочка в темной комнате. Благодарю за яркость!"];
      var randomText = texts[Math.floor(Math.random() * texts.length)];
      var avatarSrc = $('.trade__main-user img').first().attr('src');
      var $div = $("\n                <div class=\"trade__thanks\">\n                    <div class=\"trade__thanks-avatar\">\n                        <img src=\"".concat(avatarSrc, "\" alt=\"Avatar\">\n                    </div>\n                    <div class=\"trade__thanks-text\"></div>\n                </div>\n            "));
      $('.trade__main').after($div);
      var $textElement = $div.find('.trade__thanks-text');
      var index = 0;
      function typeWriter() {
        if (index < randomText.length) {
          $textElement.append(randomText.charAt(index));
          var delay = randomText.charAt(index) === ' ' ? 120 : 15;
          index++;
          setTimeout(typeWriter, delay);
        }
      }
      typeWriter();
      return false;
    });
  });
  $('.trade__send-trade-btn').on('click', function () {
    var button = $(this);
    var receiver_id = $('.trade').attr('data-receiver-id');
    var creator_card_ids = getCardsIds('creator');
    var receiver_card_ids = getCardsIds('receiver');
    if (creator_card_ids.length < 1 || creator_card_ids.length > 9 || receiver_card_ids.length < 1 || receiver_card_ids.length > 9) {
      toastr.error('Оба участника должны выбрать хотя бы по 1 карте, но не больше 9');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/trades/create', {
      receiver_id: receiver_id,
      creator_card_ids: creator_card_ids,
      receiver_card_ids: receiver_card_ids
    }, button, function (data) {
      window.location = '/trades/' + data.trade.id;
    });
  });
  $('.reader-chapters__create-card-btn').on('click', function () {
    var chapter_id = $(this).attr('data-chapter-id');
    var chapter_page = parseInt($('.reader-menu__item--page span').text());
    window.location = '/cards/create/' + chapter_id + '?p=' + chapter_page;
    return false;
  });
  $('body').on('click', '.card-inventory-container--trade .card-filter-list__card', function () {
    var elem = $(this);
    var src = $(this).find('img').attr('src');
    var dataId = $(this).attr('data-id');
    var inTrade = $(this).attr('data-in-trade');
    var isCreatorCard = $(this).closest('.tabs__page').data('page') === 'creator';
    var itemType = isCreatorCard ? 'creator' : 'receiver';
    if (itemType === "receiver" && elem.attr('data-is-lock') == '1') {
      return false;
    }
    if ($('.trade__main-item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    if (inTrade === "1") {
      toastr.error('Эта карточка участвует в другом обмене');
      return false;
    }
    if ($(".trade__main-items[data-type=\"".concat(itemType, "\"] .trade__main-item")).length >= 9) {
      toastr.error('Нельзя обменять более 9 карт за раз');
      return false;
    }
    $(".trade__main-items[data-type=\"".concat(itemType, "\"]")).append("\n            <div class=\"trade__main-item\" data-id=\"".concat(dataId, "\">\n                <img src=\"").concat(src, "\" alt=\"\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\">\n            </div>\n        "));
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId);
  });
  $('body').on('click', '.trade__inventory-item', function () {
    if ($(this).hasClass('trade__inventory-item--not-available')) {
      toastr.error('Эта карточка участвует в другом обмене');
      return false;
    }
    if ($(this).hasClass('trade__inventory-item--lock')) {
      toastr.error('Пользователь заблокировал карточку для обмена');
      return false;
    }
    var isCreatorCard = $(this).closest('.tabs__page').data('page') === 'creator';
    var itemType = isCreatorCard ? 'creator' : 'receiver';
    var dataId = $(this).data('id');
    var src = $(this).find('img').attr('src');
    if ($(".trade__main-items[data-type=\"".concat(itemType, "\"] .trade__main-item")).length >= 9) {
      toastr.error('Нельзя обменять более 9 карт за раз');
      return false;
    }
    $(".trade__main-items[data-type=\"".concat(itemType, "\"]")).append("\n            <div class=\"trade__main-item\" data-id=\"".concat(dataId, "\">\n                <img src=\"").concat(src, "\" alt=\"\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\">\n            </div>\n        "));
    $(this).hide();
  });
  $('body').on('click', '.trade__main--active .trade__main-item', function () {
    var data_id = $(this).attr('data-id');
    $('.trade__inventory-item[data-id="' + data_id + '"]').show();
    $(this).remove();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(data_id, true);
  });
  $('body').on('click', '.card-inventory-container--remelt .card-filter-list__card', function () {
    if ($(this).hasClass('remelt__inventory-item--not-available')) {
      toastr.error('Эта карточка участвует в другом обмене');
      return false;
    }
    if ($(this).hasClass('card-filter-list__card--available-animation')) {
      if (!confirm('Эта карточка осколок анимации. Вы уверены, что хотите переплавить ее?')) {
        return;
      }
    }
    if ($(this).hasClass('remelt__inventory-item--lock')) {
      toastr.error('Заблокированная карточка');
      return false;
    }
    if ($('.remelt__wrapper img').length == 3) {
      toastr.error('Все слоты заняты');
      return false;
    }
    var img = $(this).find('img').attr('src');
    var card_id = $(this).attr('data-id');
    var card_rank = $(this).attr('data-rank');
    if (card_rank === "X" || card_rank === "Q") return false;
    var targets = ['.remelt__item--one', '.remelt__item--two', '.remelt__item--three'];
    if ($('.remelt__wrapper img').length && $('.remelt__wrapper img').attr('data-rank') != card_rank) {
      toastr.error('Карточки должны быть одного ранга');
      return false;
    }
    var check = $('.remelt__wrapper img[data-id="' + card_id + '"]').length;
    if (check) {
      toastr.error('Вы уже использовали эту карточку');
      return false;
    }
    for (var _i2 = 0, _targets = targets; _i2 < _targets.length; _i2++) {
      var target = _targets[_i2];
      var container = $(target);
      if (!container.find('img').length) {
        container.find('span').hide();
        container.append("<img src=\"".concat(img, "\" data-id=\"").concat(card_id, "\" data-rank=\"").concat(card_rank, "\">"));
        $(this).hide();
        break;
      }
    }
    var rank = $('.remelt__wrapper img').first().attr('data-rank');
    $('.remelt__result').attr('data-rank', getNextRank(rank));
    $('.remelt__start-btn').toggle($('.remelt__wrapper img').length == 3);
  });
  $('body').on('click', '.remelt__item img', function () {
    var data_id = $(this).attr('data-id');
    $('.card-inventory-container--remelt .card-filter-list__card[data-id="' + data_id + '"]').show();
    $(this).siblings('span').show();
    $(this).remove();
    $('.remelt__start-btn').toggle($('.remelt__wrapper img').length == 3);
  });
  $('.remelt__start-btn').on('click', function () {
    var card_ids = $('.remelt__wrapper img').map(function () {
      return $(this).data('id');
    }).get();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/remelt', {
      card_ids: card_ids
    }, button, function (data) {
      var $target = $('.remelt__item--result');
      var targetOffset = $target.offset();
      var targetCenterX = targetOffset.left + $target.width() / 2;
      var targetCenterY = targetOffset.top + $target.height() / 2;
      var is_first = true;
      $('.remelt__item img').each(function () {
        var $img = $(this);
        var imgOffset = $img.offset();
        var imgCenterX = imgOffset.left + $img.width() / 2;
        var imgCenterY = imgOffset.top + $img.height() / 2;
        var imgWidth = $img.width();
        var imgHeight = $img.height();
        var moveX = targetCenterX - imgCenterX;
        var moveY = targetCenterY - imgCenterY;
        $img.css({
          position: 'absolute',
          left: imgOffset.left,
          top: imgOffset.top,
          width: imgWidth,
          height: imgHeight
        });
        $('body').append($img);
        $img.animate({
          left: moveX + imgOffset.left,
          top: moveY + imgOffset.top,
          opacity: 0
        }, 1400, function () {
          if (is_first) {
            is_first = false;
            openCardGiftModal(data.card.image, data.card.name);
            $img.remove();
            $('.remelt__item img').remove();
            $('.remelt__item span').show();
            $('.remelt__inventory-list').prepend("<div class=\"remelt__inventory-item\" data-id=\"".concat(data.card.id, "\" data-rank=\"").concat(data.card.rank, "\">\n                                <img src=\"").concat(data.card.image, "\" alt=\"\u041A\u0430\u0440\u0442\u0430\">\n                            </div>"));
          }
        });
      });
    });
  });

  //settings
  $('body').on('click', '.card-inventory-container--showcase .card-filter-list__card', function () {
    var $item = $(this);
    var dataId = $item.data('id');
    if ($('.showcase__item[data-id="' + dataId + '"]').length) return false;
    var $img = $item.find('img').clone();
    var $video = $item.find('video').clone();
    var $emptyShowcaseItem = $('.showcase__item:not(:has(img, video))').first();
    if ($emptyShowcaseItem.length) {
      if ($img.length) {
        $emptyShowcaseItem.append($img).attr('data-id', dataId);
      } else {
        $emptyShowcaseItem.append($video).attr('data-id', dataId);
      }
      //$item.hide();
    }
  });

  $('.showcase').on('click', '.showcase__item', function () {
    var $showcaseItem = $(this);
    var dataId = $showcaseItem.attr('data-id');
    var $img = $showcaseItem.find('img');
    var $video = $showcaseItem.find('video');
    if ($img.length) {
      //let $inventoryItem = $('.showcase-inventory__item[data-id="' + dataId + '"]');
      //$inventoryItem.show();
      $showcaseItem.attr('data-id', null).empty();
    }
    if ($video.length) {
      //let $inventoryItem = $('.showcase-inventory__item[data-id="' + dataId + '"]');
      //$inventoryItem.show();
      $showcaseItem.attr('data-id', null).empty();
    }
  });
  function renderScrollItemCounts($item, animateWhich) {
    var rank = $item.data('rank');
    var count = parseInt($item.attr('data-count')) || 0;
    var blessed = parseInt($item.attr('data-blessed-count')) || 0;
    var $box = $item.find('.card-level-scrolls__item-count');
    var html = '<b class="card-level-scrolls__count">' + count + '</b>';
    if (blessed > 0) {
      html += ' <span data-tooltip="Благ. свиток" data-rank="' + rank + '">' + blessed + '</span>';
    }
    $box.html(html);

    // анимация только изменившихся чисел
    if (animateWhich === 'count' || animateWhich === 'both') pulseOnce($box.find('.card-level-scrolls__count'));
    if (animateWhich === 'blag' || animateWhich === 'both') pulseOnce($box.find('span[data-rank="' + rank + '"]'));
  }
  function pulseOnce($el) {
    if (!$el.length) return;
    $el.stop(true, true).css({
      transition: 'transform .22s ease, opacity .22s ease'
    }).css({
      transform: 'scale(1.25)',
      opacity: 0.85
    });
    setTimeout(function () {
      $el.css({
        transform: 'scale(1)',
        opacity: 1
      });
    }, 20);
  }
  function animateNumberTo($el, to) {
    if (!$el.length) return;
    var from = parseInt(($el.text() || '0').replace(/\D/g, '')) || 0;
    $({
      v: from
    }).animate({
      v: to
    }, {
      duration: 260,
      step: function step(now) {
        $el.text(Math.floor(now));
      },
      complete: function complete() {
        $el.text(to);
      }
    });
  }

  /* --- апдейт конкретного ранга --- */
  function bumpScrollCount(rank, isBlag) {
    var $item = $('.card-level-scrolls__item[data-rank="' + rank + '"]');
    if (!$item.length) return;
    var count = parseInt($item.attr('data-count')) || 0;
    var blessed = parseInt($item.attr('data-blessed-count')) || 0;
    var newCount = count + 1;
    var newBless = isBlag ? blessed + 1 : blessed;
    $item.attr('data-count', newCount);
    $item.attr('data-blessed-count', newBless);

    // перерисуем, чтобы появился <b> и/или span, затем анимируем только изменившееся
    renderScrollItemCounts($item, isBlag ? 'both' : 'count');

    // плавное «пересчёт» чисел
    animateNumberTo($item.find('.card-level-scrolls__count'), newCount);
    if (isBlag) animateNumberTo($item.find('span[data-rank="' + rank + '"]'), newBless);

    // мини-вспышка у иконки ранга, если пришёл благой
    if (isBlag) haloBurst($item.find('.card-level-scrolls__item-rank img'));
  }

  /* --- «вспышка ореола» у цели --- */
  function haloBurst($targetImg) {
    if (!$targetImg.length) return;
    var off = $targetImg.offset();
    var w = $targetImg.outerWidth(),
      h = $targetImg.outerHeight();
    var $halo = $('<div class="pack-fx__halo"></div>').appendTo('body');
    $halo.css({
      left: off.left + w / 2 - 44,
      top: off.top + h / 2 - 44,
      position: 'absolute',
      opacity: .95,
      transform: 'scale(.5)'
    });
    $halo.animate({
      opacity: 0
    }, {
      duration: 380,
      step: function step(now, fx) {
        // имитируем расширение
        var p = 1 - now;
        $halo.css('transform', 'scale(' + (0.5 + p * 0.8) + ')');
      },
      complete: function complete() {
        $halo.remove();
      }
    });
  }

  /* --- показать оверлей открытия, разложить 10 свитков, выпустить их к целям --- */
  function openScrollPack(scrolls) {
    // контейнер
    var $fx = $('<div class="pack-fx"><div class="pack-fx__veil"></div><div class="pack-fx__layer"></div></div>').appendTo('body');
    var $layer = $fx.find('.pack-fx__layer');
    var centerX = $(window).width() / 2;
    var centerY = $(window).height() / 2;
    var radius = Math.min(centerX, centerY) * 0.22; // окружность вокруг центра

    // нарисуем 10 свитков по окружности
    scrolls.forEach(function (s, i) {
      var angle = Math.PI * 2 / scrolls.length * i - Math.PI / 2;
      var x = centerX + Math.cos(angle) * radius;
      var y = centerY + Math.sin(angle) * radius;
      var $el = $('<div class="pack-fx__scroll" data-rank="' + s.rank + '" data-blag="' + (s.blag ? 1 : 0) + '">' + '<img src="/assets/cards/scrolls/' + s.rank + '.png" alt="">' + '</div>');
      $layer.append($el);

      // стартовая позиция
      $el.css({
        left: x - 36,
        top: y - 36,
        opacity: 0,
        transform: 'scale(.7)'
      });

      // поп-эффект появления с небольшим рандомом
      setTimeout(function () {
        $el.css({
          transition: 'transform .18s ease, opacity .18s ease'
        });
        $el.css({
          opacity: 1,
          transform: 'scale(1)'
        });
      }, 60 + i * 70);
    });

    // через паузу — полёт к целям по одному
    setTimeout(function () {
      var done = 0;
      $layer.find('.pack-fx__scroll').each(function (i) {
        var $el = $(this);
        var rank = $el.attr('data-rank');
        var blag = $el.attr('data-blag') === '1';
        setTimeout(function () {
          flyToTarget($el, rank, blag, function () {
            done++;
            if (done === scrolls.length) {
              $fx.fadeOut(120, function () {
                $fx.remove();
              });
            }
          });
        }, i * 90);
      });
    }, 420);
  }

  /* --- полёт одного свитка к соответствующему рангу --- */
  function flyToTarget($el, rank, isBlag, onDone) {
    var $targetImg = $('.card-level-scrolls__item[data-rank="' + rank + '"] .card-level-scrolls__item-rank img');
    var target = $targetImg[0];
    if (!target) {
      $el.fadeOut(120, function () {
        $el.remove();
        if (onDone) onDone();
      });
      return;
    }

    // геометрия относительно экрана
    var tr = target.getBoundingClientRect();
    var er = $el[0].getBoundingClientRect();
    var overlayRect = $('.pack-fx')[0].getBoundingClientRect(); // у фикс-оверлея это, как правило, (0,0), но так надёжнее

    // куда летим (координаты внутри оверлея)
    var toLeft = tr.left + tr.width / 2 - er.width / 2 - overlayRect.left;
    var toTop = tr.top + tr.height / 2 - er.height / 2 - overlayRect.top;

    // уберём transform, чтобы jQuery .animate(left/top/width/height) не выглядел как «провал»
    $el.css({
      transition: 'none',
      transform: 'none'
    });
    $el.animate({
      left: toLeft,
      top: toTop,
      width: 28,
      height: 28,
      opacity: 0.2
    }, 520, 'swing', function () {
      $el.remove();
      bumpScrollCount(rank, isBlag); // обновляем счётчики
      if (onDone) onDone();
    });
  }
  function renderScrollPackResult(scrolls) {
    var $wrap = $('#scroll-pack-result');
    var time = new Date().toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit'
    });
    var $box = $('<div class="scroll-drop"></div>');

    // Заголовок
    var $head = $('<div class="scroll-drop__head"></div>').append('<div class="scroll-drop__title">Дроп набора ×10</div>').append('<div class="scroll-drop__time">сейчас, ' + time + '</div>');
    $box.append($head);

    // Сетка из 10 свитков
    var $grid = $('<div class="scroll-drop__grid"></div>');
    scrolls.forEach(function (s, i) {
      var $chip = $('<div class="scroll-chip' + (s.blag ? ' scroll-chip--blag' : '') + '"></div>').append('<img src="/assets/cards/scrolls/' + s.rank + '.png" alt="' + s.rank.toUpperCase() + '">').append('<div class="scroll-chip__cap">' + s.rank.toUpperCase() + '</div>').css('opacity', 0).css('transform', 'translateY(8px) scale(.98)');
      $grid.append($chip);

      // лёгкое поочерёдное появление
      setTimeout(function () {
        $chip.animate({
          opacity: 1
        }, {
          duration: 160,
          queue: false
        });
        $chip.css({
          transition: 'transform .18s ease'
        }); // только трансформ
        requestAnimationFrame(function () {
          $chip.css('transform', 'translateY(0) scale(1)');
        });
      }, i * 70);
    });
    $box.append($grid);

    // Итоги по рангам и «благим»
    var totals = groupScrolls(scrolls);
    var order = ['x', 's', 'a', 'b', 'g', 'c', 'd', 'e']; // от редких к частым — под себя
    var $sum = $('<div class="scroll-drop__totals"></div>');
    order.forEach(function (r) {
      if (!totals[r]) return;
      var t = totals[r];
      var el = $('<div class="scroll-total">' + '<img src="/assets/cards/scrolls/' + r + '.png" alt="">' + '<span>' + r.toUpperCase() + '</span>' + '<span class="scroll-total__n">×' + t.count + '</span>' + (t.blessed ? '<span class="scroll-total__blag">• благ: ' + t.blessed + '</span>' : '') + '</div>');
      $sum.append(el);
    });
    $box.append($sum);

    // Добавляем сверху (последний дроп — первый)
    $wrap.prepend($box.hide());
    $box.slideDown(180);

    // маленькая вспышка радости, если есть благой
    if (scrolls.some(function (s) {
      return s.blag;
    })) {
      sparkleOver($head.find('.scroll-drop__title'));
    }
  }

  /* Группировка: { rank: {count, blessed} } */
  function groupScrolls(items) {
    var g = {};
    items.forEach(function (s) {
      if (!g[s.rank]) g[s.rank] = {
        count: 0,
        blessed: 0
      };
      g[s.rank].count++;
      if (s.blag) g[s.rank].blessed++;
    });
    return g;
  }

  /* Мягкая «искра» над заголовком при благом */
  function sparkleOver($el) {
    var off = $el.offset();
    var w = $el.outerWidth();
    var h = $el.outerHeight();
    var $sp = $('<div/>').css({
      position: 'absolute',
      left: off.left + w / 2 - 44,
      top: off.top - 18,
      width: 88,
      height: 18,
      background: 'radial-gradient(circle, rgba(255,240,160,.9) 0%, rgba(255,240,160,0) 70%)',
      pointerEvents: 'none',
      opacity: .95,
      borderRadius: '50%'
    }).appendTo('body');
    $sp.animate({
      opacity: 0
    }, {
      duration: 420,
      step: function step(now) {
        $sp.css('transform', 'scale(' + (1 + (1 - now) * .5) + ')');
      },
      complete: function complete() {
        $sp.remove();
      }
    });
  }
  $('.scroll-pack__buy').on('click', function () {
    var $btn = $(this);
    if ($btn.prop('disabled')) return;
    $btn.prop('disabled', true).addClass('is-loading');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/buyPack', {}, $btn, function (data) {
      if (!data || !data.success) {
        toastr.error(data && data.message ? data.message : 'Не удалось купить набор');
        $btn.prop('disabled', false).removeClass('is-loading');
        return;
      }

      // анимация улёта к иконкам — если подключена
      if (typeof openScrollPack === 'function') openScrollPack(data.scrolls);

      // записываем, что выпало, в блок результата
      renderScrollPackResult(data.scrolls);

      // если есть функция обновления баланса — дергаем
      if (typeof updateDiamondsBalance === 'function' && typeof data.balance !== 'undefined') {
        updateDiamondsBalance(data.balance);
      }
      $btn.prop('disabled', false).removeClass('is-loading');
    });
  });
  $('.showcase__save-btn').on('click', function () {
    var button = $(this);
    var showcaseData = [];
    $('.showcase__item').each(function () {
      var dataId = $(this).attr('data-id');
      if (dataId !== undefined) {
        showcaseData.push(dataId);
      }
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/showcase', {
      showcaseData: showcaseData
    }, button, function (data) {
      toastr.success(data.message);
    });
  });

  // gift

  $('body').on('click', '.showcase-all--gift .showcase-all__item', function () {
    var $item = $(this);
    var dataId = $item.data('id');
    if ($('.showcase__item[data-id="' + dataId + '"]').length) return false;
    var $img = $item.find('img').clone();
    var $emptyShowcaseItem = $('.showcase__item:not(:has(img))').first();
    if ($emptyShowcaseItem.length) {
      $emptyShowcaseItem.append($img).attr('data-id', dataId);
      //$item.hide();
    }
  });

  $('.showcase__gift-save-btn').on('click', function () {
    var button = $(this);
    var showcaseData = [];
    $('.showcase__item').each(function () {
      var dataId = $(this).attr('data-id');
      if (dataId !== undefined) {
        showcaseData.push(dataId);
      }
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/showcase/gift', {
      showcaseData: showcaseData
    }, button, function (data) {
      toastr.success(data.message);
    });
  });

  // ach
  $('body').on('click', '.showcase-all--ach .showcase-all__item', function () {
    var $item = $(this);
    var dataId = $item.data('id');
    if ($('.showcase__item[data-id="' + dataId + '"]').length) return false;
    var $img = $item.find('img').clone();
    var $emptyShowcaseItem = $('.showcase__item:not(:has(img))').first();
    if ($emptyShowcaseItem.length) {
      $emptyShowcaseItem.append($img).attr('data-id', dataId);
      //$item.hide();
    }
  });

  $('.showcase__ach-save-btn').on('click', function () {
    var button = $(this);
    var showcaseData = [];
    $('.showcase__item').each(function () {
      var dataId = $(this).attr('data-id');
      if (dataId !== undefined) {
        showcaseData.push(dataId);
      }
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/showcase/ach', {
      showcaseData: showcaseData
    }, button, function (data) {
      toastr.success(data.message);
    });
  });
  $('.card-show__show-histories-btn').on('click', function () {
    $('.timeline').css('display', function (_, currentDisplay) {
      return currentDisplay === 'flex' ? 'none' : 'flex';
    });
    $('.card-show__owner-wrapper').toggle();
  });

  //upgrade
  $('.card-upgrade__start-btn').on('click', function () {
    var card_ids = $('.card-upgrade__wrapper img').map(function () {
      return $(this).data('id');
    }).get();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/upgrade', {
      card_ids: card_ids
    }, button, function (data) {
      $('.card-upgrade__item img').remove();
      $('.card-upgrade__item span').show();
      openCardGiftModal(data.card.image, data.card.name);
    });
  });
  $('body').on('click', '.card-inventory-container--split .card-filter-list__card', function () {
    var id = $(this).attr('data-id');
    $('.card-split__card').attr('data-id', id);
    if ($('.card-split__card img').length === 0) {
      $('.card-split__card').append('<img src="' + $(this).find('img').attr('src') + '">');
    } else {
      $('.card-split__card img').attr('src', $(this).find('img').attr('src'));
    }
    $('.card-split__card').show();
    $('.card-split__card--placeholder').hide();
  });
  $('body').on('click', '.card-split__card', function () {
    $('.card-split__card').attr('data-id', null);
    $('.card-split__card img').remove();
    $('.card-split__card').hide();
    $('.card-split__card--placeholder').show();
  });
  $('.card-split__start-btn').on('click', function () {
    var button = $(this);
    var card_id = $('.card-split__card').attr('data-id');
    if (!card_id) {
      toastr.error("Выберите карту");
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/split', {
      card_id: card_id
    }, button, function (data) {
      $('.card-split__rewards').html('');
      $('.card-split__card').attr('data-id', null);
      $('.card-split__card img').remove();
      toastr.success(data.message);
      $('.card-split__rewards').css('display', 'flex');
      $('.card-split__rewards').append('<img src="' + data.cards[0].poster + '">');
      $('.card-split__rewards').append('<img src="' + data.cards[1].poster + '">');
      $('.card-split__card').hide();
      $('.card-split__card--placeholder').show();
      $('.card-split__counter span').text(parseInt($('.card-split__counter span').text()) + 1);
    });
  });
  if (window.location.pathname.startsWith('/settings/showcase')) {
    $('.showcase__item[data-id]').each(function () {
      var dataId = $(this).data('id');
      $('.showcase-inventory__item[data-id="' + dataId + '"]').hide();
    });
    var showcaseSortable = null;
    $('.showcase__enable-sort-btn').on('click', function () {
      var $btn = $(this);
      var $list = $('.showcase__list');
      if (!showcaseSortable) {
        if ($list.length > 0) {
          showcaseSortable = new Sortable($list[0], {
            handle: '.showcase__item',
            animation: 150
          });
          $btn.text('Выключить перетаскивание карт');
        }
      } else {
        showcaseSortable.destroy();
        showcaseSortable = null;
        $btn.text('Включить перетаскивание карт');
      }
    });
  }
  if (window.location.pathname.match(/^\/decks\/\d+\/edit/)) {
    var sortable_list = document.getElementsByClassName('deck__showcase-list');
    if (sortable_list.length > 0) {
      var sortable = new Sortable(sortable_list[0], {
        handle: '.deck__showcase-item',
        animation: 150,
        disabled: true
      });
      $('.deck__sortable-toggle').change(function () {
        if ($(this).is(':checked')) {
          sortable.option("disabled", false);
        } else {
          sortable.option("disabled", true);
        }
      });
    }
  }

  //event
  $('.event-pack__button').on('click', function () {
    var button = $(this);
    if (button.hasClass('event-lock')) return false;
    setTimeout(function () {
      return button.removeClass('event-lock');
    }, 5000);
    button.addClass('event-lock');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/event/pack", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
      $('.halloween-pack__sweets span').text(data.balance);
    });
  });
  $('.event-pack__open-donat-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/event/packDonat", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
    });
  });
  $('.event-pack__open-free-card-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/event/freeCard", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
    });
  });
  $('.event-pack__button-coins').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/event/packCoins", {}, button, function (data) {
      if (data && data.cards) {
        var cardsHtml = '';
        data.cards.forEach(function (card) {
          if (card.image) {
            cardsHtml += "<img src=\"".concat(card.image, "\" class=\"halloween-pack__card-image\" alt=\"Card Image\">");
          }
        });
        $('.halloween-pack__cards').html(cardsHtml);
        toastr.success("Выдано 400 арбузов");
      }
    });
  });
  $('.new-year-pack__button').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/newyear/pack", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
      $('.halloween-pack__sweets span').text(data.balance);
    });
  });
  $('.new-year-pack__open-donat-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/newyear/packDonat", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
    });
  });
  $('.new-year-pack__free-card-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/newyear/freeCard", {}, button, function (data) {
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      }
    });
  });
  $('.new-year-pack__button-coins').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/newyear/packCoins", {}, button, function (data) {
      if (data && data.cards) {
        var cardsHtml = '';
        data.cards.forEach(function (card) {
          if (card.image) {
            cardsHtml += "<img src=\"".concat(card.image, "\" class=\"halloween-pack__card-image\" alt=\"Card Image\">");
          }
        });
        $('.halloween-pack__cards').html(cardsHtml);
      }
    });
  });
  $('.halloween-pack__button').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/halloween/pack", {}, button, function (data) {
      $('.halloween-pumpkin-scary').addClass('halloween-flicker-main');
      if (data && data.card) {
        openCardGiftModal(data.card.image, data.card.name);
      } else {
        toastr.success('Не повезло с картами, но 50 алмазов твои! Хеллоуин умеет удивлять! 🎃💎');
        var count = 0;
        var interval = setInterval(function () {
          if (count++ >= 20) return clearInterval(interval);
          var diamond = $('<div class="diamond-rating"></div>').css({
            left: "".concat(10 + Math.random() * 80, "vw")
          }).appendTo('body');
          setTimeout(function () {
            return diamond.remove();
          }, 5000);
        }, 100);
      }
      $('.halloween-pack__sweets span').text(data.balance);
    });
  });
  $('.halloween-pack__button-coins').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/halloween/packCoins", {}, button, function (data) {
      $('.halloween-pumpkin-scary').addClass('halloween-flicker-main');
      if (data && data.cards) {
        var cardsHtml = '';
        data.cards.forEach(function (card) {
          if (card.image) {
            cardsHtml += "<img src=\"".concat(card.image, "\" class=\"halloween-pack__card-image\" alt=\"Card Image\">");
          }
        });
        $('.halloween-pack__cards').html(cardsHtml);
      }
    });
  });
  $('body').on('click', '.history__select-user--User, .history__select-user--Card', function () {
    var param = $(this).hasClass('history__select-user--User') ? 'user_id' : 'card_id';
    var id = $(this).data('id');
    var url = new URL(window.location);
    url.searchParams.set(param, id);
    window.location.href = url;
  });
  if (window.location.pathname.startsWith('/cards/create')) {
    var updateImage = function updateImage(index) {
      if (window.pagesUrls[currentIndexPageCard]) {
        if (typeof cropper !== 'undefined' && cropper) cropper.replace(window.pagesUrls[currentIndexPageCard]);
        var event = new CustomEvent('createCardImageChange', {
          detail: {
            url: window.pagesUrls[currentIndexPageCard]
          }
        });
        window.dispatchEvent(event);
      }
      $('.card-create__pages-title span').text(index + 1);
    };
    $('.card-create__button--next').on('click', function () {
      if (currentIndexPageCard < window.pagesUrls.length - 1) {
        currentIndexPageCard++;
        updateImage(currentIndexPageCard);
      }
    });
    $('.my-card-task__delete-btn').on('click', function () {
      var card_id = $(this).attr('data-id');
      var button = $(this);
      var item = $(this).closest('.my-card-task__item');
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/cards/delete/' + card_id, {}, button, function (data) {
        toastr.success(data.message);
        item.remove();
      });
    });
    $('.card-create__button--prev').on('click', function () {
      if (currentIndexPageCard > 0) {
        currentIndexPageCard--;
        updateImage(currentIndexPageCard);
      }
    });
    var image = $('.card-create__image')[0];
    var cropper = undefined;
    if (image) {
      cropper = new Cropper(image, {
        viewMode: 3,
        dragMode: 'move',
        autoCropArea: 1,
        restore: false,
        modal: false,
        guides: false,
        highlight: false,
        cropBoxMovable: false,
        cropBoxResizable: false,
        toggleDragModeOnDblclick: false,
        wheelZoomRatio: 0.2
      });
    }
    $('.card-create__button--load-img').on('click', function () {
      $("#imageInput").click();
    });
    $('.card-create__button--load-file').on('click', function () {
      $("#mediaInput").click();
    });
    $('#imageInput').on('input', function (e) {
      var files = e.target.files;
      if (files && files.length > 0) {
        var file = files[0];
        var reader = new FileReader();
        reader.onload = function (e) {
          if (typeof cropper !== 'undefined' && cropper) cropper.replace(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    });
    $('.card-create__input-name').on('input', function () {
      $('.card-create__name').text($(this).val());
    });
    $('.card-create__input-title').on('input', function () {
      $('.card-create__title').text($(this).val());
    });
    $('.card-create__minus-btn, .card-create__plus-btn').on('click', function () {
      var type = $(this).closest('.card-create__field').attr('data-type');
      var target = type === 'manga' ? '.card-create__title' : type === 'name' ? '.card-create__name' : null;
      if (target) {
        var elem = $(target);
        var size = parseFloat(elem.css('font-size')) + ($(this).hasClass('card-create__minus-btn') ? -1 : 1);
        size = Math.min(36, Math.max(12, size));
        elem.css('font-size', size + 'px');
      }
    });
    $('.card-create__rang-item').on('click', function () {
      $('.card-create__rang-item').removeClass('card-create__rang-item--active');
      $(this).addClass('card-create__rang-item--active');
      $('.card-create__frame').attr('src', $(this).attr('data-src'));
    });
    $('.card-create__pages-item').on('click', function () {
      $('.card-create__pages-item').removeClass('card-create__pages-item--active');
      $(this).addClass('card-create__pages-item--active');
      if (typeof cropper !== 'undefined' && cropper) cropper.replace($(this).find('img').attr('src'));
    });
    $('.card-create__send-btn').on('click', function () {
      var card_name = $('.card-create__name').text();
      var manga_name = $('.card-create__title').text();
      var fz_q = $('.card-create__fzq').val();
      var rank = $('.card-create__rang-item--active').attr('data-rank');
      var card_fz = $('.card-create__name').css('font-size');
      var chapter_id = $('.card-create').attr('data-chapter-id');
      var manga_id = $('.card-create').attr('data-manga-id');
      var image_link = $('.card-create__image').attr('src');
      var replace_id = $('.card-create').attr('data-replace-id');
      var is_step = $('.card-create').attr('data-replace-step');
      var frame_name = ($('.card-create__rang-item--active').attr('data-src') || '').split('?')[0].split('/').pop().replace(/\.[^/.]+$/, '').toLowerCase();
      var text = $('.card-create__text').val();
      if (image_link.startsWith("data:image")) image_link = "image";
      var button = $(this);
      if (card_name == "Имя" || card_name == "") {
        toastr.error("Укажите имя");
        return false;
      }
      if (!/^[А-ЯA-ZЁ]/.test(card_name)) {
        toastr.error("Имя должно быть с большой буквы");
        return false;
      }
      var element = document.getElementById('photo');
      var croppedCanvas = cropper.getCroppedCanvas({
        width: 288,
        height: 432,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      });
      var croppedImageData = croppedCanvas.toDataURL('image/png');
      croppedImageData = croppedImageData.replace(/^data:image\/(png|jpeg);base64,/, '');
      html2canvas(element, {
        backgroundColor: null,
        useCORS: true,
        scale: 3
      }).then(function (canvas) {
        var newCanvas = document.createElement("canvas");
        var context = newCanvas.getContext("2d");
        newCanvas.width = 288;
        newCanvas.height = 432;
        context.imageSmoothingEnabled = true;
        context.imageSmoothingQuality = "high";
        context.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height);
        canvas = newCanvas;
        var imageData = canvas.toDataURL('image/png');
        imageData = imageData.replace(/^data:image\/png;base64,/, '');
        var data = {
          card_name: card_name,
          manga_name: manga_name,
          rank: rank,
          card_fz: card_fz,
          chapter_id: chapter_id,
          image_link: image_link,
          replace_id: replace_id,
          fz_q: fz_q,
          frame_name: frame_name
        };
        _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(window.location.pathname, {
          imageData: imageData,
          data: data,
          text: text,
          croppedImageData: croppedImageData,
          is_step: is_step,
          manga_id: manga_id
        }, button, function (data) {
          toastr.success(data.message);
          _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
        });
      });
    });
  }
}
$('body').on('click', '.manga-cards__report-btn', function () {
  $('.manga-cards__report').slideToggle();
});
function openCardModal(elem) {
  function isLikedCard(id) {
    var likes = JSON.parse(localStorage.getItem('cards_likes')) || [];
    return likes.includes(id);
  }
  var modalId = '#modal-cards';
  var imageUrl = "";
  if ($(elem).attr('data-image')) {
    imageUrl = $(elem).attr('data-image');
  } else {
    imageUrl = $(elem).find('.manga-cards__image').length > 0 ? $(elem).find('.manga-cards__image').css('background-image') : $(elem).find('img').attr('src');
  }
  if ($(elem).find('video').length) {
    imageUrl = $(elem).find('video source').attr('src');
  }
  var cardImage = imageUrl.includes('url(') ? imageUrl.match(/url\(["']?(.*?)["']?\)/)[1] : imageUrl;
  var name = $(elem).attr('data-name');
  var mangaName = $(elem).attr('data-manga-name');
  var mangaSlug = $(elem).attr('data-manga-slug');
  var author = $(elem).attr('data-user-name');
  var rank = $(elem).closest('.manga-cards__item-wrapper').attr('data-rank');
  var frame_name = $(elem).closest('.manga-cards__item-wrapper').attr('data-frame-name');
  var level = $(elem).attr('data-level');
  var authorId = $(elem).attr('data-user-id');
  var cardId = $(elem).attr('data-card-id');
  var isLiked = isLikedCard(cardId) ? "active" : "";
  var isVideo = !!imageUrl.includes('.mp4');
  var hasAframe = $(elem).find('.card-anim-frame').length;
  var animFrame = "";
  var aframeRanks = ['E', 'C', 'D', 'B', 'G', 'P', 'A', 'S']; // список рангов с анимацией

  if ($(elem).hasClass('deck__item')) {
    rank = $(elem).attr('data-rank');
    frame_name = $(elem).attr('data-frame-name');
  }
  if (hasAframe && Number(level) >= 6 && aframeRanks.includes(rank)) {
    var frameFile = rank.toLowerCase();
    if (rank === 'S' && frame_name) {
      var _name = frame_name;
      _name = _name.toLowerCase().replace(/[^a-z0-9_-]/g, '');
      if (_name) frameFile = _name;
    }
    animFrame = "<img src=\"/assets/cards/aframe/".concat(frameFile, ".apng\" class=\"card-anim-frame\">");
  }
  var modalContent = "\n        <div class=\"modal\" id=\"modal-cards\" tabindex=\"-1\">\n            <div class=\"modal__inner\">\n                <div class=\"modal__content\">\n                    <div class=\"modal__body\">\n                        <div class=\"modal__close\" data-close-modal=\"\"><i class=\"icon icon-close\"></i></div>\n                        <a href=\"/news/1\" class=\"modal__edit\"><i class=\"icon icon-question\"></i></a>\n                        <div class=\"manga-cards__container\">\n                            ".concat(isVideo ? "<div class=\"manga-cards__header manga-cards__header--modal-video\">\n                                        <video poster=\"/assets/card-placeholder.jpg\" pip=\"false\" webkit-playsinline=\"true\" playsinline=\"true\" autoplay muted loop>\n                                            <source src=\"".concat(cardImage, "\" type=\"video/mp4\">\n                                            Your browser does not support the video tag.\n                                        </video>\n                                    </div>") : "<div class=\"manga-cards__header\" style=\"background-image: url('".concat(cardImage, "');\"></div>"), "\n                            <div class=\"manga-cards__wrapper\">\n                             ").concat(isVideo ? "<div class=\"manga-cards__wrapper-video\"><video poster=\"/assets/card-placeholder.jpg\" pip=\"false\" preload=\"metadata\" class=\"card-show__wrapper-video\" webkit-playsinline=\"true\" playsinline=\"true\" autoplay muted loop>\n                                        <source src=\"".concat(cardImage, "\" type=\"video/mp4\">\n                                    </video>").concat(animFrame, "</div>") : "<div class=\"manga-cards__placeholder\">\n                                        <img src=\"".concat(cardImage, "\" alt=\"\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\">\n                                        ").concat(animFrame, "\n                                    </div>"), "\n                                <div class=\"manga-cards__info\">\n                                    <div class=\"manga-cards__name\">").concat(name, "</div>\n                                    <a href=\"/manga/").concat(mangaSlug, "\" class=\"manga-cards__link\">").concat(mangaName, "</a>\n                                    <div class=\"manga-cards__text\"><span>\u0410\u0432\u0442\u043E\u0440: </span><a href=\"/users/").concat(authorId, "\">").concat(author, "</a></div>\n                                    <div class=\"manga-cards__controls\">\n                                        <button class=\"button manga-cards__report-btn\"><i class=\"icon icon-report\"></i></button>\n                                        <a href=\"/cards/").concat(cardId, "/users\" class=\"button\">\u0412\u0441\u0435 \u043E\u0431\u043B\u0430\u0434\u0430\u0442\u0435\u043B\u0438</a>\n                                        <button class=\"favourite-send-btn button collection__user-like ml-2 ").concat(isLiked, "\" data-id=\"").concat(cardId, "\" data-type=\"Card\">\n                                            <svg class=\"favourite-btn--active\" viewBox=\"0 0 24 24\">\n                                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.26219 7.83972C2.88275 5.58247 4.74525 3.50269 7.87628 3.50269C9.70517 3.50269 10.9691 4.18455 11.7591 4.63243C11.8408 4.67874 11.922 4.72871 12 4.77912C12.078 4.7287 12.1592 4.67874 12.2409 4.63242C13.031 4.18457 14.2949 3.50269 16.1237 3.50269C19.2548 3.50269 21.1173 5.58247 21.7378 7.83972C22.3359 10.0153 21.9078 12.6363 20.3737 14.5495C19.0715 16.1735 17.3061 17.602 15.8565 18.6064C15.1224 19.115 14.4368 19.5373 13.8856 19.8405C13.6128 19.9907 13.3509 20.1238 13.1191 20.2255C13.0049 20.2756 12.8719 20.3296 12.7326 20.3748C12.6424 20.4041 12.3536 20.4977 12 20.4977C11.6463 20.4977 11.3582 20.4043 11.2679 20.375C11.1287 20.3298 10.995 20.2756 10.8808 20.2255C10.6491 20.1238 10.3872 19.9907 10.1143 19.8405C9.56313 19.5373 8.87752 19.115 8.14347 18.6064C6.69389 17.602 4.92847 16.1735 3.62627 14.5495C2.0922 12.6363 1.66408 10.0153 2.26219 7.83972Z\" fill=\"url(#like_active_paint0_linear)\"></path>\n                                            </svg>\n                                            <svg class=\"favourite-btn--not-active\" viewBox=\"0 0 24 24\">\n                                            <path d=\"M3.22405 8.10396C3.7514 6.18576 5.28486 4.5 7.87632 4.5C9.43873 4.5 10.5157 5.07398 11.2672 5.5C11.5721 5.67285 11.8245 5.87686 12 6C12.1755 5.87686 12.428 5.67286 12.7329 5.5C13.4844 5.07399 14.5614 4.5 16.1238 4.5C18.7152 4.5 20.2487 6.18576 20.7761 8.10395C21.2949 9.99132 20.8212 12.3523 19.5 14C18.2825 15.5185 16.6991 16.8089 15.2884 17.7863C14.579 18.2778 13.9225 18.6816 13.4048 18.9664C12.9861 19.1968 12.4931 19.5 12 19.5C11.4996 19.5 11.017 19.1985 10.5952 18.9664C10.0775 18.6816 9.42103 18.2778 8.71161 17.7863C7.30097 16.8089 5.71758 15.5185 4.5 14C3.17881 12.3523 2.70517 9.99132 3.22405 8.10396Z\" stroke=\"currentColor\" stroke-width=\"1.4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                                            </svg>\n                                        </button>\n                                        <a href=\"/market/requests/create?card_id=").concat(cardId, "\" class=\"button ml-2\"><i class=\"icon icon-scales\"></i></a>\n                                    </div>\n                                    <div class=\"manga-cards__report\">\n                                        <a class=\"button button--block\" href=\"/cards/create/13?p=1&replace_id=").concat(cardId, "\">\u041F\u0440\u0435\u0434\u043B\u043E\u0436\u0438\u0442\u044C \u0437\u0430\u043C\u0435\u043D\u0443</a>\n                                          <form class=\"modal-report\">\n                                            <input type=\"hidden\" name=\"model_type\" value=\"Card\">\n                                            <input type=\"hidden\" name=\"model_id\" value=\"").concat(cardId, "\">\n                                            <select type=\"text\" name=\"type\" class=\"sl-select default-select\">\n                                                <option value=\"\u041D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0435 \u0438\u043C\u044F\">\u041D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0435 \u0438\u043C\u044F</option>\n                                                <option value=\"\u041E\u0431\u0440\u0435\u0437\u0430\u043D\u043D\u0430\u044F \u0433\u043E\u043B\u043E\u0432\u0430\">\u041E\u0431\u0440\u0435\u0437\u0430\u043D\u043D\u0430\u044F \u0433\u043E\u043B\u043E\u0432\u0430</option>\n                                                <option value=\"\u0413\u043B\u0430\u0432\u043D\u044B\u0439 \u0433\u0435\u0440\u043E\u0439 \u0415 \u0440\u0430\u043D\u0433\u0430\">\u0413\u043B\u0430\u0432\u043D\u044B\u0439 \u0433\u0435\u0440\u043E\u0439 \u0415 \u0440\u0430\u043D\u0433\u0430</option>\n                                                <option value=\"\u041D\u0430\u043B\u0438\u0447\u0438\u0435 \u0431\u0435\u043B\u044B\u0445 \u043A\u0440\u0430\u0435\u0432/\u0431\u0430\u0431\u043B\u043E\u0432\">\u041D\u0430\u043B\u0438\u0447\u0438\u0435 \u0431\u0435\u043B\u044B\u0445 \u043A\u0440\u0430\u0435\u0432/\u0431\u0430\u0431\u043B\u043E\u0432</option>\n                                                <option value=\"\u041D\u0430\u043B\u0438\u0447\u0438\u0435 \u0442\u0435\u043A\u0441\u0442\u0430/\u0437\u0432\u0443\u043A\u043E\u0432\">\u041D\u0430\u043B\u0438\u0447\u0438\u0435 \u0442\u0435\u043A\u0441\u0442\u0430/\u0437\u0432\u0443\u043A\u043E\u0432</option>\n                                                <option value=\"\u0414\u0443\u0431\u043B\u044C\">\u0414\u0443\u0431\u043B\u044C</option>\n                                            </select>\n                                            <textarea name=\"message\" cols=\"30\" rows=\"10\" class=\"form__field\" placeholder=\"\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u043E \u043E\u043F\u0438\u0448\u0438\u0442\u0435 \u0447\u0442\u043E \u043D\u0435 \u0442\u0430\u043A \u0441 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u043E\u0439\"></textarea>\n                                            <button class=\"button button--primary modal-report__send-btn\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>");
  if ($(modalId).length === 0) {
    $('body').append(modalContent);
  } else {
    $(modalId).replaceWith(modalContent);
  }
  _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal("modal-cards");
}
function getCardsIds(type) {
  return $(".trade__main-items[data-type=\"".concat(type, "\"] .trade__main-item")).map(function () {
    return $(this).data('id');
  }).get();
}
function openCardGiftModal(card_image, card_name) {
  var is_welcome = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var card_user_id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var got_dust = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var is_duplicate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var welcome = is_welcome && is_welcome == "true";
  var usersLink = '';
  if (id !== null && id !== undefined) {
    usersLink = "<div class=\"mt-4\"><a href=\"/cards/".concat(id, "/users\" class=\"button mt-4\">\u0421\u043F\u0438\u0441\u043E\u043A \u0432\u043B\u0430\u0434\u0435\u043B\u044C\u0446\u0435\u0432</a></div>");
  }
  var lockBtn = '';
  if (card_user_id !== null && card_user_id !== undefined) {
    lockBtn = "<div class=\"mt-4\"><button class=\"button lock-card-modal-btn\" data-id=\"".concat(card_user_id, "\"><i class=\"icon icon-lock\"></i>\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043E\u0431\u043C\u0435\u043D</button></div>");
  }

  // Награды
  var rewards = [];
  if (is_duplicate !== null && is_duplicate !== undefined && is_duplicate) {
    rewards.push("<span class=\"manga-cards__reward\">+5 \u0430\u043B\u043C\u0430\u0437\u043E\u0432</span>");
  }
  if (got_dust !== null && got_dust !== undefined && got_dust) {
    rewards.push("<span class=\"manga-cards__reward\">+1 \u0430\u043B\u043C\u0430\u0437\u043D\u043E\u0439 \u043F\u044B\u043B\u0438</span>");
  }

  // Тексты
  var isDup = String(is_duplicate) === "true";
  var duplicateBadge = isDup ? "<div class=\"mb-3\"><span class=\"manga-cards__badge\">\u0414\u0443\u0431\u043B\u0438\u043A\u0430\u0442</span></div>" : "";
  var descText = "\u041A\u0430\u0440\u0442\u0430 \xAB".concat(card_name, "\xBB \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430 \u0432 \u0442\u0432\u043E\u044E \u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u044E.");
  if (welcome) {
    descText = "\u041D\u0430\u0439\u0434\u0435\u043D\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0430 \xAB".concat(card_name, "\xBB!<br><br><a href=\"/reg\" style=\"color:red;\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0441\u044F</a>, \u0447\u0442\u043E\u0431\u044B \u0435\u0451 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C.");
  } else if (isDup) {
    // Уточнение для дубликата
    if (rewards.length) {
      descText = "\u041A\u0430\u0440\u0442\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044C \u0432 \u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u0438. \u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u043D\u0430\u0447\u0438\u0441\u043B\u0435\u043D\u044B:";
    } else {
      descText = "\u042D\u0442\u0430 \u043A\u0430\u0440\u0442\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044C \u0443 \u0442\u0435\u0431\u044F. \u041A\u0430\u0440\u0442\u0430 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430 \u0432 \u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u044E.";
    }
  } else if (!isDup && rewards.length) {
    // Новая карта + пыль (без дубликата)
    descText = "\u041A\u0430\u0440\u0442\u0430 \xAB".concat(card_name, "\xBB \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430. \u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u043D\u0430\u0447\u0438\u0441\u043B\u0435\u043D\u044B:");
  }
  var infoHtml = "\n        <div class=\"manga-cards__name\">\n            \u041F\u043E\u043B\u0443\u0447\u0435\u043D\u0430 \u043A\u0430\u0440\u0442\u0430\n        </div>\n        ".concat(duplicateBadge, "\n        <div class=\"manga-cards__text\">").concat(descText, "</div>\n        ").concat(rewards.length ? "<div class=\"manga-cards__rewards\">".concat(rewards.join(' '), "</div>") : "", "\n        ").concat(usersLink, "\n        ").concat(lockBtn, "\n    ");
  var modalContent = "\n        <div class=\"modal\" id=\"modal-gift-card\" tabindex=\"-1\">\n            <div class=\"modal__inner\">\n                <div class=\"modal__content\">\n                    <div class=\"modal__body\">\n                        <div class=\"modal__close\" data-close-modal=\"\"><i class=\"icon icon-close\"></i></div>\n                          <div class=\"manga-cards__container\">\n                            <div class=\"manga-cards__header\" style=\"background-image: url('".concat(card_image, "');\"></div>\n                            <div class=\"manga-cards__wrapper\">\n                                <div class=\"manga-cards__placeholder\">\n                                    <img src=\"").concat(card_image, "\" alt=\"\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\">\n                                </div>\n                                <div class=\"manga-cards__info\">\n                                    ").concat(infoHtml, "\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>");
  if ($("#modal-gift-card").length === 0) {
    $('body').append(modalContent);
  } else {
    $("#modal-gift-card").replaceWith(modalContent);
  }
  _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal("modal-gift-card");
}
function getNextRank(currentRank) {
  var ranks = ['E', 'D', 'C', 'B', 'G', 'P', 'A', 'S'];
  var currentIndex = ranks.indexOf(currentRank);
  if (currentIndex === -1) {
    return undefined;
  } else if (currentIndex === ranks.length - 1) {
    return 'S';
  } else {
    return ranks[currentIndex + 1];
  }
}
var notificationQueue = [];
var isRunning = false;
function showUpgradeNotification(avatarUrl, upgradeLevel, userId) {
  notificationQueue.push({
    avatarUrl: avatarUrl,
    upgradeLevel: upgradeLevel,
    userId: userId
  });
  if (!isRunning) runQueue();
}
function runQueue() {
  if (!notificationQueue.length) {
    isRunning = false;
    return;
  }
  isRunning = true;
  var _notificationQueue$sh = notificationQueue.shift(),
    avatarUrl = _notificationQueue$sh.avatarUrl,
    upgradeLevel = _notificationQueue$sh.upgradeLevel,
    userId = _notificationQueue$sh.userId;
  var $notification = $("<a href=\"/users/".concat(userId, "\" class=\"upgrade-notification\">")).css('background-image', "url(".concat(avatarUrl, ")")).append("<span>+".concat(upgradeLevel, "</span>")).appendTo('body');
  $notification.fadeIn(500).animate({
    bottom: '25%',
    opacity: 1
  }, 1400, function () {
    $(this).fadeOut(600, function () {
      $(this).remove();
      runQueue();
    });
  });
}
function decreaseScrollCount(rank, isBlessed) {
  var scrollItem = $('.card-level-scrolls__item[data-rank="' + rank + '"]');
  if (scrollItem.length === 0) return;
  var count = parseInt(scrollItem.attr('data-count'), 10);
  var blessedCount = parseInt(scrollItem.attr('data-blessed-count'), 10);
  if (isBlessed && blessedCount > 0) {
    blessedCount--;
    scrollItem.attr('data-blessed-count', blessedCount);
  } else if (!isBlessed && count > 0) {
    count--;
    scrollItem.attr('data-count', count);
  }
  var displayText = "".concat(count);
  if (blessedCount > 0) {
    displayText += " (".concat(blessedCount, ")");
  }
  scrollItem.find('.card-level-scrolls__item-count').text(displayText);
}

/***/ }),

/***/ "./resources/js/modules/cardUpgradeModule.js":
/*!***************************************************!*\
  !*** ./resources/js/modules/cardUpgradeModule.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCardUpgrade": () => (/* binding */ initializeCardUpgrade)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeCardUpgrade() {
  $('body').on('click', '.card-upgrade__inventory-item', function () {
    if ($(this).hasClass('card-upgrade__inventory-item--not-available')) {
      toastr.error('Эта карточка участвует в другом обмене');
      return false;
    }
    if ($(this).hasClass('card-upgrade__inventory-item--lock')) {
      toastr.error('Заблокированная карточка');
      return false;
    }
    if ($('.card-upgrade__wrapper img').length == 3) {
      toastr.error('Все слоты заняты');
      return false;
    }
    var img = $(this).find('img').attr('src');
    var card_id = $(this).attr('data-id');
    var card_rank = $(this).attr('data-rank');
    var targets = ['.card-upgrade__item--one', '.card-upgrade__item--two', '.card-upgrade__item--three'];
    if ($('.card-upgrade__wrapper img').length && $('.card-upgrade__wrapper img').attr('data-rank') != card_rank) {
      toastr.error('Карточки должны быть одного ранга');
      return false;
    }
    var check = $('.card-upgrade__wrapper img[data-id="' + card_id + '"]').length;
    if (check) {
      return false;
    }
    for (var _i = 0, _targets = targets; _i < _targets.length; _i++) {
      var target = _targets[_i];
      var container = $(target);
      if (!container.find('img').length) {
        container.find('span').hide();
        container.append("<img src=\"".concat(img, "\" data-id=\"").concat(card_id, "\" data-rank=\"").concat(card_rank, "\">"));
        $(this).hide();
        break;
      }
    }
    var rank = $('.card-upgrade__wrapper img').first().attr('data-rank');
    $('.card-upgrade__result').attr('data-rank', rank);
    $('.card-upgrade__start-btn').toggle($('.card-upgrade__wrapper img').length == 3);
  });
  $('body').on('click', '.card-upgrade__item img', function () {
    var data_id = $(this).attr('data-id');
    $('.card-upgrade__inventory-item[data-id="' + data_id + '"]').show();
    $(this).siblings('span').show();
    $(this).remove();
    $('.card-upgrade__start-btn').toggle($('.card-upgrade__wrapper img').length == 3);
  });
}

/***/ }),

/***/ "./resources/js/modules/cbgDecksModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/cbgDecksModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCbgDecks": () => (/* binding */ initializeCbgDecks)
/* harmony export */ });
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// resources/js/modules/cbgDecks.js
function initializeCbgDecks() {
  var _document$querySelect;
  var root = document.querySelector('.cbg-decks-wrap');
  if (!root) return;

  // элементы справа
  var listEl = document.getElementById('cbg-decks-list');
  var slotsEl = document.getElementById('cbg-deck-slots');
  var nameEl = document.getElementById('cbg-deck-name');
  var btnNew = document.getElementById('cbg-deck-new');
  var btnRename = document.getElementById('cbg-deck-rename');
  var btnDelete = document.getElementById('cbg-deck-delete');
  var btnSave = document.getElementById('cbg-deck-save');
  var btnSetActive = document.getElementById('cbg-deck-setactive');

  // блок с редактором (всё, что ниже списка)
  var editorWrap = document.querySelector('.cbg-deck-editor');
  var sepEl = document.querySelector('.cbg-sep');

  // инвентарь слева
  var inventory = document.querySelector('.card-inventory-container--cbg-decks');

  // окружение
  var csrf = ((_document$querySelect = document.querySelector('meta[name="csrf-token"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.content) || '';

  // состояние
  var decks = [];
  var currentDeckId = null;
  var slotValues = [null, null, null, null, null]; // card_user_id по позициям
  var imgByCardUser = new Map(); // card_user_id -> img url

  // ===== утиль =====
  var toast = function toast(m) {
    var _window$toastr;
    if ((_window$toastr = window.toastr) !== null && _window$toastr !== void 0 && _window$toastr.success) toastr.success(m);else alert(m);
  };
  var terr = function terr(m) {
    var _window$toastr2;
    if ((_window$toastr2 = window.toastr) !== null && _window$toastr2 !== void 0 && _window$toastr2.error) toastr.error(m);else alert(m);
  };
  function parseError(_x) {
    return _parseError.apply(this, arguments);
  }
  function _parseError() {
    _parseError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(r) {
      var msg, j, f;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              msg = "HTTP ".concat(r.status);
              _context.prev = 1;
              _context.next = 4;
              return r.json();
            case 4:
              j = _context.sent;
              if (j !== null && j !== void 0 && j.message) msg = j.message;
              if (j !== null && j !== void 0 && j.errors && _typeof(j.errors) === 'object') {
                f = Object.values(j.errors)[0];
                if (Array.isArray(f) && f[0]) msg = f[0];
              }
              _context.next = 11;
              break;
            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](1);
            case 11:
              return _context.abrupt("return", msg);
            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 9]]);
    }));
    return _parseError.apply(this, arguments);
  }
  function api(_x2, _x3, _x4) {
    return _api.apply(this, arguments);
  }
  function _api() {
    _api = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, url, data) {
      var opt, r;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              opt = {
                method: method,
                headers: {
                  'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
              };
              if (csrf) opt.headers['X-CSRF-TOKEN'] = csrf;
              if (data !== undefined) {
                opt.headers['Content-Type'] = 'application/json';
                opt.body = JSON.stringify(data);
              }
              _context2.next = 5;
              return fetch(url, opt);
            case 5:
              r = _context2.sent;
              if (r.ok) {
                _context2.next = 12;
                break;
              }
              _context2.t0 = Error;
              _context2.next = 10;
              return parseError(r);
            case 10:
              _context2.t1 = _context2.sent;
              throw new _context2.t0(_context2.t1);
            case 12:
              _context2.next = 14;
              return r.json()["catch"](function () {
                return {};
              });
            case 14:
              return _context2.abrupt("return", _context2.sent);
            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _api.apply(this, arguments);
  }
  var get = function get(u) {
    return api('GET', u);
  };
  var post = function post(u, d) {
    return api('POST', u, d);
  };
  var patch = function patch(u, d) {
    return api('PATCH', u, d);
  };
  var del = function del(u) {
    return api('DELETE', u);
  };

  // собрать карту card_user_id -> img из текущего DOM инвентаря
  function harvestInventoryImages() {
    if (!inventory) return;
    var cards = inventory.querySelectorAll('.card-filter-list__card');
    cards.forEach(function (c) {
      var _c$querySelector;
      var id = Number(c.dataset.id || 0);
      var img = ((_c$querySelector = c.querySelector('img')) === null || _c$querySelector === void 0 ? void 0 : _c$querySelector.getAttribute('src')) || null;
      if (id && img) imgByCardUser.set(id, img);
    });
  }
  harvestInventoryImages();

  // следим за изменениями инвентаря (подгрузка страниц, фильтры)
  if (inventory && 'MutationObserver' in window) {
    var mo = new MutationObserver(function () {
      harvestInventoryImages();
      renderSlots(); // обновим фон там, где были плейсхолдеры
    });

    mo.observe(inventory, {
      childList: true,
      subtree: true
    });
  }

  // ===== управление видимостью редактора =====
  function setEditorVisible(show) {
    // редактор и разделительная линия
    if (editorWrap) editorWrap.classList.toggle('cbg-hidden', !show);
    if (sepEl) sepEl.classList.toggle('cbg-hidden', !show);

    // отключим/включим контролы, чтобы не ловить случайные клики tab-ом
    [nameEl, btnRename, btnDelete, btnSave, btnSetActive].forEach(function (el) {
      if (!el) return;
      el.disabled = !show;
      // для input — ещё и placeholder
      if (el === nameEl && !show) el.value = '';
    });

    // очистим слоты визуально, если скрываем
    if (!show) {
      slotValues = [null, null, null, null, null];
      renderSlots();
    }
  }

  // пустой стейт в списке
  function renderEmptyList() {
    if (!listEl) return;
    listEl.innerHTML = "\n      <div class=\"cbg-empty\">\n        <div class=\"cbg-empty__title\">\u041A\u043E\u043B\u043E\u0434\u044B \u043F\u043E\u043A\u0430 \u043D\u0435 \u0441\u043E\u0437\u0434\u0430\u043D\u044B</div>\n        <div class=\"cbg-empty__sub\">\u0421\u043E\u0437\u0434\u0430\u0439 \u043F\u0435\u0440\u0432\u0443\u044E \u043A\u043E\u043B\u043E\u0434\u0443 \u0438 \u0434\u043E\u0431\u0430\u0432\u044C \u0432 \u043D\u0435\u0451 \u0434\u043E 5 \u043F\u0440\u043E\u043A\u0430\u0447\u0430\u043D\u043D\u044B\u0445 \u043A\u0430\u0440\u0442.</div>\n        <button class=\"cbg-btn\" id=\"cbg-empty-create\">+ \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043A\u043E\u043B\u043E\u0434\u0443</button>\n      </div>\n    ";
    var b = document.getElementById('cbg-empty-create');
    if (b) b.addEventListener('click', function (e) {
      e.preventDefault();
      createDeck();
    });
  }

  // ===== рендер списка колод =====
  function renderList() {
    if (!listEl) return;
    if (!decks.length) {
      renderEmptyList();
      return;
    }
    listEl.innerHTML = '';
    decks.forEach(function (d) {
      var row = document.createElement('div');
      row.className = 'cbg-deck-row' + (d.is_active ? ' cbg-deck-row--active' : '');
      row.innerHTML = "\n        <div class=\"cbg-deck-row__name\" title=\"".concat(escapeHtml(d.name), "\">").concat(escapeHtml(d.name), "</div>\n        <div class=\"cbg-deck-row__btns\">\n          <button class=\"cbg-btn\" data-act=\"open\">\u041E\u0442\u043A\u0440\u044B\u0442\u044C</button>\n        </div>");
      row.addEventListener('click', function (e) {
        var _e$target, _e$target$dataset;
        if (((_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$dataset = _e$target.dataset) === null || _e$target$dataset === void 0 ? void 0 : _e$target$dataset.act) === 'open') openDeck(d.id);
      });
      listEl.appendChild(row);
    });
  }

  // ===== открыть колоду в редакторе =====
  function openDeck(id) {
    var d = decks.find(function (x) {
      return x.id === id;
    });
    if (!d) return;
    currentDeckId = id;
    if (nameEl) nameEl.value = d.name;
    slotValues = [null, null, null, null, null];
    (d.slots || []).forEach(function (s) {
      if (s && Number.isInteger(s.pos) && s.pos >= 0 && s.pos < 5) {
        slotValues[s.pos] = Number(s.card_user_id);
        if (s.img) imgByCardUser.set(Number(s.card_user_id), s.img);
      }
    });

    // кнопка "Сделать активной" недоступна, если уже активна
    if (btnSetActive) btnSetActive.disabled = !!d.is_active;
    setEditorVisible(true);
    renderSlots();
  }

  // ===== рендер 5 слотов =====
  function renderSlots() {
    if (!slotsEl) return;
    slotsEl.querySelectorAll('.cbg-deck-slot').forEach(function (slot) {
      var pos = Number(slot.dataset.pos);
      var cu = slotValues[pos] || null;
      var img = cu ? imgByCardUser.get(cu) || '/assets/card-placeholder.jpg' : null;
      slot.classList.toggle('cbg-deck-slot--empty', !cu);
      var box = slot.querySelector('.cbg-deck-slot__img');
      if (box) box.style.backgroundImage = cu ? "url(\"".concat(img, "\")") : 'none';
    });
  }

  // ===== действия =====
  function loadDecks() {
    return _loadDecks.apply(this, arguments);
  }
  function _loadDecks() {
    _loadDecks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var res, active;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return get('/cbg/decks');
            case 3:
              res = _context3.sent;
              decks = Array.isArray(res === null || res === void 0 ? void 0 : res.decks) ? res.decks : [];
              renderList();
              if (decks.length) {
                _context3.next = 10;
                break;
              }
              currentDeckId = null;
              setEditorVisible(false); // скрываем всё, если колод нет
              return _context3.abrupt("return");
            case 10:
              // если есть открытая — переоткроем; иначе — активную или первую
              if (currentDeckId && decks.some(function (d) {
                return d.id === currentDeckId;
              })) {
                openDeck(currentDeckId);
              } else {
                active = decks.find(function (d) {
                  return d.is_active;
                }) || decks[0];
                openDeck(active.id);
              }
              _context3.next = 17;
              break;
            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](0);
              terr(_context3.t0.message || 'Не удалось загрузить колоды');
              // даже при ошибке не показываем редактор
              setEditorVisible(false);
            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[0, 13]]);
    }));
    return _loadDecks.apply(this, arguments);
  }
  function createDeck() {
    return _createDeck.apply(this, arguments);
  }
  function _createDeck() {
    _createDeck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var name;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              name = prompt('Название колоды:', 'Колода');
              if (name) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return");
            case 3:
              _context4.prev = 3;
              _context4.next = 6;
              return post('/cbg/decks', {
                name: name.trim()
              });
            case 6:
              _context4.next = 8;
              return loadDecks();
            case 8:
              toast('Колода создана');
              _context4.next = 14;
              break;
            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](3);
              terr(_context4.t0.message || 'Не удалось создать колоду');
            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[3, 11]]);
    }));
    return _createDeck.apply(this, arguments);
  }
  function renameDeck() {
    return _renameDeck.apply(this, arguments);
  }
  function _renameDeck() {
    _renameDeck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var name;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (currentDeckId) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              name = ((nameEl === null || nameEl === void 0 ? void 0 : nameEl.value) || '').trim();
              if (name) {
                _context5.next = 5;
                break;
              }
              return _context5.abrupt("return");
            case 5:
              _context5.prev = 5;
              _context5.next = 8;
              return patch("/cbg/decks/".concat(currentDeckId), {
                name: name
              });
            case 8:
              _context5.next = 10;
              return loadDecks();
            case 10:
              toast('Название сохранено');
              _context5.next = 16;
              break;
            case 13:
              _context5.prev = 13;
              _context5.t0 = _context5["catch"](5);
              terr(_context5.t0.message || 'Не удалось переименовать');
            case 16:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[5, 13]]);
    }));
    return _renameDeck.apply(this, arguments);
  }
  function deleteDeck() {
    return _deleteDeck.apply(this, arguments);
  }
  function _deleteDeck() {
    _deleteDeck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (currentDeckId) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              if (confirm('Удалить колоду?')) {
                _context6.next = 4;
                break;
              }
              return _context6.abrupt("return");
            case 4:
              _context6.prev = 4;
              _context6.next = 7;
              return del("/cbg/decks/".concat(currentDeckId));
            case 7:
              currentDeckId = null;
              _context6.next = 10;
              return loadDecks();
            case 10:
              toast('Колода удалена');
              _context6.next = 16;
              break;
            case 13:
              _context6.prev = 13;
              _context6.t0 = _context6["catch"](4);
              terr(_context6.t0.message || 'Не удалось удалить');
            case 16:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[4, 13]]);
    }));
    return _deleteDeck.apply(this, arguments);
  }
  function saveSlots() {
    return _saveSlots.apply(this, arguments);
  }
  function _saveSlots() {
    _saveSlots = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var ids;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (currentDeckId) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return");
            case 2:
              ids = slotValues.filter(Boolean);
              _context7.prev = 3;
              _context7.next = 6;
              return post("/cbg/decks/".concat(currentDeckId, "/slots/save"), {
                card_user_ids: ids
              });
            case 6:
              _context7.next = 8;
              return loadDecks();
            case 8:
              toast('Состав сохранён');
              _context7.next = 14;
              break;
            case 11:
              _context7.prev = 11;
              _context7.t0 = _context7["catch"](3);
              terr(_context7.t0.message || 'Не удалось сохранить');
            case 14:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[3, 11]]);
    }));
    return _saveSlots.apply(this, arguments);
  }
  function setActive() {
    return _setActive.apply(this, arguments);
  } // добавление из инвентаря
  function _setActive() {
    _setActive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (currentDeckId) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _context8.prev = 2;
              _context8.next = 5;
              return patch("/cbg/decks/".concat(currentDeckId), {
                is_active: true
              });
            case 5:
              _context8.next = 7;
              return loadDecks();
            case 7:
              openDeck(currentDeckId);
              toast('Сделана активной');
              _context8.next = 14;
              break;
            case 11:
              _context8.prev = 11;
              _context8.t0 = _context8["catch"](2);
              terr(_context8.t0.message || 'Не удалось активировать');
            case 14:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, null, [[2, 11]]);
    }));
    return _setActive.apply(this, arguments);
  }
  function addFromInventory(cardEl) {
    var _cardEl$dataset, _cardEl$querySelector;
    // если редактор скрыт — нечего добавлять (нет колод)
    if (editorWrap !== null && editorWrap !== void 0 && editorWrap.classList.contains('cbg-hidden')) {
      terr('Сначала создайте колоду.');
      return;
    }
    var id = Number((cardEl === null || cardEl === void 0 ? void 0 : (_cardEl$dataset = cardEl.dataset) === null || _cardEl$dataset === void 0 ? void 0 : _cardEl$dataset.id) || 0); // card_user.id
    if (!id) return;
    var img = ((_cardEl$querySelector = cardEl.querySelector('img')) === null || _cardEl$querySelector === void 0 ? void 0 : _cardEl$querySelector.getAttribute('src')) || null;
    if (img) imgByCardUser.set(id, img);
    // без дублей
    if (slotValues.includes(id)) return;
    // первая пустая
    var pos = slotValues.findIndex(function (v) {
      return v == null;
    });
    if (pos === -1) {
      terr('В колоде уже 5 карт.');
      return;
    }
    slotValues[pos] = id;
    renderSlots();
  }

  // очистка слота
  function clearSlot(pos) {
    if (pos < 0 || pos > 4) return;
    slotValues[pos] = null;
    renderSlots();
  }

  // ===== события UI =====
  if (btnNew) btnNew.addEventListener('click', function (e) {
    e.preventDefault();
    createDeck();
  });
  if (btnRename) btnRename.addEventListener('click', function (e) {
    e.preventDefault();
    renameDeck();
  });
  if (btnDelete) btnDelete.addEventListener('click', function (e) {
    e.preventDefault();
    deleteDeck();
  });
  if (btnSave) btnSave.addEventListener('click', function (e) {
    e.preventDefault();
    saveSlots();
  });
  if (btnSetActive) btnSetActive.addEventListener('click', function (e) {
    e.preventDefault();
    setActive();
  });

  // клики по слотам (крестик)
  if (slotsEl) {
    slotsEl.addEventListener('click', function (e) {
      var rm = e.target.closest('.cbg-deck-slot__remove');
      if (rm) {
        var _slot$dataset;
        var slot = rm.closest('.cbg-deck-slot');
        var pos = Number(slot === null || slot === void 0 ? void 0 : (_slot$dataset = slot.dataset) === null || _slot$dataset === void 0 ? void 0 : _slot$dataset.pos);
        if (Number.isInteger(pos)) clearSlot(pos);
        return;
      }
    });
  }

  // клики по карточкам инвентаря
  if (inventory) {
    inventory.addEventListener('click', function (e) {
      var card = e.target.closest('.card-filter-list__card');
      if (!card) return;
      addFromInventory(card);
    });
  }

  // старт: сначала полностью скрываем редактор, потом грузим
  setEditorVisible(false);
  loadDecks()["catch"](function (e) {
    return terr(e.message || 'Не удалось загрузить колоды');
  });

  // helpers
  function escapeHtml(s) {
    return String(s !== null && s !== void 0 ? s : '').replace(/[&<>"']/g, function (m) {
      return {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      }[m];
    });
  }
}

/***/ }),

/***/ "./resources/js/modules/cbgForgeModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/cbgForgeModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCbgForge": () => (/* binding */ initializeCbgForge)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeCbgForge() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var pathUrl = (window.location.pathname || '').replace(/\/+$/, '');
  if (pathUrl !== '/card-game/forge') return;
  var $root = $(options.rootSelector || '#cgf');
  var $forgePanel = $('#forge-panel');
  var $inventoryWrap = $('#forge-inventory');
  var $selectBlock = $('#forge-select');
  var $btnBack = $('#cgf-back');
  if (!$root.length) return;
  var cfg = {
    cardUserId: $root.data('card-user-id') || null,
    prices: {
      base: options.prices && options.prices.base ? options.prices.base : 50,
      upg: options.prices && options.prices.upgrade ? options.prices.upgrade : 10,
      reset: options.prices && options.prices.reset ? options.prices.reset : 250
    }
  };

  // DOM refs
  var $lvl = $('#cgf-level'),
    $lvlMax = $('#cgf-level-max'),
    $lvlBar = $('#cgf-levelbar');
  var $scoreHead = $('#cgf-score-head'),
    $score = $('#cgf-score');
  var $cardIdTitle = $('#cgf-card-id'),
    $poster = $('#cgf-poster');
  var $atk = $('#cgf-atk'),
    $atkB = $('#cgf-atk-base');
  var $hp = $('#cgf-hp'),
    $hpB = $('#cgf-hp-base');
  var $arm = $('#cgf-arm'),
    $armB = $('#cgf-arm-base'); // DEF → ARM (UI)
  var $pen = $('#cgf-pen'),
    $penB = $('#cgf-pen-base');
  var $affixes = $('#cgf-affixes');
  var $empty = $('#cgf-empty');
  var $basePanel = $('#cgf-base');
  var $upgPanel = $('#cgf-upg');
  var $pBase = $('#cgf-price-base');
  var $pUpg = $('#cgf-price-upg');
  var $btnBase = $('#cgf-btn-base');
  var $btnUpg = $('#cgf-btn-upg');
  var $btnReset = $('#cgf-btn-reset');
  $pBase.text(nf(cfg.prices.base));
  $pUpg.text(nf(cfg.prices.upg));

  // описание аффиксов (для tooltip)
  var DESCR = {
    crit_chance: 'Шанс критического удара.',
    crit_damage: 'Добавочный множитель урона крита.',
    cleave: 'Урон по соседним целям (% от ATK).',
    ignore_armor: 'Дополнительно игнорирует часть брони цели (с PEN суммарно ≤ 80%).',
    pierce_true: 'Доп. истинный урон от ATK (не режется бронёй).',
    execute: 'Бонус урона по целям с HP < 50%.',
    lifesteal: 'Лечение от нанесённого урона.',
    guard: 'Постоянная редукция входящего урона после брони.',
    thorns: 'Отражение части финального входящего урона.',
    second_wind: 'Лечение % от макс. HP при убийстве цели.',
    ambush: 'Первый удар по цели наносит доп. урон.',
    shield_break: 'Повышенный урон по щитам.'
  };

  // CSRF + ajax глобальные выключаем
  var csrf = $('meta[name="csrf-token"]').attr('content') || '';
  $.ajaxSetup({
    headers: {
      'X-CSRF-TOKEN': csrf
    }
  });
  function get(url) {
    return $.ajax({
      method: 'GET',
      url: url,
      dataType: 'json',
      global: false
    });
  }
  function post(url) {
    return $.ajax({
      method: 'POST',
      url: url,
      dataType: 'json',
      global: false
    });
  }

  // === Выбор карты из инвентаря ===
  $inventoryWrap.off('click.forge').on('click.forge', '.card-filter-list__card', function () {
    var $card = $(this);
    var id = Number($card.data('id') || 0); // card_user.id
    if (!id) return;
    var img = $card.find('img').attr('src') || '/assets/card-placeholder.jpg';
    enterForge(id, img);
  });

  // Кнопка «Выбрать другую карту»
  $btnBack.off('click.forge').on('click.forge', function () {
    leaveForge();
  });
  function enterForge(cardUserId, imgSrc) {
    cfg.cardUserId = cardUserId;
    $root.attr('data-card-user-id', cardUserId);
    $cardIdTitle.text(cardUserId);
    $poster.css('background-image', 'url("' + (imgSrc || '/assets/card-placeholder.jpg') + '")');

    // показать кузницу, скрыть инвентарь и подсказку
    $inventoryWrap.hide();
    $selectBlock.hide();
    $forgePanel.show();

    // загрузить текущий билд/аффиксы
    apiStatus();
  }
  function leaveForge() {
    cfg.cardUserId = null;
    $root.attr('data-card-user-id', '');
    resetForgeUI();
    $forgePanel.hide();
    $inventoryWrap.show();
    $selectBlock.show();
  }

  // начальный вид — только инвентарь/приглашение
  leaveForge();

  // === API ===
  function apiStatus() {
    if (!cfg.cardUserId) return;
    get('/forge/' + cfg.cardUserId + '/status').done(renderFromServer).fail(handleErr);
  }
  function apiRollBase() {
    if (!cfg.cardUserId) return;
    disableBtns(true);
    post('/forge/' + cfg.cardUserId + '/roll-base').done(renderFromServer).fail(handleErr).always(function () {
      disableBtns(false);
    });
  }
  function apiUpgrade() {
    if (!cfg.cardUserId) return;
    disableBtns(true);
    post('/forge/' + cfg.cardUserId + '/upgrade').done(renderFromServer).fail(handleErr).always(function () {
      disableBtns(false);
    });
  }
  function apiReset() {
    if (!cfg.cardUserId) return;
    if (!confirm('Полный сброс? Удалит базу и аффиксы.')) return;
    disableBtns(true);
    post('/forge/' + cfg.cardUserId + '/reset').done(renderFromServer).fail(handleErr).always(function () {
      disableBtns(false);
    });
  }

  // === UI helpers ===
  function nf(n) {
    return Math.round(Number(n) || 0).toLocaleString('ru-RU');
  }
  function clamp(v, min, max) {
    return Math.max(min, Math.min(max, v));
  }
  function setBar($el, p) {
    $el.css('width', clamp(Math.round(p), 0, 100) + '%');
  }
  function path(d) {
    return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none"><path d="' + d + '" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>';
  }
  function disableBtns(flag) {
    $('#cgf-btn-base, #cgf-btn-upg, #cgf-btn-reset').prop('disabled', flag);
  }
  function bump(stat, amount) {
    $root.find('.cgf__stat').removeClass('cgf__stat--bumped').find('.cgf__delta').remove();
    if (!stat || !amount) return;
    var uiKey = stat === 'def' ? 'arm' : stat;
    var $box = $root.find('.cgf__stat[data-k="' + uiKey + '"]');
    if (!$box.length) return;
    var suf = uiKey === 'arm' || uiKey === 'pen' ? ' п.п.' : '';
    $box.addClass('cgf__stat--bumped').append('<div class="cgf__delta">+' + amount + '' + suf + '</div>');
  }
  function renderFromServer(payload) {
    var b = payload && payload.build ? payload.build : null;
    var aff = payload && payload.affixes && payload.affixes.length ? payload.affixes : [];
    if (b) {
      $atk.text(b.atk);
      $atkB.text(b.atk_base);
      $hp.text(b.hp);
      $hpB.text(b.hp_base);
      $arm.text(b.def);
      $armB.text(b.def_base); // DEF → ARM
      $pen.text(b.pen);
      $penB.text(b.pen_base);
      $lvl.text(b.forge_level);
      $lvlMax.text(b.forge_level_max);
      setBar($lvlBar, b.forge_level_max ? b.forge_level / b.forge_level_max * 100 : 0);
      $score.text(b.score || 0);
      $scoreHead.text(b.score || 0);
      $basePanel.hide();
      $upgPanel.show();
      $empty.hide();
    } else {
      // нет билда — показываем стартовый ролл
      resetStatsToZero();
      $basePanel.show();
      $upgPanel.hide();
      $empty.show();
    }
    renderAffixes(aff);
    var bumpEv = payload && payload.events ? payload.events.bump : null;
    if (bumpEv && bumpEv.amount > 0) {
      bump(String(bumpEv.stat || ''), Number(bumpEv.amount || 0));
    }
    var ms = payload && payload.events ? payload.events.milestone : null;
    if (ms && window.toastr && toastr.success) {
      if (ms.type === 'add') toastr.success('Новый аффикс: ' + ms.name + ' ' + ms.value);else if (ms.type === 'upgrade') toastr.success('Аффикс улучшен: ' + ms.name + ' (' + ms.value + ')');
    }
  }
  function renderAffixes(list) {
    if (!list || !list.length) {
      $affixes.html('<div class="cgf__empty">Аффиксов пока нет.</div>');
      return;
    }
    var icon = {
      star: path("M12 2l3 7h7l-5 5 2 7-7-4-7 4 2-7-5-5h7z"),
      boom: path("M2 12l6-2-2-6 6 2 2-6 2 6 6-2-2 6 6 2-6 2 2 6-6-2-2 6-2-6-6 2 2-6z"),
      heart: path("M20.8 4.6a4.9 4.9 0 0 0-6.9 0L12 6.5 10.1 4.6a4.9 4.9 0 0 0-6.9 0 4.9 4.9 0 0 0 0 6.9L12 22l8.8-10.5a4.9 4.9 0 0 0 0-6.9z"),
      shield: path("M12 2l8 5v7a8 8 0 0 1-16 0V7l8-5z"),
      wave: path("M2 12c2-2 4-2 6 0s4 2 6 0 4-2 6 0"),
      arrow: path("M5 12h14M12 5l7 7-7 7"),
      target: path("M12 22a10 10 0 1 1 10-10M12 2v4M2 12h4M12 18v4M18 12h4"),
      drop: path("M12 2C8 8 6 10 6 13a6 6 0 0 0 12 0c0-3-2-5-6-11z"),
      fire: path("M12 2c4 5 6 7 6 11a6 6 0 0 1-12 0c0-2 1-4 3-6 0 3 2 4 3 4 0-2 0-5 0-9z"),
      ring: path("M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20zm0 4a6 6 0 1 1 0 12 6 6 0 0 1 0-12z"),
      spark: path("M12 2v6m0 8v6M2 12h6m8 0h6M5 5l4 4M15 15l4 4M19 5l-4 4M9 15l-4 4")
    };
    function affIcon(k) {
      if (k === 'crit_chance') return icon.star;
      if (k === 'crit_damage') return icon.boom;
      if (k === 'lifesteal') return icon.heart;
      if (k === 'guard') return icon.shield;
      if (k === 'cleave') return icon.wave;
      if (k === 'pierce_true') return icon.arrow;
      if (k === 'execute') return icon.target;
      if (k === 'second_wind') return icon.ring;
      if (k === 'shield_break') return icon.shield;
      if (k === 'ignore_armor') return icon.arrow;
      if (k === 'ambush') return icon.spark;
      if (k === 'thorns') return icon.drop;
      return icon.spark;
    }
    var html = list.map(function (a) {
      var unit = a.unit || '';
      var tip = DESCR[a.key] || 'Аффикс';
      return '' + '<div class="af">' + '<div class="af__icon">' + affIcon(a.key) + '</div>' + '<div class="af__text">' + '<div class="af__name">' + a.name + '</div>' + '<div class="tip">' + '<div class="tip__btn">i</div>' + '<div class="tip__bubble">' + tip + '<div class="tip__arrow"></div></div>' + '</div>' + '</div>' + '<div class="af__val">' + '<div class="af__v">+' + a.value + '</div>' + /*'<div class="af__u">'+(unit||'')+'</div>'+*/
      '</div>' + '</div>';
    }).join('');
    $affixes.html(html);
  }
  function resetStatsToZero() {
    $atk.text(0);
    $atkB.text(0);
    $hp.text(0);
    $hpB.text(0);
    $arm.text(0);
    $armB.text(0);
    $pen.text(0);
    $penB.text(0);
    $lvl.text(0);
    $lvlMax.text(20);
    setBar($lvlBar, 0);
    $score.text(0);
    $scoreHead.text(0);
    $root.find('.cgf__stat').removeClass('cgf__stat--bumped').find('.cgf__delta').remove();
    $affixes.html('<div class="cgf__empty">Аффиксов пока нет.</div>');
  }
  function resetForgeUI() {
    $cardIdTitle.text('—');
    $poster.css('background-image', 'url("/assets/card-placeholder.jpg")');
    resetStatsToZero();
    $basePanel.show();
    $upgPanel.hide();
    $empty.show();
  }

  // tips
  $affixes.on('click', '.tip__btn', function (e) {
    e.stopPropagation();
    var $t = $(this).closest('.tip');
    $('.tip').not($t).removeClass('is-open');
    $t.toggleClass('is-open');
  });
  $(document).on('click', function () {
    $('.tip').removeClass('is-open');
  });

  // кнопки действий (namespaced, чтобы не было дубля)
  $('#cgf-btn-base').off('click.forge').on('click.forge', apiRollBase);
  $('#cgf-btn-upg').off('click.forge').on('click.forge', apiUpgrade);
  $('#cgf-btn-reset').off('click.forge').on('click.forge', apiReset);
  function handleErr(xhr) {
    var msg = 'Ошибка запроса';
    if (xhr && xhr.responseJSON && xhr.responseJSON.message) msg = xhr.responseJSON.message;
    try {
      console.error('[Forge]', msg, xhr);
    } catch (e) {}
    // тост показывается глобальным обработчиком ajaxError — здесь не дублируем
  }
}

/***/ }),

/***/ "./resources/js/modules/cbgIndexModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/cbgIndexModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCbgIndex": () => (/* binding */ initializeCbgIndex)
/* harmony export */ });
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");
// resources/js/modules/cbgIndex.js

function initializeCbgIndex() {
  var _document$querySelect;
  var path = (location.pathname || '').replace(/\/+$/, '');
  // работаем ТОЛЬКО на /card-game и /card-game/
  if (!/^\/card-game\/?$/.test(path)) return;

  // UI
  var btnStart = document.getElementById('cbg-queue-start'); // твоя кнопка «Начать поиск»
  var btnCancel = document.getElementById('cbg-queue-cancel'); // «Отменить поиск»
  var statusEl = document.getElementById('cbg-queue-status'); // подпись/состояние
  if (!btnStart || !btnCancel || !statusEl) return;

  // окружение
  var MY_ID = Number(window.user_id || 0);
  var csrf = ((_document$querySelect = document.querySelector('meta[name="csrf-token"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.content) || '';

  // ajax-хелперы (jQuery у тебя уже есть)
  var get = function get(url) {
    return $.ajax({
      method: 'GET',
      url: url,
      dataType: 'json',
      headers: {
        'X-CSRF-TOKEN': csrf
      },
      global: false
    });
  };
  var post = function post(url, data) {
    return $.ajax({
      method: 'POST',
      url: url,
      dataType: 'json',
      data: data || {},
      headers: {
        'X-CSRF-TOKEN': csrf
      },
      global: false
    });
  };

  // локальное состояние
  var searching = false;
  var pollTimer = null;
  var socketsReady = false;

  // persistent (пережить F5)
  var LS_KEY = 'cbg_queue_searching';
  var saveSearchFlag = function saveSearchFlag(on) {
    try {
      localStorage.setItem(LS_KEY, on ? '1' : '0');
    } catch (_) {}
  };
  var loadSearchFlag = function loadSearchFlag() {
    try {
      return localStorage.getItem(LS_KEY) === '1';
    } catch (_) {
      return false;
    }
  };

  // UI helpers
  function setSearching(on, note) {
    searching = !!on;
    saveSearchFlag(searching);
    btnStart.style.display = searching ? 'none' : '';
    btnCancel.style.display = searching ? '' : 'none';
    statusEl.style.display = searching ? '' : 'none';
    if (note) statusEl.textContent = note;
    if (!searching) statusEl.textContent = '';
  }
  function showQueueCount(n) {
    if (!searching) return;
    statusEl.textContent = "\u0418\u0449\u0435\u043C \u0441\u043E\u043F\u0435\u0440\u043D\u0438\u043A\u0430\u2026 \u0412 \u043E\u0447\u0435\u0440\u0435\u0434\u0438: ".concat(Number(n || 0));
  }
  function redirectToBattle(id, url) {
    var href = url || (id ? "/card-game/play/".concat(id) : null);
    if (href) window.location.href = href;
  }
  function toastOk(msg) {
    var _window$toastr;
    if ((_window$toastr = window.toastr) !== null && _window$toastr !== void 0 && _window$toastr.success) toastr.success(msg);
  }
  function toastErr(msg) {
    var _window$toastr2;
    if ((_window$toastr2 = window.toastr) !== null && _window$toastr2 !== void 0 && _window$toastr2.error) toastr.error(msg);
  }

  // ===== Сокеты (комната = текущий URL /card-game) =====
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    socketsReady = true;

    // матч найден -> оба участника мгновенно улетают в бой
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('match_found', function (raw) {
      var c = unwrap(raw);
      if (!c) return;
      // если мы один из назначенных участников
      var users = Array.isArray(c.users) ? c.users.map(Number) : [];
      if (users.includes(MY_ID)) {
        setSearching(false);
        redirectToBattle(c.battle_id, c.url);
      }
    });

    // обновление размера очереди (для статуса)
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('queue_update', function (raw) {
      var c = unwrap(raw);
      if (!c) return;
      showQueueCount(c.queue_count);
    });

    // сервер отменил поиск (напр., не прошла валидация)
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('search_cancelled', function (raw) {
      var c = unwrap(raw);
      if (c !== null && c !== void 0 && c.user_id && Number(c.user_id) !== MY_ID) return;
      stopPolling();
      setSearching(false);
      toastErr((c === null || c === void 0 ? void 0 : c.reason) || 'Поиск отменён');
    });
  }

  // ===== Поллинг (fallback, если сокеты не долетают) =====
  function pollJoin() {
    // сервер сам держит в очереди и при матчапе вернёт matched_battle_id
    post('/battle/queue/join').done(function (res) {
      if (res && res.matched_battle_id) {
        stopPolling();
        setSearching(false);
        redirectToBattle(res.matched_battle_id);
      } else if (res && typeof res.queue_count !== 'undefined') {
        showQueueCount(res.queue_count);
      }
    }).fail(function (xhr) {
      var _xhr$responseJSON;
      stopPolling();
      setSearching(false);
      var msg = (xhr === null || xhr === void 0 ? void 0 : (_xhr$responseJSON = xhr.responseJSON) === null || _xhr$responseJSON === void 0 ? void 0 : _xhr$responseJSON.message) || 'Ошибка поиска матча';
      toastErr(msg);
    });
  }
  function startPolling() {
    stopPolling();
    // если сокеты есть — оставим редкий «тихий» поллинг как сетевой бэкап
    var interval = socketsReady ? 5000 : 2000;
    pollJoin();
    pollTimer = setInterval(pollJoin, interval);
  }
  function stopPolling() {
    if (pollTimer) {
      clearInterval(pollTimer);
      pollTimer = null;
    }
  }

  // ===== Действия =====
  function startSearch() {
    setSearching(true, 'Ищем соперника…');
    // один вызов — чтобы сервер точно поставил в очередь
    post('/battle/queue/join').done(function (res) {
      // если прямо сейчас уже состыковали — летим
      if (res && res.matched_battle_id) {
        setSearching(false);
        redirectToBattle(res.matched_battle_id);
        return;
      }
      // обновим статус очереди
      if (res && typeof res.queue_count !== 'undefined') {
        showQueueCount(res.queue_count);
      }
      // запустим резервный поллинг (на случай, если сокеты не работают)
      startPolling();
      toastOk('Поиск начат');
    }).fail(function (xhr) {
      var _xhr$responseJSON2;
      setSearching(false);
      var msg = (xhr === null || xhr === void 0 ? void 0 : (_xhr$responseJSON2 = xhr.responseJSON) === null || _xhr$responseJSON2 === void 0 ? void 0 : _xhr$responseJSON2.message) || 'Не удалось начать поиск';
      toastErr(msg);
    });
  }
  function cancelSearch() {
    stopPolling();
    post('/battle/queue/leave').always(function () {
      setSearching(false);
      toastOk('Поиск остановлен');
    });
  }

  // ===== События кнопок =====
  btnStart.addEventListener('click', function (e) {
    e.preventDefault();
    if (!searching) startSearch();
  });
  btnCancel.addEventListener('click', function (e) {
    e.preventDefault();
    if (searching) cancelSearch();
  });

  // Покинуть очередь при закрытии вкладки (если нужно)
  window.addEventListener('beforeunload', function () {
    if (searching && navigator.sendBeacon) {
      try {
        navigator.sendBeacon('/battle/queue/leave');
      } catch (e) {}
    }
  });

  // ===== Bootstrap при заходе на /card-game =====
  function bootstrap() {
    get('/battle/queue/status').done(function (st) {
      // если уже есть активный бой — сразу переход
      if (st && st.active_battle_id) {
        redirectToBattle(st.active_battle_id);
        return;
      }
      // сервер говорит, что мы уже стоим в очереди
      if (st && st.queued) {
        setSearching(true, 'Ищем соперника…');
        if (typeof st.queue_count !== 'undefined') showQueueCount(st.queue_count);
        startPolling(); // сокеты могут не прилететь моментально
        return;
      }
      // если сервер сказал "не в очереди", но локально висит флаг — очистим
      if (loadSearchFlag()) saveSearchFlag(false);
      setSearching(false);
    }).fail(function () {
      // если сервер недоступен — опираемся на локальный флаг
      if (loadSearchFlag()) {
        setSearching(true, 'Ищем соперника…');
        startPolling();
      } else {
        setSearching(false);
      }
    });
  }
  bootstrap();

  // ===== утиль для сокетов (обёртка твоего формата) =====
  function unwrap(raw) {
    try {
      if (typeof raw === 'string') return JSON.parse(raw);
      if (raw && typeof raw.message !== 'undefined') {
        return typeof raw.message === 'string' ? JSON.parse(raw.message) : raw.message;
      }
      return raw || null;
    } catch (_) {
      return null;
    }
  }
  var runesEl = document.getElementById('cbg-main__balance-runes');
  var root = document.getElementById('cbg-main__quests');
  if (!root) return;

  // Клик «Забрать»
  root.addEventListener('click', function (e) {
    var btn = e.target.closest('.js-quest-claim');
    if (!btn) return;
    if (btn.getAttribute('aria-disabled') === 'true') return;
    var key = btn.dataset.key || '';
    fetch('/card-game/claim', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf,
        'X-Requested-With': 'XMLHttpRequest'
      },
      credentials: 'same-origin',
      body: JSON.stringify({
        key: key
      })
    }).then(function (r) {
      return r.json().then(function (j) {
        return {
          ok: r.ok,
          j: j
        };
      });
    }).then(function (_ref) {
      var _window$toastr3;
      var ok = _ref.ok,
        j = _ref.j;
      if (!ok) throw new Error((j === null || j === void 0 ? void 0 : j.message) || 'Ошибка выдачи награды');

      // Обновим баланс рун
      if (runesEl && typeof j.runes !== 'undefined') runesEl.textContent = j.runes;

      // Визуально отметим «Получено»
      btn.textContent = 'Получено';
      btn.setAttribute('aria-disabled', 'true');
      btn.classList.remove('cbg-main__button--primary');
      btn.classList.add('cbg-main__button--secondary');
      if ((_window$toastr3 = window.toastr) !== null && _window$toastr3 !== void 0 && _window$toastr3.success) toastr.success("+".concat(j.added, " \u0440\u0443\u043D"));
    })["catch"](function (err) {
      var _window$toastr4;
      if ((_window$toastr4 = window.toastr) !== null && _window$toastr4 !== void 0 && _window$toastr4.error) toastr.error(err.message);
    });
  });
  var wrap = document.getElementById('cbg-main__free-chest');
  var out = document.getElementById('cbg-main__free-chest-timer');
  if (wrap && out && wrap.dataset.next) {
    var tick = function tick() {
      var target = Date.parse(iso);
      var left = Math.max(0, target - Date.now());
      var h = Math.floor(left / 3600000);
      var m = Math.floor(left % 3600000 / 60000);
      var s = Math.floor(left % 60000 / 1000);
      out.textContent = [h, m, s].map(function (n) {
        return String(n).padStart(2, '0');
      }).join(':');
      if (left <= 0 && tId) {
        clearInterval(tId);
        tId = null;
      }
    };
    var iso = wrap.dataset.next;
    var tId = null;
    tick();
    tId = setInterval(tick, 1000);
  }
}

/***/ }),

/***/ "./resources/js/modules/cbgModule.js":
/*!*******************************************!*\
  !*** ./resources/js/modules/cbgModule.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCbg": () => (/* binding */ initializeCbg)
/* harmony export */ });
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// resources/js/modules/cbgPlay.js

function initializeCbg() {
  var _document$querySelect;
  // ---- страница и battleId ----
  var root = document.querySelector('.body-card-game .cbg');
  if (!root) return;
  var battleId = Number(root.dataset.battleId || 0);
  if (!battleId) {
    var m = location.pathname.match(/\/card-game\/play\/(\d+)/);
    if (m) battleId = Number(m[1]);
  }
  if (!battleId) return;

  // ---- тек. пользователь / CSRF ----
  var MY_ID = Number(window.user_id || 0);
  var csrf = ((_document$querySelect = document.querySelector('meta[name="csrf-token"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.content) || '';

  // ---- утилиты ----
  var $ = function $(s) {
    var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return r.querySelector(s);
  };
  var $$ = function $$(s) {
    var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return Array.from(r.querySelectorAll(s));
  };
  var nf = function nf(n) {
    return String(Math.round(Number(n) || 0));
  };
  var err = function err(msg) {
    var _window$toastr;
    if ((_window$toastr = window.toastr) !== null && _window$toastr !== void 0 && _window$toastr.error) toastr.error(msg);else console.error(msg);
  };
  function parseIsoMs(iso) {
    if (!iso || typeof iso !== 'string') return NaN;
    var s = iso.replace(/\s+/g, ' ').trim();
    var t = Date.parse(s);
    if (Number.isFinite(t)) return t;
    var s2 = s.replace(/$/, 'Z');
    var t2 = Date.parse(s2);
    return Number.isFinite(t2) ? t2 : NaN;
  }
  function get(_x) {
    return _get.apply(this, arguments);
  }
  function _get() {
    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {
      var r;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return fetch(url, {
                headers: {
                  'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
              });
            case 2:
              r = _context2.sent;
              if (r.ok) {
                _context2.next = 5;
                break;
              }
              throw new Error("HTTP ".concat(r.status));
            case 5:
              _context2.next = 7;
              return r.json();
            case 7:
              return _context2.abrupt("return", _context2.sent);
            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _get.apply(this, arguments);
  }
  function post(_x2, _x3) {
    return _post.apply(this, arguments);
  }
  function _post() {
    _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, data) {
      var r, json;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': csrf,
                  'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin',
                body: JSON.stringify(data || {})
              });
            case 2:
              r = _context3.sent;
              _context3.next = 5;
              return r.json()["catch"](function () {
                return {};
              });
            case 5:
              json = _context3.sent;
              if (r.ok) {
                _context3.next = 8;
                break;
              }
              throw new Error((json === null || json === void 0 ? void 0 : json.message) || "HTTP ".concat(r.status));
            case 8:
              return _context3.abrupt("return", json);
            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _post.apply(this, arguments);
  }
  function unwrapSocketPayload(raw) {
    var c = raw;
    try {
      if (typeof c === 'string') c = JSON.parse(c);else if (c && typeof c.message !== 'undefined') {
        c = typeof c.message === 'string' ? JSON.parse(c.message) : c.message;
      }
    } catch (_) {/* ignore */}
    return c || {};
  }
  function mapReason(code) {
    var dict = {
      'timeout': 'Противник не сделал ход вовремя',
      'forfeit': 'Соперник сдался',
      'all_dead': 'Уничтожены все карты соперника'
    };
    return dict[code] || 'Матч завершён';
  }
  var finishedShown = false;
  var turnWatchdog = null;
  var watchdogFetching = false;
  var lastPlannedIso = null;
  var WATCHDOG_MIN_DELAY = 800;
  var sameIsoStreak = 0;
  var WATCHDOG_BACKOFF_1 = 1500;
  var WATCHDOG_BACKOFF_2 = 3000;

  // ---- FX helpers (анимации/эффекты) ----
  function rect(el) {
    return el.getBoundingClientRect();
  }
  function center(el) {
    var r = rect(el);
    return {
      x: r.left + r.width / 2,
      y: r.top + r.height / 2
    };
  }
  function showFly(text, x, y) {
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 34;
    var el = document.createElement('div');
    el.className = 'cbg-flytext';
    Object.assign(el.style, {
      left: "".concat(x, "px"),
      top: "".concat(y, "px"),
      fontSize: "".concat(size, "px"),
      position: 'fixed'
    });
    el.textContent = text;
    document.body.appendChild(el);
    setTimeout(function () {
      return el.remove();
    }, 740);
  }
  function spark(x, y) {
    var s = document.createElement('div');
    s.className = 'cbg-spark';
    Object.assign(s.style, {
      left: "".concat(x - 18, "px"),
      top: "".concat(y - 18, "px"),
      position: 'fixed'
    });
    document.body.appendChild(s);
    setTimeout(function () {
      return s.remove();
    }, 380);
  }
  function slash(x, y, angleDeg) {
    var sl = document.createElement('div');
    sl.className = 'cbg-slash';
    sl.style.setProperty('--x', "".concat(x, "px"));
    sl.style.setProperty('--y', "".concat(y, "px"));
    sl.style.setProperty('--a', "".concat(angleDeg, "deg"));
    document.body.appendChild(sl);
    setTimeout(function () {
      return sl.remove();
    }, 240);
  }
  function shakeBoard() {
    var strong = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var b = $('.body-card-game .cbg__board');
    if (!b) return;
    b.classList.add(strong ? 'cbg--shake' : 'cbg--shake-soft');
    setTimeout(function () {
      return b.classList.remove('cbg--shake', 'cbg--shake-soft');
    }, strong ? 340 : 240);
  }
  function targetReact(targetEl, sourceEl, isCrit) {
    var t = targetEl.getBoundingClientRect();
    var s = sourceEl.getBoundingClientRect();
    var dx = t.left + t.width / 2 - (s.left + s.width / 2);
    var dy = t.top + t.height / 2 - (s.top + s.height / 2);
    var len = Math.hypot(dx, dy) || 1;
    dx /= len;
    dy /= len;
    var dist = isCrit ? 28 : 20;
    targetEl.animate([{
      transform: 'translate3d(0,0,0) rotate(0deg)'
    }, {
      transform: "translate3d(".concat(dx * dist, "px,").concat(dy * dist, "px,0) rotate(").concat(Math.sign(dx) * 4, "deg)")
    }, {
      transform: 'translate3d(0,0,0) rotate(0deg)'
    }], {
      duration: 260,
      easing: 'cubic-bezier(.2,.8,.2,1)',
      fill: 'both'
    });
  }
  function attackAnim(fromEl, toEl, onImpact) {
    var dur = 560,
      windup = .34,
      hitAt = .54;
    var fr = fromEl.getBoundingClientRect();
    var tr = toEl.getBoundingClientRect();
    var dx = tr.left + tr.width / 2 - (fr.left + fr.width / 2);
    var dy = tr.top + tr.height / 2 - (fr.top + fr.height / 2);
    var angle = Math.atan2(dy, dx);
    var pre = {
      x: -dx * 0.22,
      y: -dy * 0.22
    };
    var hit = {
      x: dx * 0.78,
      y: dy * 0.78
    };
    var over = {
      x: dx * 0.86,
      y: dy * 0.86
    };
    var zPrev = fromEl.style.zIndex;
    fromEl.style.zIndex = '1100';
    fromEl.style.willChange = 'transform';
    var a1 = fromEl.animate([{
      transform: 'translate3d(0,0,0) rotate(0deg) scale(1)',
      offset: 0
    }, {
      transform: "translate3d(".concat(pre.x, "px,").concat(pre.y, "px,0) rotate(").concat(angle * -0.35, "rad) scale(1.06)"),
      offset: windup
    }, {
      transform: "translate3d(".concat(hit.x, "px,").concat(hit.y, "px,0) rotate(").concat(angle * 0.12, "rad) scale(1.09)"),
      offset: 1
    }], {
      duration: Math.round(dur * hitAt),
      easing: 'cubic-bezier(.25,.9,.3,1.08)',
      fill: 'forwards'
    });
    a1.finished.then(function () {
      if (typeof onImpact === 'function') onImpact(angle);
      var a2 = fromEl.animate([{
        transform: "translate3d(".concat(hit.x, "px,").concat(hit.y, "px,0) rotate(").concat(angle * 0.12, "rad) scale(1.09)"),
        offset: 0
      }, {
        transform: "translate3d(".concat(over.x, "px,").concat(over.y, "px,0) rotate(").concat(angle * 0.08, "rad) scale(1.10)"),
        offset: .12
      }, {
        transform: 'translate3d(0,0,0) rotate(0deg) scale(1)',
        offset: 1
      }], {
        duration: dur - Math.round(dur * hitAt),
        easing: 'cubic-bezier(.25,.9,.3,1.08)',
        fill: 'forwards'
      });
      a2.finished["finally"](function () {
        fromEl.style.willChange = '';
        fromEl.style.zIndex = zPrev || '';
      });
    })["catch"](function () {
      fromEl.style.willChange = '';
      fromEl.style.zIndex = zPrev || '';
    });
  }
  function showTurnBanner(text) {
    var el = document.querySelector('.body-card-game .cbg-turn-banner');
    if (!el) {
      el = document.createElement('div');
      el.className = 'cbg-turn-banner';
      document.body.appendChild(el);
    }
    el.textContent = text;
    el.classList.add('show');
    setTimeout(function () {
      return el.classList.remove('show');
    }, 2000);
  }

  // ---- состояние ----
  var state = {
    battle: {},
    units: [],
    players: [],
    you: null
  };
  var usedSet = new Set(); // unit.id, уже ходившие в текущем ходу активного игрока
  var selectedFrom = null;
  var clickLocked = false;

  // ---- рендер ----
  function mySideOf(u) {
    return u.user_id === MY_ID ? 'player' : 'enemy';
  }
  function cardTpl(u) {
    var side = mySideOf(u);
    var el = document.createElement('div');
    el.className = "cbg-card ".concat(side === 'enemy' ? 'cbg-card--enemy' : '', " ").concat(!u.alive ? 'cbg-card--dead' : '');
    el.dataset.side = side;
    el.dataset.unitId = String(u.id);
    el.innerHTML = "\n      <div class=\"cbg-card__art\" style=\"background-image:url('".concat(u.img || '/assets/card-placeholder.jpg', "')\"></div>\n      <div class=\"cbg-card__badge cbg-card__badge--hp\">").concat(nf(u.hp), "</div>\n      <div class=\"cbg-card__badge cbg-card__badge--atk\">").concat(nf(u.atk), "</div>\n    ");
    return el;
  }
  function renderAll() {
    var er = $('#cbg-row-enemy', root),
      pr = $('#cbg-row-player', root);
    if (!er || !pr) return;
    er.innerHTML = '';
    pr.innerHTML = '';
    state.units.forEach(function (u) {
      var side = mySideOf(u);
      (side === 'enemy' ? er : pr).appendChild(cardTpl(u));
    });
    // для корректной ширины ряда
    er.style.setProperty('--slots', String(er.children.length || 5));
    pr.style.setProperty('--slots', String(pr.children.length || 5));
    var t = $('#cbg-turn', root);
    if (t) t.textContent = state.battle.current_turn_user_id === MY_ID ? 'игрока' : 'врага';
    renderUsedMarks();
    setAvatarsAndNames();
  }
  function renderUsedMarks() {
    var _state, _state$battle;
    var activeUserId = ((_state = state) === null || _state === void 0 ? void 0 : (_state$battle = _state.battle) === null || _state$battle === void 0 ? void 0 : _state$battle.current_turn_user_id) || 0;
    state.units.forEach(function (u) {
      var el = root.querySelector(".cbg-card[data-unit-id=\"".concat(u.id, "\"]"));
      if (!el) return;
      var isActiveSideUnit = u.user_id === activeUserId;
      el.classList.toggle('cbg-card--used', isActiveSideUnit && usedSet.has(u.id));
    });
  }
  function updateUnit(u) {
    var el = root.querySelector(".cbg-card[data-unit-id=\"".concat(u.id, "\"]"));
    if (!el) return;
    var hp = el.querySelector('.cbg-card__badge--hp');
    if (hp) hp.textContent = nf(u.hp);
    if (!u.alive) el.classList.add('cbg-card--dead');
  }
  function setAvatarsAndNames() {
    var pls = Array.isArray(state.players) ? state.players : [];
    var me = pls.find(function (p) {
      return p.user_id === MY_ID;
    });
    var opp = pls.find(function (p) {
      return p.user_id !== MY_ID;
    });
    var pA = document.getElementById('cbg-player-avatar');
    var pN = document.getElementById('cbg-player-name');
    var eA = document.getElementById('cbg-enemy-avatar');
    var eN = document.getElementById('cbg-enemy-name');
    if (me && pA) pA.src = me.avatar;
    if (me && pN) pN.textContent = me.name;
    if (opp && eA) eA.src = opp.avatar;
    if (opp && eN) eN.textContent = opp.name;
  }
  function showFinishedOverlay() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$winner_user_id = _ref.winner_user_id,
      winner_user_id = _ref$winner_user_id === void 0 ? 0 : _ref$winner_user_id,
      _ref$reason = _ref.reason,
      reason = _ref$reason === void 0 ? 'Матч завершён' : _ref$reason,
      _ref$battle_id = _ref.battle_id,
      battle_id = _ref$battle_id === void 0 ? battleId : _ref$battle_id;
    if (finishedShown) return;
    finishedShown = true;
    var ov = document.querySelector('.body-card-game .cbg-finished');
    if (!ov) {
      ov = document.createElement('div');
      ov.className = 'cbg-finished';
      ov.innerHTML = "\n        <div class=\"cbg-finished__box\">\n          <div class=\"cbg-finished__title\" id=\"cbg-finish-title\"></div>\n          <div class=\"cbg-finished__reason\" id=\"cbg-finish-reason\"></div>\n          <div class=\"cbg-finished__actions\">\n            <a class=\"cbg__button\" href=\"/card-game\">\u0412 \u043B\u043E\u0431\u0431\u0438</a>\n          </div>\n        </div>";
      document.body.appendChild(ov);
    }
    var title = winner_user_id === MY_ID ? 'Победа!' : winner_user_id ? 'Поражение' : 'Матч завершён';
    document.getElementById('cbg-finish-title').textContent = title;
    document.getElementById('cbg-finish-reason').textContent = reason;
    ov.classList.add('show');
  }

  // ---- клики: выбор своей карты, затем цель у врага ----
  root.addEventListener('click', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
      var card, unitId, side, u;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              card = e.target.closest('.cbg-card');
              if (!(!card || clickLocked)) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return");
            case 3:
              unitId = Number(card.dataset.unitId);
              side = card.dataset.side;
              u = state.units.find(function (x) {
                return x.id === unitId;
              });
              if (!(!u || !u.alive)) {
                _context.next = 8;
                break;
              }
              return _context.abrupt("return");
            case 8:
              if (!(state.battle.current_turn_user_id !== MY_ID)) {
                _context.next = 10;
                break;
              }
              return _context.abrupt("return");
            case 10:
              if (!(side === 'player')) {
                _context.next = 18;
                break;
              }
              if (!usedSet.has(unitId)) {
                _context.next = 13;
                break;
              }
              return _context.abrupt("return");
            case 13:
              // уже ходил в этом ходу
              selectedFrom = unitId;
              $$('.cbg-card', root).forEach(function (x) {
                return x.classList.remove('cbg-card--sel');
              });
              card.classList.add('cbg-card--sel');
              _context.next = 35;
              break;
            case 18:
              if (!(side === 'enemy')) {
                _context.next = 35;
                break;
              }
              if (selectedFrom) {
                _context.next = 21;
                break;
              }
              return _context.abrupt("return");
            case 21:
              _context.prev = 21;
              clickLocked = true;
              _context.next = 25;
              return post("/battle/".concat(battleId, "/attack"), {
                from_unit_id: selectedFrom,
                to_unit_id: unitId
              });
            case 25:
              _context.next = 30;
              break;
            case 27:
              _context.prev = 27;
              _context.t0 = _context["catch"](21);
              err(_context.t0.message || 'Ошибка атаки');
            case 30:
              _context.prev = 30;
              clickLocked = false;
              selectedFrom = null;
              $$('.cbg-card', root).forEach(function (x) {
                return x.classList.remove('cbg-card--sel');
              });
              return _context.finish(30);
            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[21, 27, 30, 35]]);
    }));
    return function (_x4) {
      return _ref2.apply(this, arguments);
    };
  }());

  // ---- сокеты ----
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    // АТАКА
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('attack', function (raw) {
      var _content$is_crit;
      var content = unwrapSocketPayload(raw);
      if (!content || Number(content.battle_id) !== battleId) return;
      var fromEl = root.querySelector(".cbg-card[data-unit-id=\"".concat(content.from_unit_id, "\"]"));
      var toEl = root.querySelector(".cbg-card[data-unit-id=\"".concat(content.to_unit_id, "\"]"));
      var tgt = state.units.find(function (u) {
        return u.id === content.to_unit_id;
      });
      var src = state.units.find(function (u) {
        return u.id === content.from_unit_id;
      });
      var isCrit = !!((_content$is_crit = content.is_crit) !== null && _content$is_crit !== void 0 ? _content$is_crit : content.isCrit);
      var dmgNum = Number(content.hit || 0) + Number(content["true"] || 0) || null;
      var onImpact = function onImpact(angleRad) {
        if (toEl && fromEl) {
          targetReact(toEl, fromEl, isCrit);
          var c = center(toEl);
          slash(c.x, c.y, angleRad * 180 / Math.PI);
          if (isCrit) spark(c.x, c.y);
          shakeBoard(isCrit);
          if (dmgNum) showFly("-".concat(dmgNum).concat(isCrit ? ' ✦' : ''), c.x, c.y - 6, isCrit ? 42 : 34);
        }
        if (tgt) {
          tgt.hp = content.hp_after;
          if (content.killed) tgt.alive = false;
          updateUnit(tgt);
        }
        if (src && content.from_hp_after != null) {
          src.hp = content.from_hp_after;
          updateUnit(src);
        }

        // cleave
        if (Array.isArray(content.cleave)) {
          content.cleave.forEach(function (ev) {
            var nbEl = root.querySelector(".cbg-card[data-unit-id=\"".concat(ev.unit_id, "\"]"));
            var nb = state.units.find(function (u) {
              return u.id === ev.unit_id;
            });
            if (nbEl && fromEl) {
              var cc = center(nbEl);
              slash(cc.x, cc.y, angleRad * 180 / Math.PI + (Math.random() > .5 ? 12 : -12));
              if (ev.damage) showFly("-".concat(ev.damage), cc.x, cc.y - 6, 30);
              targetReact(nbEl, fromEl, false);
            }
            if (nb) {
              nb.hp = ev.hp_after;
              if (ev.killed) nb.alive = false;
              updateUnit(nb);
            }
          });
        }

        // отметить “карта ходила” (только для активной стороны этого хода)
        if (src && src.user_id === (state.battle.current_turn_user_id || 0)) {
          usedSet.add(src.id);
          renderUsedMarks();
        }
      };
      if (fromEl && toEl) attackAnim(fromEl, toEl, onImpact);else onImpact(0);
    });

    // СМЕРТЬ ЮНИТА (на всякий случай отдельным событием)
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('unit_dead', function (raw) {
      var c = unwrapSocketPayload(raw);
      if (!c || Number(c.battle_id) !== battleId) return;
      var d = state.units.find(function (u) {
        return u.id === c.unit_id;
      });
      if (d) {
        d.alive = false;
        updateUnit(d);
      }
    });

    // СМЕНА ХОДА
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('turn_started', function (raw) {
      var c = unwrapSocketPayload(raw);
      if (!c || Number(c.battle_id) !== battleId) return;
      state.battle.current_turn_user_id = c.user_id;
      state.battle.turn_expires_at = c.turn_expires_at;
      usedSet = new Set(); // новый ход — локальный сброс
      renderAll();
      scheduleTurnWatchdog();
      showTurnBanner(c.user_id === MY_ID ? 'Ваш ход' : 'Ход соперника');
    });

    // ФИНИШ
    _socketManager_js__WEBPACK_IMPORTED_MODULE_0__["default"].on('finished', function (raw) {
      var c = unwrapSocketPayload(raw);
      if (!c || Number(c.battle_id) !== battleId) return;
      state.battle.status = 'finished';
      state.battle.winner_user_id = c.winner_user_id || state.battle.winner_user_id || 0;
      state.battle.finish_reason = c.reason || state.battle.finish_reason || null;
      renderAll();
      clearTurnWatchdog();
      showFinishedOverlay({
        winner_user_id: state.battle.winner_user_id || 0,
        reason: mapReason(state.battle.finish_reason),
        battle_id: state.battle.id || battleId
      });
    });
  }
  function clearTurnWatchdog() {
    if (turnWatchdog) {
      clearTimeout(turnWatchdog);
      turnWatchdog = null;
    }
  }
  function delayFromState() {
    var _state2, _state2$battle, _state3, _state3$battle;
    // если сервер прислал остаток времени — используем его
    var left = Number((_state2 = state) === null || _state2 === void 0 ? void 0 : (_state2$battle = _state2.battle) === null || _state2$battle === void 0 ? void 0 : _state2$battle.turn_left_ms);
    if (Number.isFinite(left)) {
      return Math.max(WATCHDOG_MIN_DELAY, left + 150); // маленький буфер
    }

    // Fallback (на всякий): парсим ISO (если вдруг turn_left_ms отсутствует)
    var iso = (_state3 = state) === null || _state3 === void 0 ? void 0 : (_state3$battle = _state3.battle) === null || _state3$battle === void 0 ? void 0 : _state3$battle.turn_expires_at;
    var exp = iso ? Date.parse(iso) : NaN;
    if (Number.isFinite(exp)) {
      return Math.max(WATCHDOG_MIN_DELAY, exp - Date.now() + 120);
    }

    // Совсем нет информации — мягкий повтор
    return 1500;
  }
  function refreshStateOnceForTimeout() {
    return _refreshStateOnceForTimeout.apply(this, arguments);
  }
  function _refreshStateOnceForTimeout() {
    _refreshStateOnceForTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var data;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!watchdogFetching) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return");
            case 2:
              watchdogFetching = true;
              _context4.prev = 3;
              _context4.next = 6;
              return get("/battle/".concat(battleId, "/state"));
            case 6:
              data = _context4.sent;
              if (!(data !== null && data !== void 0 && data.battle)) {
                _context4.next = 18;
                break;
              }
              state.battle = _objectSpread(_objectSpread({}, state.battle), data.battle);
              if (Array.isArray(data.units)) state.units = data.units;
              renderAll();
              if (!(state.battle.status === 'finished')) {
                _context4.next = 15;
                break;
              }
              clearTurnWatchdog();
              showFinishedOverlay({
                winner_user_id: state.battle.winner_user_id || 0,
                reason: mapReason(state.battle.finish_reason),
                battle_id: state.battle.id || battleId
              });
              return _context4.abrupt("return");
            case 15:
              // бой активен — перепланируем по новому left_ms
              scheduleTurnWatchdog();
              _context4.next = 20;
              break;
            case 18:
              // нет данных — подождём и попробуем снова
              clearTurnWatchdog();
              turnWatchdog = setTimeout(refreshStateOnceForTimeout, 2000);
            case 20:
              _context4.next = 26;
              break;
            case 22:
              _context4.prev = 22;
              _context4.t0 = _context4["catch"](3);
              clearTurnWatchdog();
              turnWatchdog = setTimeout(refreshStateOnceForTimeout, 2000);
            case 26:
              _context4.prev = 26;
              watchdogFetching = false;
              return _context4.finish(26);
            case 29:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[3, 22, 26, 29]]);
    }));
    return _refreshStateOnceForTimeout.apply(this, arguments);
  }
  function scheduleTurnWatchdog() {
    var _state4, _state4$battle;
    clearTurnWatchdog();
    if (((_state4 = state) === null || _state4 === void 0 ? void 0 : (_state4$battle = _state4.battle) === null || _state4$battle === void 0 ? void 0 : _state4$battle.status) !== 'active') return;
    var delay = delayFromState();
    turnWatchdog = setTimeout(refreshStateOnceForTimeout, delay);
  }

  // ---- boot ----
  get("/battle/".concat(battleId, "/state")).then(function (data) {
    var _state5, _state5$battle, _state$battle2, _state6, _state6$battle;
    state = data;
    if (!MY_ID) {
      var mine = Array.isArray(state.players) ? state.players.find(function (p) {
        return p.side === state.you;
      }) : null;
      if (mine && mine.user_id) {
        MY_ID = Number(mine.user_id);
      }
    }

    // подхват уже использованных карт (если пришёл массив)
    if ((_state5 = state) !== null && _state5 !== void 0 && (_state5$battle = _state5.battle) !== null && _state5$battle !== void 0 && _state5$battle.turn_used && Array.isArray(state.battle.turn_used)) {
      usedSet = new Set(state.battle.turn_used.map(Number));
    } else {
      usedSet = new Set();
    }
    renderAll();
    if (((_state$battle2 = state.battle) === null || _state$battle2 === void 0 ? void 0 : _state$battle2.status) === 'finished') {
      showFinishedOverlay({
        winner_user_id: state.battle.winner_user_id || 0,
        reason: mapReason(state.battle.finish_reason),
        battle_id: state.battle.id
      });
    } else {
      scheduleTurnWatchdog();
    }
    if (((_state6 = state) === null || _state6 === void 0 ? void 0 : (_state6$battle = _state6.battle) === null || _state6$battle === void 0 ? void 0 : _state6$battle.current_turn_user_id) != null) {
      showTurnBanner(state.battle.current_turn_user_id === MY_ID ? 'Ваш ход' : 'Ход соперника');
    }
  })["catch"](function (e) {
    return err(e.message || 'Не удалось загрузить состояние боя');
  });
}

/***/ }),

/***/ "./resources/js/modules/chapterModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/chapterModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeChapter": () => (/* binding */ initializeChapter)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeChapter() {
  if ($('.load-chapters-trigger').length) {
    var executed = false;
    var observer = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting && !executed) {
          executed = true;
          var manga_id = $('.manga').attr('data-id');
          $.post("/chapters/load", {
            manga_id: manga_id
          }, function (result) {
            $('.chapters__list').append(result.content);
          });
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 1.0
    });
    var target = $('.load-chapters-trigger')[0];
    if (target) {
      observer.observe(target);
    }
  }
  if ($('.chapters__item').length) {
    var urls = JSON.parse(localStorage.getItem('visit_urls')) || [];
    urls.forEach(function (url) {
      var chapterItem = $(".chapters__item[href=\"".concat(url, "\"]"));
      if (chapterItem.length) {
        chapterItem.find('.chapters__add-date').text('Прочитано').addClass('chapters__item-mark').removeClass('chapters__add-date');
      }
    });
  }
}

/***/ }),

/***/ "./resources/js/modules/clubModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/clubModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeClub": () => (/* binding */ initializeClub)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");


function initializeClub() {
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("alliance-exp-data", function (data) {
      var message = data.message;
      $('.alliance__level-value').text("".concat(message.level, " \u0443\u0440\u043E\u0432\u0435\u043D\u044C"));
      $('.alliance__level-exp').text(message.current_exp_in_level);
      $('.alliance__level-total-exp').text("".concat(message.exp_required, " \u043E\u043F\u044B\u0442\u0430"));
      $('.alliance__level-bar--fill').css('width', message.progress_percent + '%');
      $('.alliance__chance-change-manga').text(message.chance_change_manga);
      $('.alliance-boost__block-donation-stats strong').text(message.free_changes);
      if (message.user && message.user.name) {
        var html = "\n        <div class=\"club-history__item\">\n            <div class=\"club-history__row\">\n                <div class=\"club-history__avatar\">\n                    <img src=\"".concat(message.user.avatar, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\u043A\u0430\">\n                </div>\n                <div class=\"club-history__name\">").concat(message.user.name, "</div>\n                <div class=\"club-history__date\">").concat(message.card.date, "</div>\n            </div>\n            <div class=\"club-history__row\">\n                <div class=\"club-history__card\">\n                    <img src=\"/img/cards/").concat(message.card.image, "\" alt=\"\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\">\n                </div>\n                <div class=\"club-history__card-name\">").concat(message.card.name, "</div>\n            </div>\n        </div>");
        $('.club-history').prepend(html);
      }

      /*toastr.success("Новый вклад!");*/
    });

    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("alliance-change-manga", function (data) {
      var manga = data.message;
      var imageUrl = manga.image;
      var mangaUrl = '/manga/' + manga.slug;
      $('.card-show__header').css('background-image', 'url(' + imageUrl + ')');
      $('.card-show__image').attr('src', imageUrl);
      $('.card-filter-form').attr('data-manga-id', manga.id);
      $('.card-show__placeholder').attr('href', mangaUrl);
      $('.card-filter-form').trigger('reloadCards');
      toastr.success("Смена манги!");
    });
  }
  var $readMoreBtn = $('.club__description-read-button');
  var $text = $('.club__description');
  if ($readMoreBtn.length && $text.length) {
    if ($text[0].scrollHeight > $text.height()) {
      $readMoreBtn.show();
    } else {
      $readMoreBtn.hide();
    }
    $readMoreBtn.on('click', function () {
      $text.toggleClass('club__description-show');
      $readMoreBtn.hide();
    });
  }
  $('.club-request__search').on('input', function () {
    var val = $(this).val().toLowerCase();
    $('.club-request__item').each(function () {
      $(this).toggle(!val || $(this).data('name').toLowerCase().includes(val));
    });
  });
  $('.club-create__send-btn').on('click', function () {
    var button = $(this);
    var form = $(this).closest('form')[0];
    var formData = new FormData(form);
    button.attr('disabled', true).addClass('button--loading');
    $.ajax({
      url: button.attr('data-edit') === '1' ? '/clubs/edit' : '/clubs/create',
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function success(response) {
        window.location = '/clubs/' + response.slug;
      },
      complete: function complete() {
        button.attr('disabled', false).removeClass('button--loading');
      }
    });
  });
  $('.club-kick-btn').on('click', function () {
    if (!confirm("Действительно выгнать этого пользователя?")) return false;
    var button = $(this);
    var user_id = $(this).attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/kick', {
      user_id: user_id
    }, button, function (result) {
      button.closest('.club-request__item').remove();
      toastr.success(result.message);
    });
  });
  $('.club-change-leader-btn').on('click', function () {
    if (!confirm("Действительно назначить этого пользователя лидером?")) return false;
    var button = $(this);
    var user_id = $(this).attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/changeLeader', {
      user_id: user_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.club-request__decline-all-btn').on('click', function () {
    if (!confirm("Действительно отменить все заявки")) return false;
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/declineAllApplication', {}, button, function (result) {
      $('.club-request__item').remove();
      toastr.success('Все заявки отменены');
    });
  });
  $(document).on('click', '.club__action-btn', function () {
    var button = $(this);
    var club_id = button.closest('.club__actions').attr('data-club-id');
    var status = button.attr('data-status');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/action', {
      status: status,
      club_id: club_id
    }, button, function (result) {
      button.closest('.club__block').remove();
      toastr.success(result.message);
    });
  });
  $(document).on('click', '.club-set-status-btn', function () {
    var button = $(this);
    var user_id = button.attr('data-user-id');
    var status = button.closest('.club-request__item').find('.club-request__status').text().trim();
    button.closest('.club-request__item').find('.club-request__status').replaceWith($('<form>', {
      'class': 'form-block-send',
      'autocomplete': 'off'
    }).append($('<input>', {
      'class': 'form__field',
      'type': 'text',
      'value': status
    }).css('margin-bottom', '0')));
    button.toggleClass('club-set-status-btn club-save-status');
    button.find('i').toggleClass('icon-edit icon-check');
  });

  // Обработчик клика для отправки данных формы
  $(document).on('click', '.club-save-status', function () {
    var button = $(this);
    var form = button.closest('.club-request__item').find('form.form-block-send');
    var input = form.find('.form__field');
    var new_status = input.val();
    var user_id = button.attr('data-user-id');

    // Использование вашей функции отправки данных
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/setStatus', {
      user_id: user_id,
      status: new_status
    }, button, function (result) {
      toastr.success(result.message);
      // Восстановление исходного состояния
      form.replaceWith($('<div>', {
        'class': 'club-request__status',
        text: new_status
      }));
      button.toggleClass('club-save-status club-set-status-btn');
      button.find('i').toggleClass('icon-check icon-edit');
    });
  });
  $('.club-edit__delete-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/delete', {}, button, function (result) {
      toastr.success(result.message);
      window.location = '/clubs/';
    });
  });
  $('.club__show-all-btn').on('click', function () {
    $('.club__member').css('display', 'flex');
    $(this).hide();
  });
  $('.club-boost__replace-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/replace', {}, button, function (result) {
      toastr.success(result.message);
      $('.club-boost__image img').attr('src', result.card);
      $('.club-boost__change span').text(parseInt($('.club-boost__change span').text()) + 1);
    });
  });
  $('.club__boost-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/boost', {}, button, function (result) {
      toastr.success(result.message);
      $('.club-boost--content').html(result.content);
    });
  });
  $('.club-request__handle-btn').on('click', function () {
    var button = $(this);
    var id = $(this).closest('.club-request__item').attr('data-id');
    var accept = parseInt($(this).attr('data-accept'));
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/handleRequest', {
      id: id,
      accept: accept
    }, button, function (result) {
      toastr.success(result.message);
      button.closest('.club-request__item').remove();
    });
  });
  $('body').on('click', '.club__leave-btn', function () {
    var button = $(this);
    if (!confirm("Дейстительно выйти из клуба?")) return false;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/leave', {}, button, function (result) {
      toastr.success(result.message);
      button.replaceWith('<button class="button button--primary button--block club__join-btn">Подать заявку</button>');
    });
  });
  $('body').on('click', '.club__join-btn', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    var club_id = $('.club').attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/clubs/join', {
      club_id: club_id
    }, button, function (result) {
      toastr.success(result.message);
      button.replaceWith('<button class="button button--block">Заявка отправлена</button>');
    });
  });
  if ($('.club-boost__settings').length > 0) {
    var storageKey = 'clubCardReplacementNotification';
    var isChecked = localStorage.getItem(storageKey) === 'true';
    var checkboxHtml = "\n                    <div class=\"club-boost__inner\">\n                        <label>\n                            <input type=\"checkbox\" id=\"notificationCheckbox\" ".concat(isChecked ? 'checked' : '', ">\n                            \u041F\u043E\u043B\u0443\u0447\u0430\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u043E \u0437\u0430\u043C\u0435\u043D\u0435 \u043A\u0430\u0440\u0442\u044B\n                        </label>\n                    </div>\n                ");
    $('.club-boost__settings').html(checkboxHtml);
    $('#notificationCheckbox').on('change', function () {
      var isChecked = $(this).is(':checked');
      localStorage.setItem(storageKey, isChecked);
    });
  }
  $('.alliance-create__send-btn').on('click', function () {
    var button = $(this);
    var form = $(this).closest('form')[0];
    var formData = new FormData(form);
    button.attr('disabled', true).addClass('button--loading');
    $.ajax({
      url: button.attr('data-edit') === '1' ? '/alliances/edit' : '/alliances/create',
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function success(response) {
        window.location = '/alliances/' + response.id;
      },
      complete: function complete() {
        button.attr('disabled', false).removeClass('button--loading');
      }
    });
  });
  $('.alliance-editor__form').on('submit', function (e) {
    e.preventDefault();
    var $form = $(this);
    var formData = new FormData(this);
    var type = $form.data('type');
    formData.append('type', type);
    $.ajax({
      url: '/alliances/upload',
      method: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function success(res) {
        alert(res.message);
      },
      error: function error(err) {
        var _err$responseJSON;
        alert(((_err$responseJSON = err.responseJSON) === null || _err$responseJSON === void 0 ? void 0 : _err$responseJSON.message) || 'Ошибка при загрузке.');
      }
    });
  });
  $('.alliance-boost__change-manga-btn').on('click', function () {
    if (!confirm("Смена манги стоит 500 алмазов, вы уверены?")) return false;
    var button = $(this);
    var id = $('.alliance-boost').attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/' + id + '/change-manga', {}, button, function (result) {});
  });
  $('.alliance-boost__buy-item-btn').on('click', function () {
    var button = $(this);
    var alliance_id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/buyItem', {
      alliance_id: alliance_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $(document).on('click', '.club-boost__show-more', function () {
    var container = $(this).closest('.club-boost__top');
    container.find('.club-boost__top-item--hidden').removeClass('club-boost__top-item--hidden');
    $(this).remove();
  });
  $('.alliance-boost__buy-changes-btn').on('click', function () {
    if (!confirm("Действительно пожертвовать алмазы на смену манги?")) return false;
    var button = $(this);
    var alliance_id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/buyChanges', {
      alliance_id: alliance_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.alliance-boost__donate-card-btn').on('click', function () {
    var button = $(this);
    var allianceId = $('.alliance-boost').attr('data-id');
    var cardUserId = $('.alliance-boost__card').attr('data-card-id');
    var data = {
      card_user_id: cardUserId
    };
    if (!data.card_user_id) {
      toastr.error('Выберите карту для вклада');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/' + allianceId + '/donate-card', data, button, function (result) {
      $('.alliance-boost__card-image img').attr('src', '/assets/card-placeholder.jpg');
      $('.alliance-boost__card-exp span').text(0);
      $('.alliance-boost__card').attr('data-card-id', '');
      $('.card-filter-list__card[data-id="' + cardUserId + '"]').remove();
    });
  });
  $('body').on('click', '.card-inventory-container--boost-alliance .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var rank = $(this).data('rank');
    var elem = $(this);
    $('.card-filter-list__card').removeClass('card-filter-list__card--exists');
    var exp = 0;
    switch (rank) {
      case 'X':
        exp = 35;
        break;
      case 'S':
        exp = 24;
        break;
      case 'A':
        exp = 18;
        break;
      case 'P':
        exp = 14;
        break;
      case 'G':
        exp = 12;
        break;
      case 'B':
        exp = 10;
        break;
      case 'C':
        exp = 8;
        break;
      case 'D':
        exp = 6;
        break;
      case 'E':
        exp = 4;
        break;
      case 'H':
        exp = 35;
        break;
      case 'N':
        exp = 35;
        break;
      case 'V':
        exp = 35;
        break;
      case 'Q':
        exp = 35;
        break;
      case 'L':
        exp = 35;
        break;
      default:
        exp = 1;
        break;
    }
    $('.alliance-boost__card-exp span').text(exp);
    $('.alliance-boost__card-image img').attr('src', imgSrc);
    $('.alliance-boost__card').attr('data-card-id', dataId);
    elem.addClass('card-filter-list__card--exists');
  });
  $('.alliance-show__invite-club').on('click', function () {
    var button = $(this);
    var club_id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/invite', {
      club_id: club_id
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.alliance-show__kick-club').on('click', function () {
    if (!confirm("Действительно выгнать этот клуб?")) return false;
    var button = $(this);
    var club_id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/kick', {
      club_id: club_id
    }, button, function (result) {
      toastr.success(result.message);
      button.remove();
    });
  });
  $('.alliance-show__leave-btn').on('click', function () {
    if (!confirm("Действительно выйти из альянса?")) return false;
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/leave', {}, button, function (result) {
      toastr.success(result.message);
      button.remove();
    });
  });
  $('.alliance-show__delete-btn').on('click', function () {
    if (!confirm("Действительно удалить альянс?")) return false;
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/delete', {}, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.alliance-show__response-invite').on('click', function () {
    var button = $(this);
    var request_id = $(this).attr('data-response-id');
    var accept = parseInt($(this).attr('data-type'));
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/alliances/respond', {
      request_id: request_id,
      accept: accept
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/collectionModule.js":
/*!**************************************************!*\
  !*** ./resources/js/modules/collectionModule.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeCollection": () => (/* binding */ initializeCollection)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeCollection() {
  /* Collections */
  $('.create-collection__submit').on('click', function () {
    var name = $('.create-collection input[name="name"]').val();
    var description = $('.create-collection textarea[name="description"]').val();
    var id = $('.create-collection').attr('data-id');
    var manga_ids = $('.edit-list__item').map(function () {
      return $(this).attr('data-manga-id');
    }).get();
    var button = $(this);
    var values = {};
    $(".edit-list__item").each(function (index) {
      values[$(this).attr('data-manga-id')] = {
        'description': $(this).find('.edit-list__textarea textarea').val(),
        'sort_index': index
      };
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(id ? "/collections/" + id : "/collections", {
      'name': name,
      'description': description,
      'manga_ids': values
    }, button, function (result) {
      window.location.href = '/collections/' + result.collection_id;
    });
  });
  $('.delete-collection-btn').on('click', function () {
    if (!confirm("Дейстительно хотите удалить подборку?")) return false;
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/collections/' + id + '/delete', {}, button, function (result) {
      window.location.href = '/collections/';
    });
  });
  $('body').on('click', '.create-collection .suggestion__item', function () {
    var list = $('.edit-list');
    var manga = JSON.parse($(this).attr('data-manga'));
    if ($('.edit-list__item[data-manga-id="' + manga.id + '"]').length) return false;
    var new_item = '<div class="edit-list__item" data-manga-id="' + manga.id + '" draggable="false" style="">' + '<div class="edit-list__title">' + '<button class="edit-list__drag"><i class="icon icon-drag"></i></button>' + '<div class="edit-list__name">' + manga.name + '</div>' + '<button class="edit-list__collapse"><i class="icon icon-expand-more"></i></button>' + '</div>' + '<div class="edit-list__inner" style="display: flex;">' + '<div class="edit-list__img">' + '<img src="' + manga.image + '" alt="Постер" draggable="false">' + '</div>' + '<div class="edit-list__content">' + '<div class="edit-list__info">' + '<div class="edit-list__right">' + manga.type.name + ' ' + new Date(manga.release).getFullYear() + '</div>' + '<div class="edit-list__left">' + 'Оценка ' + manga.rating + '</div>' + '</div>' + '<div class="edit-list__textarea">' + '<textarea placeholder="Описание"></textarea>' + '</div>' + '<button class="button edit-list__del-btn"><i class="icon icon-delete"></i> Удалить из списка</button>' + '</div>' + '</div>' + '</div>';
    list.append(new_item);
    $('.create-collection__input').val("");
    setTimeout(function () {
      $('.create-collection__input').val("");
    }, 500);
    userlistAnimeCountRefresh();
    return false;
  });
  $('body').on('click', '.edit-list__collapse', function () {
    var inner = $(this).closest('.edit-list__item').find('.edit-list__inner');
    inner.slideToggle(500);
    $(this).html($(this).html() == '<i class="icon icon-expand-more"></i>' ? '<i class="icon icon-expand-less"></i>' : '<i class="icon icon-expand-more"></i>');
    return false;
  });
  $('body').on('click', '.edit-list__del-btn', function () {
    $(this).closest('.edit-list__item').remove();
    userlistAnimeCountRefresh();
  });
  var sortable_list = document.getElementsByClassName('edit-list');
  if (sortable_list.length > 0) {
    new Sortable(sortable_list[0], {
      handle: '.edit-list__drag',
      animation: 150
    });
  }
  function userlistAnimeCountRefresh() {
    var manga_count = $('.edit-list__item').length;
    if (manga_count < 1 || manga_count > 100) {
      $('.create-collection__submit').attr("disabled", true);
    } else {
      $('.create-collection__submit').removeAttr("disabled");
    }
    $('.create-collection__current-manga-count').text(manga_count);
    $('.create-collection__input').val('');
  }
}

/***/ }),

/***/ "./resources/js/modules/commentModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/commentModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeComment": () => (/* binding */ initializeComment)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


function initializeComment() {
  var room = window.location.pathname;
  var videos = $('.comments__list video');
  var lazyLoadInstance;
  if (typeof LazyLoad !== 'undefined') {
    lazyLoadInstance = new LazyLoad({});
  } else {
    console.warn('LazyLoad is not defined.');
  }
  var sort = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('sort_comments');
  var is_trade_comm = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('comm_trade');
  var is_trade_comm_exists = $('.comments__change-sort[data-type="card"]').length;
  if (sort === "id" || !sort) {
    $('.comments__change-sort[data-type="id"]').addClass('comments__change-sort--active');
  } else if (sort === "rating") {
    $('.comments__change-sort[data-type="rating"]').addClass('comments__change-sort--active');
  }
  if (is_trade_comm_exists && is_trade_comm == "1") {
    $('.comments__change-sort').removeClass('comments__change-sort--active');
    $('.comments__change-sort[data-type="card"]').addClass('comments__change-sort--active');
  }
  $('body').on('click', '.comments__tip-btn', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    if (!window.isPro) {
      window.location.href = '/pro';
      return false;
    }
    if (!localStorage.getItem('tip_confirm_shown')) {
      var confirmTip = confirm("Стоимость типа — 1 алмаз. Вы передаёте этот алмаз человеку. Продолжить?");
      if (!confirmTip) return false;
      localStorage.setItem('tip_confirm_shown', '1');
    }
    var comment_id = $(this).attr('data-comment-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments/tip", {
      'comment_id': comment_id
    }, button, function (result) {
      $('#comment_' + comment_id + ' > .comments__inner .comments__tip').show();
      $('#comment_' + comment_id + ' > .comments__inner .comments__tip-value').text(result.value);
      if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('new-tip', {
          'room': room,
          'value': result.value,
          'com_id': comment_id
        });
      }
    });
  });
  $('body').on('click', '.tip-popup__button', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    if (!window.isPro) {
      window.location.href = '/pro';
      return false;
    }
    var amount = parseInt($(this).data('amount')) || 1;
    if (!localStorage.getItem('tip_confirm_shown')) {
      var confirmTip = confirm("\u0421\u0442\u043E\u0438\u043C\u043E\u0441\u0442\u044C \u0442\u0438\u043F\u0430 \u2014 ".concat(amount, " \u0430\u043B\u043C\u0430\u0437").concat(amount > 1 ? 'ов' : '', ". \u0412\u044B \u043F\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0435 ").concat(amount > 1 ? 'их' : 'его', " \u0447\u0435\u043B\u043E\u0432\u0435\u043A\u0443. \u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C?"));
      if (!confirmTip) return false;
      localStorage.setItem('tip_confirm_shown', '1');
    }
    var comment_id = $(this).closest('.tip-popup').data('comment-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments/tip", {
      comment_id: comment_id,
      amount: amount
    }, button, function (result) {
      $('#comment_' + comment_id).find('> .comments__inner .comments__tip-value').text(result.value);
      if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('new-tip', {
          'room': room,
          'value': result.value,
          'com_id': comment_id
        });
      }
    });
  });
  $('body').on('click', '.reader__notification', function () {
    $(this).fadeOut('slow', function () {
      $(this).remove();
    });
  });
  $('body').on('click', '.new-feed__button--comments', function () {
    $(this).closest('.new-feed__info').find('.comments').toggle();
  });
  $('body').on('click', '.comments__actions-btn--raffle', function () {
    $('.comments__actions-btn--raffle').toggleClass('comments__actions-btn--raffle-active');
  });
  var $comment = $('.comments');
  if (typeof window.user_id !== 'undefined' && $comment.length && $comment.data('type') === 'user' && $comment.data('id') == window.user_id) {
    $comment.find('.comments__actions-btn--raffle').css('display', 'flex');
  }
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    var showTopNotice = function showTopNotice(html) {
      var $wrap = $('.mb-toast-wrap');
      var $toast = $('<div class="mb-toast" role="alert"></div>').html(html);
      $wrap.append($toast);
      var hideTimer = setTimeout(function () {
        return closeToast($toast);
      }, 3000);
      $toast.on('mouseenter', function () {
        return clearTimeout(hideTimer);
      });
      $toast.on('mouseleave', function () {
        hideTimer = setTimeout(function () {
          return closeToast($toast);
        }, 1200);
      });
      $toast.on('click', function (e) {
        if ($(e.target).closest('a').length) return;
        closeToast($toast);
      });
      function closeToast($el) {
        if (!$el.length || $el.hasClass('mb-toast--out')) return;
        $el.addClass('mb-toast--out');
        setTimeout(function () {
          return $el.remove();
        }, 180);
      }
    };
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("connect", function () {
      _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('joinRoom', {
        room: room,
        userId: window.user_id
      });
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("delete-comm", function (data) {
      $("#comment_" + data.value).remove();
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-notify", function (data) {
      $('body').append('<div class="reader__notification">' + data.message + '</div>');
      setTimeout(function () {
        $('.reader__notification').fadeOut('slow', function () {
          $(this).remove();
        });
      }, 7000);
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-notifyClubNewCard", function (data) {
      if (localStorage.getItem('clubCardReplacementNotification') === 'true') {
        $('body').append(data.message);
        setTimeout(function () {
          $('.club-card-notify').fadeOut('slow', function () {
            $(this).remove();
          });
        }, 7000);
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-sendNewReplyComment", function (data) {
      $('body').append('<div class="reader__notification">' + data.message + '</div>');
      setTimeout(function () {
        $('.reader__notification').fadeOut('slow', function () {
          $(this).remove();
        });
      }, 6000);
    });
    (function ensureToastWrap() {
      if (!$('.mb-toast-wrap').length) {
        $('body').append('<div class="mb-toast-wrap" aria-live="polite" aria-atomic="true"></div>');
      }
    })();
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-NotifyForUsers", function (data) {
      showTopNotice(data.message);
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-sendNewTrade", function (data) {
      $('body').append('<div class="reader__notification">' + data.message + '</div>');
      setTimeout(function () {
        $('.reader__notification').fadeOut('slow', function () {
          $(this).remove();
        });
      }, 6000);
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("update-com-like", function (data) {
      var comment_id = data.com_id;
      var comment = $('#comment_' + parseInt(comment_id));
      if (comment.length) {
        comment.find('> .comments__inner .comments__rating-number').text(data.value);
        comment.find('> .comments__inner .comments__rating-number').attr('class', 'comments__rating-number value comments__rating-number--' + data.color);
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-tip-com", function (data) {
      var comment_id = data.com_id;
      var comment = $('#comment_' + parseInt(comment_id));
      if (comment.length) {
        comment.find('> .comments__inner .comments__tip').show();
        comment.find('> .comments__inner .comments__tip-value').text(parseInt(data.value));
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("update-comments", function (data) {
      var newComment;
      if (data.parentId) {
        var commentId = 'comment_' + data.parentId;
        newComment = $(data.htmlComment).addClass('comments__item--new');
        if (newComment.attr('data-is-trade') == "1" && $('.comments__change-sort--active.comments__change-sort[data-type="card"]').length || newComment.attr('data-is-trade') == "0" && !$('.comments__change-sort--active.comments__change-sort[data-type="card"]').length) {
          $('#' + commentId + ' > .comments__children').prepend(newComment);
        }
        updateVideos(lazyLoadInstance, videos);
      } else {
        newComment = $(data.htmlComment).addClass('comments__item--new');
        var pinnedComment = $('.comments__list .comments__item--pinned').first();
        if (newComment.attr('data-is-trade') == "1" && $('.comments__change-sort--active.comments__change-sort[data-type="card"]').length || newComment.attr('data-is-trade') == "0" && !$('.comments__change-sort--active.comments__change-sort[data-type="card"]').length) {
          pinnedComment.length ? pinnedComment.after(newComment) : $('.comments__list').prepend(newComment);
        }
        updateVideos(lazyLoadInstance, videos);
        var comments_all = $('.comments__list > .comments__item');
        if (comments_all.length > 100) {
          var excessCount = comments_all.length - 100;
          comments_all.slice(-excessCount).remove();
        }
      }
      if ($('.reader-menu__item--comment').length) {
        var commentCountElement = $('.reader-menu__item--comment .reader-menu__item--label');
        var newCommentCount = parseInt(commentCountElement.text(), 10) + 1;
        commentCountElement.text(newCommentCount);
        commentCountElement.addClass('reader-menu__item--label-new');
        setTimeout(function () {
          commentCountElement.removeClass('reader-menu__item--label-new');
        }, 300);
      }
      $('.comments').prev('.secondary-title').find('span').text(function () {
        var num = parseInt($(this).text(), 10);
        return isNaN(num) ? 1 : num + 1;
      });
      setTimeout(function () {
        newComment.removeClass('comments__item--new');
      }, 3000);
      if (window.location.pathname === '/rating') {
        //showDiamondFall();
        if ($('.tamada-block').length) {
          var tamadaValue = data.tamada_value;
          if (tamadaValue > 100) {
            tamadaValue = 100;
          }
          $('.tamada-block__bar-fill').css('width', tamadaValue.toString() + '%');
          $('.tamada-block__text').text(parseInt(data.tamada_value).toString() + '%');
        }
      }
    });
  }
  $('body').on('click', '.reader__notification-close', function () {
    $('.reader__notification').remove();
    return false;
  });

  /* comments */
  $('.comments__send-form--mini').on('click', function () {
    $(this).removeClass('comments__send-form--mini');
  });
  $('body').on('click', '.comments__reply-btn', function () {
    $('.comments__list .comments__send-form').remove();
    var form = $(this).closest('.comments').find('.comments__send-form').clone(true).removeClass('comments__send-form--mini');
    form.find('textarea').val('');
    $(this).closest('.comments__footer').after(form);
  });
  $('body').on('click', '.comments__close-form-btn', function () {
    $(this).closest('.comments__send-form').remove();
  });
  $('body').on('click', '.comments__send-btn', function (e) {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    if (button.attr('stop')) return false;
    var text = $(this).closest('.comments__send-form').find('textarea').val();
    var stop_w = ["мангалиб", "mangalib", "mangalib.me", "remanga", "remanga.org", "реманга", "решка", "подслушано", "прослушка", "подслушка", "wamanga", "wamanga.me", "manga-shi", "manga-shi.com", "senkuro", "senkuro.com", "porn"];
    if (stop_w.some(function (word) {
      return text.includes(word);
    })) {
      e.preventDefault();
      toastr.error("Ваш запрос содержит запрещённые слова.");
      return;
    }
    if (!text) {
      toastr.error("Комментарий не может быть пустым");
      return false;
    }
    var commentable_id = $(this).closest('.comments').attr('data-id');
    var commentable_type = $(this).closest('.comments').attr('data-type');
    var is_trade = $('.comments__change-sort[data-type="card"]').hasClass('comments__change-sort--active') ? 1 : 0;
    var is_raffle = $('.comments__actions-btn--raffle-active').length ? 1 : 0;
    var form = $(this).closest('.comments__send-form');
    var parent = $(this).closest('.comments__item');
    var parent_id = parent.length ? parent.attr('id').replace('comment_', '') : null;
    var summon_ids = $('.comments__summon-item').slice(0, 5).map(function () {
      return $(this).data('id');
    }).get();
    var gif_image = $('.comments__send-form-image video').attr('src') || null;
    button.attr('stop', true);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments", {
      'text': text,
      'commentable_id': commentable_id,
      'commentable_type': commentable_type,
      'parent_id': parent_id,
      'summon_ids': summon_ids,
      'gif_image': gif_image,
      'is_trade': is_trade,
      'is_raffle': is_raffle
    }, button, function (result) {
      $('.comments__summon-item').remove();
      $('.comments__send-form-image').remove();
      var $comment = $(result.comment);
      if (parent_id) {
        form.closest('.comments__item').find('.comments__children').first().show().prepend($comment);
        form.remove();
      } else {
        var $pinned = $('.comments__list .comments__item--pinned').first();
        $pinned.length ? $pinned.after($comment) : $('.comments__list').prepend($comment);
        form.find('textarea').val("");
      }
      var comments_count = $('.comments').prev().find('.secondary-text');
      comments_count.text(Number(comments_count.text() ? comments_count.text() : 0) + 1);
      if (result.token && typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] && $comment.attr('data-s') === '0') {
        var fav_count = -1;
        if ($('.reader-menu__item--like').length) fav_count = $('.reader-menu__item--like span').attr('data-fav-count');
        if ($('.manga').length) fav_count = $('.manga').attr('data-fav-count');
        var tamada_value = result.tamada_value !== undefined && result.tamada_value !== null ? result.tamada_value.toString() : '0';
        _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('new-comment', {
          'htmlComment': result.comment,
          'hash': result.token,
          'details': result.details,
          'tamada_value': tamada_value,
          'room': room,
          'parent_id': parent_id,
          'comm_count': comments_count.text(),
          'fav_count': fav_count
        });
      }
      updateVideos(lazyLoadInstance, videos);
    });
    setTimeout(function () {
      button.removeAttr('stop');
    }, 1100);
  });
  $('body').on('click', '.comments__collapse', function () {
    $(this).closest('.comments__children').hide().after("<div class=\"comments__children-open\">\u0420\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0435\u0442\u043A\u0443</div>");
  });
  $('body').on('click', '.comments__children-open', function () {
    $(this).closest('.comments__item').find('.comments__avatar img').each(function () {
      $(this).attr('src', $(this).attr('data-src'));
    });
    $(this).prev('.comments__children').show();
    $(this).remove();
  });
  $('body').on('click', '.new-feed__button--favourites', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    var comment_id = $(this).closest('.new-feed__comment').attr('data-id');
    button.attr('disabled', true);
    $.post("/comments/vote", {
      'id': comment_id,
      'type': 'like'
    }, function (result) {
      button.find('span').text(parseInt(button.find('span').text()) + 1);
    });
  });
  $('body').on('click', '.comments__rating-btn', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    button.attr('disabled', true);
    var comment_id = $(this).closest('.comments__item').attr('id').replace('comment_', '');
    var comment_rating_type = $(this).hasClass('comments__rating-btn--dislike') ? 'dislike' : 'like';
    var old_number_div = $(this).closest('.comments__rating').find('.comments__rating-number');
    $.post("/comments/vote", {
      'id': comment_id,
      'type': comment_rating_type
    }, function (result) {
      old_number_div.text(result.rating['number']);
      old_number_div.attr('class', 'comments__rating-number value comments__rating-number--' + result.rating['color']);
      var new_number_div = old_number_div.clone().addClass('value-enter');
      new_number_div.insertAfter(old_number_div);
      setTimeout(function () {
        new_number_div.removeClass('value-enter').addClass('value-enter-active');
        old_number_div.addClass('value-leave-active');
      }, 15);
      setTimeout(function () {
        old_number_div.remove();
        button.closest('.comments__rating').find('.comments__rating-number').not(':last').remove();
      }, 300);
      if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined') {
        _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('new-com-like', {
          'com_id': parseInt(comment_id),
          'color': result.rating['color'],
          'value': parseInt(result.rating['number']),
          'room': room
        });
      }
    }).always(function () {
      setTimeout(function () {
        button.attr('disabled', false);
      }, 1000);
    });
  });
  $('body').on('click', '.comments__load-more', function () {
    var id = $(this).closest('.comments').attr('data-id');
    var type = $(this).closest('.comments').attr('data-type');
    var offset = $(this).closest('.comments').find('.comments__list > .comments__item').length;
    var total_count = $(this).closest('.comments').attr('data-count');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments/load", {
      'id': id,
      'type': type,
      'offset': offset
    }, button, function (result) {
      $('.comments__list').append(result.comments);
      if ($('.comments__list > .comments__item').length >= total_count) button.remove();
      updateVideos(lazyLoadInstance, videos);
    });
  });
  $('body').on('click', '.comments__change-sort', function () {
    var id = $(this).closest('.comments').attr('data-id');
    var type = $(this).closest('.comments').attr('data-type');
    var offset = 0;
    var total_count = $(this).closest('.comments').attr('data-count');
    var sort_type = $(this).attr('data-type');
    var button = $(this);
    $('.comments__change-sort').removeClass('comments__change-sort--active');
    button.addClass('comments__change-sort--active');
    if (sort_type == "id" || sort_type == "rating") {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('sort_comments', sort_type, 360);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('comm_trade', '0', 360);
    } else {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('sort_comments', 'id', 360);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('comm_trade', '1', 360);
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments/load", {
      'id': id,
      'type': type,
      'offset': offset
    }, button, function (result) {
      $('.comments__list').html(result.comments);
      if ($('.comments__list > .comments__item').length >= total_count || sort_type == "card") $('.comments__load-more').remove();
      updateVideos(lazyLoadInstance, videos);
    });
  });
  $('body').on('click', '.comments__actions-btn--spoiler', function () {
    var textArea = $(this).closest('.comments__send-form').find('textarea');
    textArea.val(textArea.val() + "[spoiler][/spoiler]");
  });
  $('body').on('click', '.spoiler', function () {
    $(this).find('.spoiler__button, .spoiler__content').toggle();
  });
  $('body').on('click', '.comments__edit-btn', function () {
    $('.comments__send-form--edit').each(function (a) {
      var item = $(this).closest('.comments__item');
      item.find('.comments__body').show();
      item.find('.comments__footer').show();
      $(this).remove();
    });
    var commentId = $(this).attr('data-comment-id');
    var item = $('#comment_' + $(this).attr('data-comment-id')).find('.comments__inner').first();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/comments/' + commentId + '/edit', {}, button, function (result) {
      item.find('.comments__body').hide();
      item.find('.comments__footer').hide();
      item.append(result.content);
    });
    return false;
  });
  $('body').on('click', '.comments__delete-btn', function () {
    var _$$attr;
    var commentId = $(this).attr('data-comment-id');
    var item = $('#comment_' + $(this).attr('data-comment-id'));
    var button = $(this);
    var del_token = window.del_token;
    var ban_time = (_$$attr = $(this).attr('data-ban-time')) !== null && _$$attr !== void 0 ? _$$attr : null;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/comments/' + commentId + '/delete', {
      ban_time: ban_time
    }, button, function (result) {
      item.remove();
      _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('del-com', {
        room: room,
        value: parseInt(commentId),
        del_token: del_token
      });
    });
    return false;
  });
  $('body').on('click', '.comments__cancel-edit', function () {
    var item = $(this).closest('.comments__item');
    item.find('.comments__send-form').remove();
    item.find('.comments__body').show();
    item.find('.comments__footer').show();
  });
  $('body').on('click', '.comments__update-btn', function () {
    var commentId = $(this).closest('.comments__item').attr('id').replace('comment_', '');
    var item = $(this).closest('.comments__item');
    var text = item.find('.comments__send-form--edit textarea').val();
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/comments/' + commentId, {
      'text': text
    }, button, function (result) {
      item.replaceWith(result.comment);
      updateVideos(lazyLoadInstance, videos);
    });
    return false;
  });
  $('body').on('click', '.comments__report-btn', function () {
    if ($("#modal-comment-report").length === 0) {
      $('body').append('<div class="modal" id="modal-comment-report" tabindex="-1">' + '<div class="modal__inner">' + '<div class="modal__content">' + '<div class="modal__body">' + '<div class="modal__close" data-close-modal><i class="icon icon-close"></i></div>' + '<div class="secondary-title">Пожаловаться</div>' + '<form class="modal-report">' + '<input type="hidden" name="model_type" value="Comment">' + '<input type="hidden" name="model_id" value>' + '<select type="text" name="type" class="sl-select default-select">' + '<option value="Другое">Другое</option>' + '<option value="Мат">Мат</option>' + '<option value="Спам">Спам</option>' + '</select>' + '<textarea name="message" cols="30" rows="10" class="form__field" placeholder="Ваше сообщение"></textarea>' + '<button class="button button--primary modal-report__send-btn">Отправить</button>' + '</form>' + '</div>' + '</div>' + '</div>' + '</div>');
      $("#modal-comment-report select.sl-select").slimSelect();
    }
    var comment_id = $(this).attr('data-id');
    $('#modal-comment-report input[name="model_id"]').val(comment_id);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal("modal-comment-report");
    return false;
  });
  $('body').on('click', '.comments__status', function () {
    var user_id = $(this).closest('.comments__item').attr('data-user-id');
    var club_status = $(this).attr('data-club-status');
    if (club_status) return false;
    var modal_div = "<div class=\"modal\" id=\"modal-comment-status\" tabindex=\"-1\">\n" + "    <div class=\"modal__inner\">\n" + "        <div class=\"modal__content\">\n" + "<div class=\"modal__body\"></div>\n" + "        </div>\n" + "    </div>\n" + "</div>";
    if (!$('#modal-comment-status').length) $('body').append(modal_div);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal("modal-comment-status");
    $.post("/users/" + user_id + "/status", {}, function (result) {
      $('#modal-comment-status .modal__body').html(result.content);
    });
    return false;
  });

  /* $('body').on('click', '.comments__sticker', function() {
       let src = $(this).attr('src');
       let stickerPackId = src.match(/\/img\/stickers\/(\d+)/)?.[1];
        Number.isInteger(+stickerPackId) ? document.location.href = '/products/stickerpack?item=' + stickerPackId : console.error('Неверный ID стикерпака');
       return false;
   });*/

  $('body').on('click', '.comments__pin-btn', function () {
    var commentId = $(this).attr('data-comment-id');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/comments/pinned', {
      'id': commentId
    }, button, function (result) {
      toastr.success(result.message);
      $('.comments__pinned').remove();
      if (result.is_pinned) {
        $('#comment_' + commentId).find('.comments__footer').append('<div class="comments__pinned"><i class="icon icon-pin"></i>Закреплено</div>');
      }
    });
    return false;
  });
  $('body').on('click', '.comments-summon__item', function () {
    var userId = $(this).attr('data-id');
    if (userId == window.user_id) {
      toastr.error('Нельзя добавить себя');
      return false;
    }
    if ($('.comments__summon-item[data-id="' + userId + '"]').length > 0) {
      toastr.error('Нельзя повторно добавить пользователя');
      return false;
    }
    if ($('.comments__summon-item').length >= 5) {
      toastr.error('Нельзя добавить больше 5 пользователей');
      return false;
    }
    var name = $(this).text();
    var summonDiv = '<div class="comments__summon-item" data-id="' + userId + '">\n' + '            <div class="comments__summon-name">' + name + '</div>\n' + '        </div>';
    $(this).closest('.comments__send-form').find('.comments__summon-list').append(summonDiv);
    $('.comments-summon__input').val('');
  });
  $('body').on('click', '.comments__summon-item', function () {
    $(this).remove();
  });

  //comments alert
  function checkAlertDisplay() {
    return localStorage.getItem('alertDismissed') === 'true';
  }
  function addAlert($form) {
    if (!checkAlertDisplay() && $form.prev('.comments-alert').length === 0) {
      var alertDiv = '<div class="comments-alert">Внимание: За спам алмазами в главах и на страницах тайтла - последует блокировка.</div>';
      $form.before(alertDiv);
    }
  }
  $(document).on('click', '.comments-alert', function () {
    $(this).remove();
    localStorage.setItem('alertDismissed', 'true');
  });
  $('body').on('input', '.comments__send-form textarea', function () {
    var $form = $(this).closest('.comments__send-form');
    addAlert($form);
  });
  function handleInput() {
    var query = $(this).val();
    $.ajax({
      url: '/search/suggestionsUser?q=' + encodeURIComponent(query),
      method: 'GET',
      success: function success(response) {
        $('.comments-summon__list').empty();
        response.forEach(function (item) {
          var item_div = "<div class='comments-summon__item' data-id='" + item.id + "'><img src='/img/avatars/x35/" + item.avatar + "' alt='Аватарка'>" + item.name + "</div>";
          $('.comments-summon__list').append(item_div);
        });
        if (response.length === 0) {
          $('.comments-summon__list').append("<span class=\"search-result__empty\">Ничего не найдено</span>");
        }
      }
    });
  }
  var debouncedInput = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce(handleInput);
  $('body').on('input', '.comments-summon__input', debouncedInput);
  tippy.delegate('.comments', {
    content: '',
    target: '.comments__actions-btn--summon',
    allowHTML: true,
    theme: 'dropdown',
    placement: 'bottom',
    arrow: false,
    trigger: 'click',
    hideOnClick: true,
    interactive: true,
    onShow: function onShow(instance) {
      var menu = "<div class='comments-summon'><input class='comments-summon__input' type='text' placeholder='Найти пользователя'><div class='comments-summon__list'></div></div>";
      instance.setContent(menu);
    },
    onShown: function onShown(instance) {
      document.body.addEventListener('click', function (event) {
        if (event.target.closest('.comments-summon__item')) {
          instance.hide();
        }
      });
    }
  });
  tippy.delegate('.comments', {
    content: '',
    appendTo: function appendTo() {
      return document.body;
    },
    target: '.comments__controls-btn',
    allowHTML: true,
    theme: 'dropdown',
    placement: 'bottom',
    arrow: false,
    trigger: 'click',
    hideOnClick: true,
    interactive: true,
    onShow: function onShow(instance) {
      var item = instance.reference.closest('.comments__item');
      var comment_id = $(item).attr('id').replace('comment_', '');
      var time = Math.floor($(item).attr('data-time')) + 300;
      var is_editible = window.isAdmin || time > Math.floor(Date.now() / 1000);
      var pin_btn = '<button class="menu__item comments__pin-btn" data-comment-id="' + comment_id + '"><i class="icon icon-heart"></i> Закрепить</button>';
      var tip_btn = '<button class="menu__item comments__tip-btn" data-comment-id="' + comment_id + '"><i class="icon icon-heart"></i> Типнуть</button>';
      var edit_btn = '<button class="menu__item comments__edit-btn" data-comment-id="' + comment_id + '"><i class="icon icon-edit"></i> Отредактировать</button>';
      var del_btn = '<button class="menu__item comments__delete-btn" data-comment-id="' + comment_id + '"><i class="icon icon-delete"></i> Удалить</button>';
      var del_and_ban_btn = '<button class="menu__item comments__delete-btn" data-comment-id="' + comment_id + '" data-ban-time="60"><i class="icon icon-delete"></i> Удалить + бан 1 час</button>';
      var menu = '<div class="menu"><button class="menu__item comments__report-btn" data-id="' + comment_id + '"><i class="icon icon-report"></i> Пожаловаться</button>';
      if (window.user_id !== parseInt($(item).attr('data-user-id'))) {
        menu += tip_btn;
      }
      if (window.isAdmin || window.user_id == 94827 || window.user_id === parseInt($(item).attr('data-user-id'))) {
        if (is_editible) menu += edit_btn;
        menu += del_btn;
      } else if (/^\/users\/\d+$/.test(window.location.pathname) && window.location.pathname.split('/').pop() === window.user_id.toString()) {
        menu += del_btn;
      }
      if (window.isAdmin || /^\/users\/\d+$/.test(window.location.pathname) && window.location.pathname.split('/').pop() === window.user_id.toString()) {
        menu += pin_btn;
      }
      if (window.isAdmin) {
        menu += del_and_ban_btn;
      }
      menu += "</div>";
      instance.setContent(menu);
    },
    onShown: function onShown(instance) {
      document.querySelector('[data-tippy-root] [data-theme="dropdown"]').addEventListener('click', function (event) {
        instance.hide();
      });
    }
  });
  function escapeHtml(s) {
    return $('<div>').text(s || '').html();
  }
  tippy.delegate('body', {
    target: '.comments__tip',
    content: '',
    allowHTML: true,
    theme: 'comments-rating',
    placement: 'bottom',
    arrow: false,
    interactive: true,
    trigger: 'click',
    appendTo: function appendTo() {
      return document.body;
    },
    onCreate: function onCreate(instance) {
      instance.is_done = false;
    },
    onShow: function onShow(instance) {
      var item = instance.reference.closest('.comments__item');
      var comment_id = $(item).attr('id').replace('comment_', '');
      if (window.ajaxInProgress) return;
      if (instance.is_done) return;
      instance.is_done = true;
      window.ajaxInProgress = true;
      $.ajax({
        url: '/comments/' + comment_id + '/tipInfo',
        method: 'post',
        success: function success(data) {
          var list = Array.isArray(data.result) ? data.result : [];
          var topHtml = list.length ? list.slice(0, 3).map(function (u) {
            return "\n                        <a href=\"/users/".concat(u.id, "\" class=\"tip-popup__top-item\" target=\"_blank\" rel=\"noopener\">\n                            <img src=\"").concat(u.small_avatar || '/img/avatars/placeholder_x35.jpg', "\" alt=\"").concat(escapeHtml(u.name), "\" class=\"tip-popup__avatar\">\n                            <span class=\"tip-popup__name\">").concat(escapeHtml(u.name), "</span>\n                            <span class=\"tip-popup__count\">").concat(u.tips_count, "</span>\n                        </a>\n                    ");
          }).join('') : "<div class=\"tip-popup__empty\">\u041F\u043E\u043A\u0430 \u043D\u0438\u043A\u0442\u043E \u043D\u0435 \u0442\u0438\u043F\u043D\u0443\u043B</div>";
          instance.setContent("\n                    <div class=\"tip-popup\" data-comment-id=\"".concat(comment_id, "\">\n                        <div class=\"tip-popup__buttons\">\n                            <button class=\"tip-popup__button tip-popup__button--1\" data-amount=\"1\">+1 \uD83D\uDC8E</button>\n                            <button class=\"tip-popup__button tip-popup__button--10\" data-amount=\"10\">+10 \uD83D\uDC8E</button>\n                        </div>\n                        <div class=\"tip-popup__top\">").concat(topHtml, "</div>\n                    </div>\n                "));
        },
        complete: function complete() {
          window.ajaxInProgress = false;
        }
      });
    }
  });
  tippy.delegate('body', {
    target: '.comments__rating-number',
    content: '',
    allowHTML: true,
    theme: 'comments-rating',
    placement: 'bottom',
    arrow: false,
    interactive: true,
    appendTo: function appendTo() {
      return document.body;
    },
    onCreate: function onCreate(instance) {
      instance.is_done = false;
    },
    onShow: function onShow(instance) {
      if (window.ajaxInProgress) return;
      if (instance.is_done) return;
      instance.is_done = true;
      window.ajaxInProgress = true;
      $.ajax({
        url: instance.reference.getAttribute('data-ajax'),
        method: 'post',
        success: function success(data) {
          instance.setContent(data.content);
        },
        complete: function complete() {
          window.ajaxInProgress = false;
        }
      });
    }
  });
  if (window.location.hash && window.location.hash.indexOf('comment_') !== -1) {
    var hash = window.location.hash.substring(1);
    var commentToggle = $('.reader-menu__item--comment');
    if (commentToggle.length) {
      setTimeout(function () {
        commentToggle.click();
      }, 100);
    }
    setTimeout(function () {
      var comment = $('#' + hash);
      var openParentComments = function openParentComments(element) {
        element.parents('.comments__children').each(function () {
          if ($(this).css('display') === 'none') {
            $(this).css('display', '');
            $(this).siblings('.comments__children-open').remove();
          }
        });
      };
      if (comment.length) {
        comment.addClass('comments__item--target');
        openParentComments(comment);
        var scrollElement = commentToggle.length ? $('.reader-comments') : $('html, body');
        scrollElement.animate({
          scrollTop: comment.offset().top
        }, 50);
      } else {
        var comment_id = hash.replace("comment_", "");
        $.post('/comments/' + comment_id + '/loadOne', {}, function (result) {
          $('.comments__list').prepend(result.content);
          comment = $("#" + hash);
          comment.addClass('comments__item--target');
          openParentComments(comment);
          updateVideos(lazyLoadInstance, videos);
          $('html, body').animate({
            scrollTop: comment.offset().top
          }, 50);
        });
      }
    }, 500);
  }
  setInterval(updateTime, 30000);
  updateTime();
  $(window).on('scroll', function () {
    videos.each(function () {
      if (isElementInViewport(this)) {
        this.play();
      } else {
        this.pause();
      }
    });
  });
}
function updateTime() {
  $('.comments__item').each(function () {
    var timePublished = parseInt($(this).attr('data-time')) * 1000;
    var text = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.commentTimeAgo(timePublished);
    if (text) $(this).find('.comments__date').text(text);
  });
}
function isElementInViewport(el) {
  var rect = el.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}
function updateVideos(lazyLoadInstance, videos) {
  if (lazyLoadInstance && typeof lazyLoadInstance.update === 'function') {
    lazyLoadInstance.update();
  } else {
    console.warn('lazyLoadInstance or update method is not available.');
  }
  videos = $('.comments__list video');
  $('.comments__avatar img').each(function () {
    $(this).attr('src', $(this).attr('data-src'));
  });
}
var queue = [];
var isProcessing = false;
function createDiamond() {
  var diamond = $('<div class="diamond-rating"></div>');
  diamond.css({
    left: "".concat(10 + Math.random() * 80, "vw")
  });
  $('body').append(diamond);
  setTimeout(function () {
    diamond.remove();
  }, 5000);
  if (window.isAuth && !localStorage.getItem('diamondFallAchieved')) {
    localStorage.setItem('diamondFallAchieved', 'true');
    $.post("/achievements/diamond-fall", {}, function () {});
  }
}
function showDiamondFall() {
  var now = new Date();
  var moscowOffset = 3 * 60 * 60 * 1000;
  var moscowTime = new Date(now.getTime() + moscowOffset);
  var moscowHours = moscowTime.getUTCHours();
  var moscowMinutes = moscowTime.getUTCMinutes();
  if (moscowHours === 0 && moscowMinutes >= 0 && moscowMinutes < 4) {
    queueDiamond();
  }
}
function queueDiamond() {
  queue.push(function () {
    return createDiamond();
  });
  processQueue();
}
function processQueue() {
  return _processQueue.apply(this, arguments);
}
function _processQueue() {
  _processQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var task;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!isProcessing) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            isProcessing = true;
          case 3:
            if (!(queue.length > 0)) {
              _context.next = 10;
              break;
            }
            task = queue.shift();
            task();
            _context.next = 8;
            return delay(180);
          case 8:
            _context.next = 3;
            break;
          case 10:
            isProcessing = false;
          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _processQueue.apply(this, arguments);
}
function delay(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
}

/***/ }),

/***/ "./resources/js/modules/commonFunctions.js":
/*!*************************************************!*\
  !*** ./resources/js/modules/commonFunctions.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "animationButton": () => (/* binding */ animationButton),
/* harmony export */   "appendMangaUpdates": () => (/* binding */ appendMangaUpdates),
/* harmony export */   "classForSearchRating": () => (/* binding */ classForSearchRating),
/* harmony export */   "closeModals": () => (/* binding */ closeModals),
/* harmony export */   "commentTimeAgo": () => (/* binding */ commentTimeAgo),
/* harmony export */   "copyToClipboard": () => (/* binding */ copyToClipboard),
/* harmony export */   "createModal": () => (/* binding */ createModal),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "formatNumberK": () => (/* binding */ formatNumberK),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getCookie": () => (/* binding */ getCookie),
/* harmony export */   "isGuest": () => (/* binding */ isGuest),
/* harmony export */   "openModal": () => (/* binding */ openModal),
/* harmony export */   "post": () => (/* binding */ post),
/* harmony export */   "setCookie": () => (/* binding */ setCookie),
/* harmony export */   "setMangaStatus": () => (/* binding */ setMangaStatus),
/* harmony export */   "updateCardIds": () => (/* binding */ updateCardIds)
/* harmony export */ });
function setMangaStatus() {
  if (typeof window.bookmarks_arr == 'undefined') return;
  var eng_names = {
    'Читаю': 'reading',
    'Буду читать': 'will-read',
    'Прочитано': 'read',
    'Заброшено': 'abandon'
  };
  $('.cards__item').each(function () {
    var manga_id = Number($(this).attr('data-id'));
    var item = window.bookmarks_arr.find(function (e) {
      return e.i === manga_id;
    });
    if (item) {
      var label = '<div class="bookmark-label bookmark-label--' + eng_names[item.t] + '">' + item.t + '</div>';
      $(this).append(label);
    }
  });
}
function debounce(func) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 850;
  var timer;
  return function () {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timer);
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, timeout);
  };
}
function openModal(selector) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var modal = $('#' + selector);
  if (attributes) {
    $.each(attributes, function (key, value) {
      modal.attr(key, value);
    });
  }
  modal.toggleClass('modal--open');
  if (selector == "modal-search") $('.search-bar__input').val('');
  $('.search-result').hide();
  $('.search-bar__content').show();
  setTimeout(function () {
    $('.search-bar__input').focus();
  }, 300);
  $(document).on("mouseup.hideModal", function (e) {
    var container = $('#' + selector + " .modal__content");
    if (!container.is(e.target) && container.has(e.target).length === 0 && !e.target.classList.contains('ss-option')) {
      container.closest('.modal').toggleClass('modal--open');
      $(document).off('.hideModal');
    }
  });
}
function updateCardIds(cardId) {
  var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var $element = $('.card-filter-list');
  var attrName = 'data-cards-ids';
  var ids = $element.attr(attrName) ? $element.attr(attrName).split(' ') : [];
  if (remove) {
    ids = ids.filter(function (id) {
      return id !== cardId.toString();
    });
  } else {
    if (!ids.includes(cardId.toString())) ids.push(cardId);
  }
  ids.length ? $element.attr(attrName, ids.join(' ')) : $element.removeAttr(attrName);
  if (remove) $('.card-filter-list__card[data-id="' + cardId + '"]').removeClass('card-filter-list__card--exists');else $('.card-filter-list__card[data-id="' + cardId + '"]').addClass('card-filter-list__card--exists');
}
function createModal(modalId, modalContent) {
  var modal = $('#' + modalId);
  if (modal.length) {
    modal.find('.modal__body').children(':not(.modal__close)').remove();
    modal.find('.modal__close').after(modalContent);
  } else {
    var modalHtml = "\n            <div class=\"modal\" id=\"".concat(modalId, "\" tabindex=\"-1\">\n                <div class=\"modal__inner\">\n                    <div class=\"modal__content\">\n                        <div class=\"modal__body\">\n                            <div class=\"modal__close\" data-close-modal=\"\"><i class=\"icon icon-close\"></i></div>\n                        </div>\n                    </div>\n                </div>\n            </div>");
    $('body').append(modalHtml);
    modal = $('#' + modalId);
    modal.find('.modal__close').after(modalContent);
  }
  modal.toggleClass('modal--open');
  $(document).on("mouseup.hideModal", function (e) {
    var container = $('#' + modalId + " .modal__content");
    if (!container.is(e.target) && container.has(e.target).length === 0 && !e.target.classList.contains('ss-option')) {
      container.closest('.modal').toggleClass('modal--open');
      $(document).off('.hideModal');
    }
  });
}
function closeModals() {
  $(document).off('.hideModal');
  $('.modal').removeClass('modal--open');
}
function isGuest() {
  if (!window.isAuth) {
    tippy.hideAll();
    openModal('modal-auth');
    return true;
  }
  return false;
}
function appendMangaUpdates(offset) {
  $.post('/bookmarks/lastUpdates', {
    offset: offset
  }, function (result) {
    $('.updates--my-list').append(result.html);
    if (offset === 0 && result.html === "") $('.updates--my-list').append("Добавьте мангу в список");
  });
}
function get(url, data, button, callback) {
  if (button) button.attr('disabled', true).addClass('button--loading');
  $.get(url, callback).always(function () {
    if (button) button.attr('disabled', false).removeClass('button--loading');
  });
}
function post(url, data, button, callback) {
  if (button) button.attr('disabled', true).addClass('button--loading');
  $.post(url, data, callback).always(function () {
    if (button) button.attr('disabled', false).removeClass('button--loading');
  });
}
function setCookie(name, value, days) {
  var expires = "";
  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }
  document.cookie = name + "=" + (value || "") + expires + "; path=/";
}
function getCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1, c.length);
    }
    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
}
function commentTimeAgo(date) {
  var now = new Date();
  var seconds = Math.round((now - date) / 1000);
  var minutes = Math.round(seconds / 60);
  var hours = Math.round(minutes / 60);
  var days = Math.round(hours / 24);
  function checkAndReturn(value, words) {
    var result = declension(value, words);
    if (result === undefined) {
      return "1 секунду назад";
    }
    return value + " " + result + " назад";
  }
  if (seconds < 60) {
    return checkAndReturn(seconds, ['секунду', 'секунды', 'секунд']);
  } else if (minutes < 60) {
    return checkAndReturn(minutes, ['минуту', 'минуты', 'минут']);
  } else if (hours < 24) {
    return checkAndReturn(hours, ['час', 'часа', 'часов']);
  } else {
    return "";
  }
}
function declension(number, titles) {
  var cases = [2, 0, 1, 1, 1, 2];
  return titles[number % 100 > 4 && number % 100 < 20 ? 2 : cases[number % 10 < 5 ? number % 10 : 5]];
}
function formatNumberK(num) {
  return num >= 1000 ? (num / 1000).toFixed(0) + 'K' : num.toString();
}
function animationButton(elem) {
  var d = {
    "v": "4.8.0",
    "meta": {
      "g": "LottieFiles AE 3.1.1",
      "a": "",
      "k": "",
      "d": "",
      "tc": ""
    },
    "fr": 60,
    "ip": 0,
    "op": 71,
    "w": 32,
    "h": 32,
    "nm": "lottie like web",
    "ddd": 0,
    "assets": [],
    "layers": [{
      "ddd": 0,
      "ind": 1,
      "ty": 4,
      "nm": "like active day Outlines",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [10, 10, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 10,
            "s": [0, 0, 100]
          }, {
            "i": {
              "x": [0.833, 0.833, 0.833],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.167, 0.167, 0.167],
              "y": [0, 0, 0]
            },
            "t": 20,
            "s": [120, 120, 100]
          }, {
            "i": {
              "x": [0.833, 0.833, 0.833],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.167, 0.167, 0.167],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [80, 80, 100]
          }, {
            "i": {
              "x": [0.833, 0.833, 0.833],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.167, 0.167, 0.167],
              "y": [0, 0, 0]
            },
            "t": 40,
            "s": [110, 110, 100]
          }, {
            "t": 70,
            "s": [100, 100, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "ind": 0,
          "ty": "sh",
          "ix": 1,
          "ks": {
            "a": 0,
            "k": {
              "i": [[0.658, -0.373], [0.065, -0.043], [0.069, 0.039], [1.524, 0], [0.517, -1.881], [-1.279, -1.595], [-1.208, -0.838], [-0.459, -0.252], [-0.194, -0.085], [-0.116, -0.038], [-0.295, 0], [-0.076, 0.024], [-0.094, 0.042], [-0.227, 0.126], [-0.611, 0.423], [-1.087, 1.353], [0.498, 1.813], [2.61, 0]],
              "o": [[-0.068, 0.039], [-0.065, -0.043], [-0.658, -0.373], [-2.609, 0], [-0.498, 1.813], [1.085, 1.353], [0.612, 0.423], [0.228, 0.126], [0.095, 0.042], [0.075, 0.024], [0.295, 0], [0.115, -0.037], [0.194, -0.085], [0.459, -0.252], [1.208, -0.838], [1.278, -1.595], [-0.517, -1.881], [-1.524, 0]],
              "v": [[0.201, -6.14], [0, -6.017], [-0.201, -6.14], [-3.436, -7.081], [-8.115, -3.467], [-6.978, 2.125], [-3.214, 5.506], [-1.572, 6.533], [-0.932, 6.855], [-0.61, 6.98], [0, 7.081], [0.611, 6.979], [0.932, 6.855], [1.571, 6.533], [3.214, 5.506], [6.979, 2.125], [8.115, -3.467], [3.436, -7.081]],
              "c": true
            },
            "ix": 2
          },
          "nm": "Path 2",
          "mn": "ADBE Vector Shape - Group",
          "hd": false
        }, {
          "ty": "gf",
          "o": {
            "a": 0,
            "k": 100,
            "ix": 10
          },
          "r": 1,
          "bm": 0,
          "g": {
            "p": 3,
            "k": {
              "a": 0,
              "k": [0, 0.824, 0.075, 0.075, 0.556, 0.912, 0.288, 0.288, 1, 1, 0.502, 0.502],
              "ix": 9
            }
          },
          "s": {
            "a": 0,
            "k": [0, 7.078],
            "ix": 5
          },
          "e": {
            "a": 0,
            "k": [0.016, -7.078],
            "ix": 6
          },
          "t": 1,
          "nm": "Gradient Fill 1",
          "mn": "ADBE Vector Graphic - G-Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [10, 9.999],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Group 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 0,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 2,
      "ty": 3,
      "nm": "Null 5",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [-55]
          }, {
            "t": 38,
            "s": [-43]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [14, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 3,
      "ty": 4,
      "nm": "burst 12",
      "parent": 2,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [2, -7, 0],
            "to": [0, -1.167, 0],
            "ti": [0, 1.167, 0]
          }, {
            "t": 40,
            "s": [2, -14, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 4,
      "ty": 4,
      "nm": "burst 11",
      "parent": 2,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-2, -7, 0],
            "to": [0, -0.833, 0],
            "ti": [0, 0.833, 0]
          }, {
            "t": 40,
            "s": [-2, -12, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 5,
      "ty": 3,
      "nm": "Null 4",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [-120]
          }, {
            "t": 38,
            "s": [-108]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [14, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 6,
      "ty": 4,
      "nm": "burst 10",
      "parent": 5,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [2, -7, 0],
            "to": [0, -1.167, 0],
            "ti": [0, 1.167, 0]
          }, {
            "t": 40,
            "s": [2, -14, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 7,
      "ty": 4,
      "nm": "burst 9",
      "parent": 5,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-2, -7, 0],
            "to": [0, -0.833, 0],
            "ti": [0, 0.833, 0]
          }, {
            "t": 40,
            "s": [-2, -12, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 8,
      "ty": 3,
      "nm": "Null 3",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [180]
          }, {
            "t": 38,
            "s": [192]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 9,
      "ty": 4,
      "nm": "burst 8",
      "parent": 8,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [2, -7, 0],
            "to": [0, -1.167, 0],
            "ti": [0, 1.167, 0]
          }, {
            "t": 40,
            "s": [2, -14, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 10,
      "ty": 4,
      "nm": "burst 7",
      "parent": 8,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-2, -7, 0],
            "to": [0, -0.833, 0],
            "ti": [0, 0.833, 0]
          }, {
            "t": 40,
            "s": [-2, -12, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 11,
      "ty": 3,
      "nm": "Null 2",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [120]
          }, {
            "t": 38,
            "s": [132]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [18, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 12,
      "ty": 4,
      "nm": "burst 6",
      "parent": 11,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [2, -7, 0],
            "to": [0, -1.167, 0],
            "ti": [0, 1.167, 0]
          }, {
            "t": 40,
            "s": [2, -14, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 13,
      "ty": 4,
      "nm": "burst 5",
      "parent": 11,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-2, -7, 0],
            "to": [0, -0.833, 0],
            "ti": [0, 0.833, 0]
          }, {
            "t": 40,
            "s": [-2, -12, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 14,
      "ty": 3,
      "nm": "Null 1",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [55]
          }, {
            "t": 38,
            "s": [67]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [18, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 15,
      "ty": 4,
      "nm": "burst 4",
      "parent": 14,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [2, -7, 0],
            "to": [0, -1.167, 0],
            "ti": [0, 1.167, 0]
          }, {
            "t": 40,
            "s": [2, -14, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 16,
      "ty": 4,
      "nm": "burst 3",
      "parent": 14,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-2, -7, 0],
            "to": [0, -0.833, 0],
            "ti": [0, 0.833, 0]
          }, {
            "t": 40,
            "s": [-2, -12, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 17,
      "ty": 3,
      "nm": "Null 6",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 0,
          "ix": 11
        },
        "r": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 20,
            "s": [55]
          }, {
            "t": 38,
            "s": [67]
          }],
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [18, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 0,
          "k": [100, 100, 100],
          "ix": 6
        }
      },
      "ao": 0,
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 18,
      "ty": 4,
      "nm": "burst 2",
      "parent": 17,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": -55,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-5.734, -4.015, 0],
            "to": [-0.956, -0.669, 0],
            "ti": [0.956, 0.669, 0]
          }, {
            "t": 40,
            "s": [-11.468, -8.03, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 19,
      "ty": 4,
      "nm": "burst 1",
      "parent": 17,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": -55,
          "ix": 10
        },
        "p": {
          "a": 1,
          "k": [{
            "i": {
              "x": 0.667,
              "y": 1
            },
            "o": {
              "x": 0.333,
              "y": 0
            },
            "t": 20,
            "s": [-8.028, -0.738, 0],
            "to": [-0.683, -0.478, 0],
            "ti": [0.683, 0.478, 0]
          }, {
            "t": 40,
            "s": [-12.124, -3.606, 0]
          }],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 30,
            "s": [100, 100, 100]
          }, {
            "t": 40,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [2, 2],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.996078431373, 0.624990425858, 0.650582646389, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 20,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 20,
      "ty": 4,
      "nm": "like inactive day Outlines",
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [10, 10, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 0,
            "s": [100, 100, 100]
          }, {
            "t": 10,
            "s": [0, 0, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "ind": 0,
          "ty": "sh",
          "ix": 1,
          "ks": {
            "a": 0,
            "k": {
              "i": [[-0.432, 1.573], [-2.16, 0], [-0.626, -0.355], [-0.146, -0.103], [-0.254, 0.144], [-1.302, 0], [-0.439, -1.599], [1.1, -1.373], [1.175, -0.816], [0.431, -0.237], [0.163, -0.071], [0.081, -0.025], [0.159, 0], [0.059, 0.02], [0.08, 0.036], [0.214, 0.117], [0.591, 0.409], [1.015, 1.266]],
              "o": [[0.439, -1.599], [1.302, 0], [0.254, 0.144], [0.146, -0.103], [0.627, -0.355], [2.159, 0], [0.433, 1.573], [-1.015, 1.266], [-0.591, 0.409], [-0.214, 0.117], [-0.08, 0.036], [-0.058, 0.02], [-0.158, 0], [-0.08, -0.025], [-0.163, -0.071], [-0.432, -0.237], [-1.176, -0.816], [-1.101, -1.373]],
              "v": [[-7.314, -3.247], [-3.437, -6.25], [-0.611, -5.417], [-0.001, -5], [0.61, -5.417], [3.436, -6.25], [7.313, -3.247], [6.33, 1.604], [2.74, 4.822], [1.17, 5.805], [0.598, 6.092], [0.353, 6.187], [-0.001, 6.25], [-0.355, 6.187], [-0.599, 6.092], [-1.171, 5.805], [-2.741, 4.822], [-6.33, 1.604]],
              "c": true
            },
            "ix": 2
          },
          "nm": "Path 1",
          "mn": "ADBE Vector Shape - Group",
          "hd": false
        }, {
          "ty": "st",
          "c": {
            "a": 0,
            "k": [0.952941176471, 0.392156862745, 0.427450980392, 1],
            "ix": 3
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 4
          },
          "w": {
            "a": 0,
            "k": 1.663,
            "ix": 5
          },
          "lc": 2,
          "lj": 2,
          "bm": 0,
          "nm": "Stroke 1",
          "mn": "ADBE Vector Graphic - Stroke",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [10, 10.001],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Group 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 0,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 21,
      "ty": 4,
      "nm": "circle 2 outline 2",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 26,
            "s": [24]
          }, {
            "t": 61,
            "s": [0]
          }],
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 15,
            "s": [0, 0, 100]
          }, {
            "t": 61,
            "s": [100, 100, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [32, 32],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "st",
          "c": {
            "a": 0,
            "k": [0.898039215686, 0.329411764706, 0.36862745098, 1],
            "ix": 3
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 4
          },
          "w": {
            "a": 0,
            "k": 2,
            "ix": 5
          },
          "lc": 1,
          "lj": 1,
          "ml": 4,
          "bm": 0,
          "nm": "Stroke 1",
          "mn": "ADBE Vector Graphic - Stroke",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 10,
      "op": 71,
      "st": 10,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 22,
      "ty": 4,
      "nm": "circle 2 outline",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 16,
            "s": [24]
          }, {
            "t": 51,
            "s": [0]
          }],
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 5,
            "s": [0, 0, 100]
          }, {
            "t": 51,
            "s": [100, 100, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [32, 32],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "st",
          "c": {
            "a": 0,
            "k": [0.898039215686, 0.329411764706, 0.36862745098, 1],
            "ix": 3
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 4
          },
          "w": {
            "a": 0,
            "k": 2,
            "ix": 5
          },
          "lc": 1,
          "lj": 1,
          "ml": 4,
          "bm": 0,
          "nm": "Stroke 1",
          "mn": "ADBE Vector Graphic - Stroke",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 2,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 0,
      "op": 71,
      "st": 0,
      "bm": 0
    }, {
      "ddd": 0,
      "ind": 23,
      "ty": 4,
      "nm": "circle 2",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667],
              "y": [1]
            },
            "o": {
              "x": [0.333],
              "y": [0]
            },
            "t": 16,
            "s": [32]
          }, {
            "t": 46,
            "s": [0]
          }],
          "ix": 11
        },
        "r": {
          "a": 0,
          "k": 0,
          "ix": 10
        },
        "p": {
          "a": 0,
          "k": [16, 16, 0],
          "ix": 2
        },
        "a": {
          "a": 0,
          "k": [0, 0, 0],
          "ix": 1
        },
        "s": {
          "a": 1,
          "k": [{
            "i": {
              "x": [0.667, 0.667, 0.667],
              "y": [1, 1, 1]
            },
            "o": {
              "x": [0.333, 0.333, 0.333],
              "y": [0, 0, 0]
            },
            "t": 5,
            "s": [0, 0, 100]
          }, {
            "t": 36,
            "s": [100, 100, 100]
          }],
          "ix": 6
        }
      },
      "ao": 0,
      "shapes": [{
        "ty": "gr",
        "it": [{
          "d": 1,
          "ty": "el",
          "s": {
            "a": 0,
            "k": [28, 28],
            "ix": 2
          },
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 3
          },
          "nm": "Ellipse Path 1",
          "mn": "ADBE Vector Shape - Ellipse",
          "hd": false
        }, {
          "ty": "fl",
          "c": {
            "a": 0,
            "k": [0.898039215686, 0.329411764706, 0.36862745098, 1],
            "ix": 4
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 5
          },
          "r": 1,
          "bm": 0,
          "nm": "Fill 1",
          "mn": "ADBE Vector Graphic - Fill",
          "hd": false
        }, {
          "ty": "tr",
          "p": {
            "a": 0,
            "k": [0, 0],
            "ix": 2
          },
          "a": {
            "a": 0,
            "k": [0, 0],
            "ix": 1
          },
          "s": {
            "a": 0,
            "k": [100, 100],
            "ix": 3
          },
          "r": {
            "a": 0,
            "k": 0,
            "ix": 6
          },
          "o": {
            "a": 0,
            "k": 100,
            "ix": 7
          },
          "sk": {
            "a": 0,
            "k": 0,
            "ix": 4
          },
          "sa": {
            "a": 0,
            "k": 0,
            "ix": 5
          },
          "nm": "Transform"
        }],
        "nm": "Ellipse 1",
        "np": 3,
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": false
      }],
      "ip": 0,
      "op": 71,
      "st": 0,
      "bm": 0
    }],
    "markers": []
  };
  elem.addClass('elem-animation');
  var e = document.createElement("div");
  e.classList.add("a-lottie");
  elem.append(e);
  var container_div = e;
  var animation = bodymovin.loadAnimation({
    container: container_div,
    renderer: 'svg',
    loop: false,
    autoplay: true,
    animationData: d
  });
  animation.addEventListener("complete", function () {
    animation.destroy();
    container_div.remove();
    elem.removeClass('elem-animation');
  });
}
function copyToClipboard(text) {
  navigator.clipboard.writeText(text);
}
function classForSearchRating(number) {
  if (number < 4) return "manga__rating--red";else if (number < 6) return "manga__rating--grey";else return "manga__rating--green";
}

/***/ }),

/***/ "./resources/js/modules/contractModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/contractModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeContract": () => (/* binding */ initializeContract)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
// resources/js/contract.js

function initializeContract() {
  // Работать только на /contract*
  var path = window.location && window.location.pathname ? window.location.pathname : '';
  if (!/^\/contract(\/|$)/.test(path)) {
    return;
  }
  var ns = '.mcg';
  var rootSel = '#modal-contract-gift .modal-contract-gift';
  var $doc = $(document);
  var debounce = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ && _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce ? _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce : function (fn) {
    var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
    var t;
    return function () {
      clearTimeout(t);
      var a = arguments,
        th = this;
      t = setTimeout(function () {
        return fn.apply(th, a);
      }, ms);
    };
  };
  var esc = function esc(s) {
    return $('<div>').text(s || '').html();
  };
  var reset = function reset() {
    var $r = $(rootSel);
    $r.find('.modal-contract-gift__select-input').val('');
    $r.find('.modal-contract-gift__clear').prop('hidden', true);
    $r.find('.modal-contract-gift__select-results').empty();
    $r.find('.modal-contract-gift__user-id').val('');
    $r.find('.modal-contract-gift__selected').prop('hidden', true).attr('data-user-id', '');
    $r.find('.modal-contract-gift__submit').prop('disabled', true);
  };
  $('body').on('input' + ns, rootSel + ' .modal-contract-gift__select-input', function () {
    var v = $(this).val().trim();
    $(this).siblings('.modal-contract-gift__clear').prop('hidden', !v);
  }).on('input' + ns, rootSel + ' .modal-contract-gift__select-input', debounce(function () {
    var $i = $(this),
      v = $i.val().trim(),
      $res = $i.closest('.modal-contract-gift').find('.modal-contract-gift__select-results');
    $res.empty();
    if (!v) return;
    $.get('/search/suggestionsUser', {
      q: v
    }).done(function (resp) {
      var list = Array.isArray(resp) ? resp : [];
      if (!list.length) {
        $res.html('<span class="search-result__empty">Ничего не найдено</span>');
        return;
      }
      $res.html(list.map(function (it) {
        var a = it.avatar ? '/img/avatars/x35/' + it.avatar : '/img/avatars/default.png';
        return "<div class=\"modal-contract-gift__select-item\" data-id=\"".concat(it.id, "\" data-name=\"").concat(esc(it.name), "\" data-avatar=\"").concat(a, "\"><img class=\"modal-contract-gift__select-item-avatar\" src=\"").concat(a, "\" alt=\"\"><span class=\"modal-contract-gift__select-item-name\">").concat(esc(it.name), "</span></div>");
      }).join(''));
    }).fail(function () {
      $res.html('<span class="search-result__empty">Ошибка запроса</span>');
    });
  }, 300)).on('click' + ns, rootSel + ' .modal-contract-gift__clear', function () {
    var $r = $(this).closest('.modal-contract-gift');
    $r.find('.modal-contract-gift__select-input').val('').trigger('input').focus();
    $r.find('.modal-contract-gift__select-results').empty();
  }).on('click' + ns, rootSel + ' .modal-contract-gift__select-item', function () {
    var $it = $(this),
      $r = $it.closest('.modal-contract-gift');
    var id = $it.data('id'),
      name = $it.data('name'),
      av = $it.data('avatar');
    $r.find('.modal-contract-gift__user-id').val(id);
    $r.find('.modal-contract-gift__selected-avatar').attr('src', av);
    $r.find('.modal-contract-gift__selected-name').text(name);
    $r.find('.modal-contract-gift__selected').attr('data-user-id', id).prop('hidden', false);
    $r.find('.modal-contract-gift__select-results').empty();
    $r.find('.modal-contract-gift__submit').prop('disabled', false);
  }).on('click' + ns, rootSel + ' .modal-contract-gift__selected-remove', function () {
    var $r = $(this).closest('.modal-contract-gift');
    $r.find('.modal-contract-gift__user-id').val('');
    $r.find('.modal-contract-gift__selected').prop('hidden', true).attr('data-user-id', '');
    $r.find('.modal-contract-gift__submit').prop('disabled', true);
    $r.find('.modal-contract-gift__select-input').focus();
  }).on('click' + ns, rootSel + ' .modal-contract-gift__submit', function () {
    var $btn = $(this),
      $r = $btn.closest('.modal-contract-gift'),
      id = $r.find('.modal-contract-gift__user-id').val();
    if (!id) {
      toastr.error('Выберите пользователя из списка.');
      return;
    }
    $btn.prop('disabled', true);
    call(urls.purchase, {
      gift_user_id: id
    }, $btn, function (result) {
      if (result && result.link) {
        window.location.href = result.link;
        return;
      }
      $btn.prop('disabled', false);
      result && result.message ? toastr.error(result.message) : toastr.error('Не удалось оформить подарок.');
    });
  });
  $(document).on('modal:open' + ns, function (e, id) {
    if (id === 'modal-contract-gift') reset();
  });
  reset();
  $(document).on('click', '#heroInfoBtn', function () {
    $('#infoModal').addClass('modal-cnt--open').attr('aria-hidden', 'false');
  });
  $(document).on('click', '#closeInfoModal', function () {
    $('#infoModal').removeClass('modal-cnt--open').attr('aria-hidden', 'true');
  });
  $(document).on('click', '#infoModal', function (e) {
    if (e.target.id === 'infoModal') {
      $('#infoModal').removeClass('modal-cnt--open').attr('aria-hidden', 'true');
    }
  });
  var $root = $('#contract-root');
  if (!$root.length) {
    return;
  }
  var urls = {
    state: $root.data('url-state') || null,
    purchase: $root.data('url-purchase') || null,
    subscribe: $root.data('url-subscribe') || null,
    claim: $root.data('url-claim') || null,
    restore: $root.data('url-restore') || null
  };
  function getUserId() {
    var id = $root.data('user-id');
    if (!id) {
      id = $('meta[name="user-id"]').attr('content');
    }
    if (!id && window.user_id) {
      id = window.user_id;
    }
    return id || null;
  }
  var userId = getUserId();
  var subscriptionId = null;
  var state = {
    active: false,
    claimed: 0,
    unclaimed: 0,
    restoresLeft: 0,
    gemsNow: 0,
    milestones: {
      7: 'B',
      14: 'A',
      21: 'S',
      28: 'X'
    },
    todayDay: null,
    claimedDays: [],
    restoredDays: []
  };

  // Единая обёртка
  function call(url, payload, btn, onSuccess) {
    if (!url) {
      return;
    }
    var data = payload || {};
    if (userId && data.user_id == null) {
      data.user_id = userId;
    }
    var $button = btn && btn.jquery ? btn : btn ? $(btn) : null;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(url, data, $button, function (result) {
      if (typeof onSuccess === 'function') {
        onSuccess(result || {});
      }
    });
  }
  function renderSummary() {
    $('#gemsNow').text(state.gemsNow || 0);
    $('#claimed').text(state.claimed || 0);
    $('#unclaimed').text(state.unclaimed || 0);
    $('#restoresLeft').text(state.restoresLeft || 0);
    var canClaim = state.active && state.unclaimed > 0;
    $('#claimBtn').prop('disabled', !canClaim).toggleClass('button-cnt--disabled', !canClaim);
    if (state.active) {
      $('#btnSubscribe, #btnActivate').hide();
      $('#claimBtn, #restoreBtn').prop('disabled', false);
      $('#ctaSection').show();
      var frozen = countFrozen();
      // статус
      var status = state.unclaimed > 0 ? 'Доступно к сбору: ' + state.unclaimed : 'Сегодня уже забрано';
      if (frozen > 0) status += ' · заморожено: ' + frozen;
      $('#statusPill').text(status);

      // «Восстановить» показываем только если есть что размораживать и есть попытки
      var showRestore = frozen > 0 && state.restoresLeft > 0;
      $('#restoreBtn').toggle(showRestore);
      if (showRestore) {
        $('#restoreBtn').text('Восстановить пропуск (' + state.restoresLeft + ')');
      }
    } else {
      $('#btnSubscribe').show();
      $('#claimBtn, #restoreBtn').prop('disabled', true);
      $('#ctaSection').hide();
    }
  }
  function buildGrid(milestones) {
    var $g = $('#grid');
    if ($g.children().length === 0) {
      var html = '';
      for (var d = 1; d <= 30; d++) {
        var ms = milestones[d] ? ' pledge__day--milestone' : '';
        html += '<div class="pledge__day' + ms + '" data-day="' + d + '">' + (milestones[d] ? '<div class="pledge__day-rank">' + milestones[d] + '</div>' : '') + d + '</div>';
      }
      $g.html(html);
    }

    // быстрые lookup-таблицы
    var claimedSet = {};
    for (var i = 0; i < state.claimedDays.length; i++) {
      claimedSet[state.claimedDays[i]] = true;
    }
    var restoredSet = {};
    for (var j = 0; j < state.restoredDays.length; j++) {
      restoredSet[state.restoredDays[j]] = true;
    }
    $('#grid .pledge__day').each(function () {
      var d = parseInt(this.getAttribute('data-day'), 10);
      var isClaimed = !!claimedSet[d];
      var isToday = state.todayDay === d;
      var isFrozen = d < state.todayDay && !isClaimed && !restoredSet[d];
      this.classList.toggle('pledge__day--claimed', isClaimed);
      this.classList.toggle('pledge__day--today', isToday && !isClaimed);
      this.classList.toggle('pledge__day--frozen', isFrozen);
    });
  }
  function openModal(rows) {
    var $m = $('#dropModal'),
      $list = $('#dropList').empty();
    var icons = {
      gems: '💎',
      scroll: '📜',
      card: '🃏'
    };
    for (var i = 0; i < rows.length; i++) {
      var r = rows[i];
      $list.append('<div class="drop">' + '<div class="drop__icon">' + (icons[r.type] || '🎁') + '</div>' + '<div class="drop__main">' + r.title + '</div>' + '<div class="drop__sub">' + (r.sub || '') + '</div>' + '</div>');
    }
    var $c = $('#confetti').empty();
    for (var k = 0; k < 40; k++) {
      var $el = $('<div class="confetti__p"/>');
      $el.css({
        left: Math.random() * 100 + '%',
        top: -Math.random() * 40 + 'px',
        animationDelay: Math.random() * 0.35 + 's'
      });
      $c.append($el);
    }
    $m.addClass('modal-cnt--open').attr('aria-hidden', 'false');
  }
  function closeModal() {
    $('#dropModal').removeClass('modal-cnt--open').attr('aria-hidden', 'true');
  }
  function fetchState() {
    call(urls.state, {}, null, function (d) {
      state.active = !!d.active;
      state.claimed = d.claimed || 0;
      state.unclaimed = d.unclaimed || 0;
      state.restoresLeft = d.restoresLeft || 0;
      state.gemsNow = d.gemsNow || 0;
      state.todayDay = d.todayDay || null;
      state.claimedDays = d.claimed_days || [];
      state.restoredDays = d.restored_days || [];
      state.milestones = d.milestones || state.milestones;
      subscriptionId = d.subscription_id || null;
      renderSummary();
      buildGrid(state.milestones);
    });
  }
  function doPurchase($btn) {
    call(urls.purchase, {}, $btn, function (result) {
      if (result && result.link) {
        window.location.href = result.link;
      }
    });
  }
  function doActivate($btn) {
    call(urls.subscribe, {}, $btn, function () {
      fetchState();
    });
  }
  function doClaim($btn) {
    var payload = {};
    if (subscriptionId) {
      payload.subscription_id = subscriptionId;
    }
    call(urls.claim, payload, $btn, function (d) {
      if (d && d.ok === false) {
        return;
      }

      // counters
      if (d && d.claimed != null) state.claimed = d.claimed;
      if (d && d.unclaimed != null) state.unclaimed = d.unclaimed;
      if (d && d.gemsNow != null) state.gemsNow = d.gemsNow;

      // ★ обновляем массивы дней
      if (d && d.day != null) {
        if (!Array.isArray(state.claimedDays)) state.claimedDays = [];
        if (state.claimedDays.indexOf(d.day) === -1) state.claimedDays.push(d.day);
        if (Array.isArray(state.restoredDays)) {
          var i = state.restoredDays.indexOf(d.day);
          if (i !== -1) state.restoredDays.splice(i, 1); // если это был восстановленный день — убираем
        }
      }

      renderSummary();
      buildGrid(state.milestones);

      // модалка
      if (d) {
        var rows = [{
          type: 'gems',
          title: '+' + d.gems + ' алмазов',
          sub: 'День ' + d.day + ' из 30'
        }, {
          type: 'scroll',
          title: 'Свиток ранга ' + d.scroll,
          sub: 'Ежедневно'
        }];
        if (d.card) rows.push({
          type: 'card',
          title: 'Карта ранга ' + d.card,
          sub: 'Награда печати'
        });
        openModal(rows);
      }

      // (опционально) гарантийно синхронизироваться с бэком:
      // fetchState();
    });
  }

  function countFrozen() {
    if (!state.todayDay) return 0;
    var claimedSet = {},
      restoredSet = {};
    for (var i = 0; i < state.claimedDays.length; i++) {
      claimedSet[state.claimedDays[i]] = true;
    }
    for (var j = 0; j < state.restoredDays.length; j++) {
      restoredSet[state.restoredDays[j]] = true;
    }
    var frozen = 0;
    for (var d = 1; d < state.todayDay; d++) {
      if (!claimedSet[d] && !restoredSet[d]) frozen++;
    }
    return frozen;
  }
  function doRestore($btn) {
    var payload = {};
    if (subscriptionId) {
      payload.subscription_id = subscriptionId;
    }
    call(urls.restore, payload, $btn, function (d) {
      if (d && d.ok === false) {
        return;
      }
      if (d && d.unclaimed != null) state.unclaimed = d.unclaimed;
      if (d && d.restoresLeft != null) state.restoresLeft = d.restoresLeft;

      // ★ добавить восстановленный день, чтобы он перестал быть --frozen
      if (d && d.restored_day != null) {
        if (!Array.isArray(state.restoredDays)) state.restoredDays = [];
        if (state.restoredDays.indexOf(d.restored_day) === -1) state.restoredDays.push(d.restored_day);
      }
      renderSummary();
      buildGrid(state.milestones);
    });
  }

  // Bindings (передаём ИМЕННО jQuery-объект)
  $(document).on('click', '#btnSubscribe', function () {
    doPurchase($(this));
  });
  $(document).on('click', '#btnActivate', function () {
    doActivate($(this));
  });
  $(document).on('click', '#claimBtn', function () {
    if ($(this).hasClass('button-cnt--disabled')) {
      toastr.error('У вас нет доступных для получения наград');
      return false;
    }
    if (state.active) doClaim($(this));
  });
  $(document).on('click', '#restoreBtn', function () {
    if (state.active) doRestore($(this));
  });
  $(document).on('click', '#closeModal', function () {
    closeModal();
  });
  $(document).on('click', '#dropModal', function (e) {
    if (e.target.id === 'dropModal') closeModal();
  });
  $(function () {
    fetchState();
  });
}

/***/ }),

/***/ "./resources/js/modules/editDecorModule.js":
/*!*************************************************!*\
  !*** ./resources/js/modules/editDecorModule.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeEditDecor": () => (/* binding */ initializeEditDecor)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeEditDecor() {
  $('.edit-decor .tabs__item').on('click', function () {
    $('.edit-decor__save-btn').text('Сохранить');
    $('.edit-decor__content-item').removeClass('edit-decor__content-item--active');
  });
  $('.show-decor-btn').on('click', function () {
    $("#modal-edit-decor").find('img[data-src]').each(function () {
      $(this).attr('src', $(this).data('src')).removeAttr('data-src');
    });
  });
  $('.show-gift-btn').on('click', function () {
    $("#modal-profile-gift").find('img[data-src]').each(function () {
      $(this).attr('src', $(this).data('src')).removeAttr('data-src');
    });
  });
  $('.profile-skin-setting__save-btn').on('click', function () {
    var button = $(this);
    var styles = $('textarea[name="body"]').val();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/skinUpdate', {
      styles: styles
    }, button, function (result) {
      toastr.success("Настройки скина отправлены на модерацию");
    });
  });
  $('.edit-decor__save-btn').on('click', function () {
    if ($(this).text() === "В магазин") {
      var active_item = $('.edit-decor__content-item--active');
      if (active_item.length) {
        var item_id = null;
        if (active_item.hasClass('edit-decor__content-item--frame')) {
          item_id = active_item.attr('data-frame-id');
          window.location.href = "/products/frame?item=" + item_id;
        } else if (active_item.hasClass('edit-decor__content-item--avatar')) {
          item_id = active_item.attr('data-avatar-id');
          window.location.href = "/products/avatar?item=" + item_id;
        } else if (active_item.hasClass('edit-decor__content-item--cover')) {
          item_id = active_item.attr('data-cover-id');
          window.location.href = "/products/cover?item=" + item_id;
        } else if (active_item.hasClass('edit-decor__content-item--skin')) {
          item_id = active_item.attr('data-skin-id');
          window.location.href = "/products/profileskin?item=" + item_id;
        }
        return false;
      } else {
        window.location.href = "/products";
      }
    } else {
      var _active_item = $('.edit-decor__content-item--active');
      if (_active_item.length) {
        if (_active_item.hasClass('edit-decor__content-item--frame')) {
          var frameId = _active_item.attr('data-frame-id');
          $.post("/settings/frame", {
            'id': frameId
          }, function (result) {
            toastr.success(result.message);
          });
        } else if (_active_item.hasClass('edit-decor__content-item--avatar')) {
          var avatarId = _active_item.attr('data-avatar-id');
          var avatar_image = _active_item.find('img').attr('src');
          $.post("/settings/avatar", {
            'id': avatarId
          }, function (result) {
            $('.header-profile img').attr('src', avatar_image);
            toastr.success(result.message);
          });
        } else if (_active_item.hasClass('edit-decor__content-item--cover')) {
          var coverId = _active_item.attr('data-cover-id');
          $.post("/settings/cover", {
            'id': coverId
          }, function (result) {
            toastr.success(result.message);
          });
        } else if (_active_item.hasClass('edit-decor__content-item--skin')) {
          var skinId = _active_item.attr('data-skin-id');
          $.post("/settings/skin", {
            'id': skinId
          }, function (result) {
            toastr.success(result.message);
          });
        }
      }
    }
  });
  $('.edit-decor__content-item--avatar').on('click', function () {
    $('.edit-decor__save-btn').text($(this).attr('data-purchased') === "0" ? 'В магазин' : 'Сохранить');
    $('.my-avatar').attr('src', $(this).find('img').attr('src'));
    $('.edit-decor__content-item--avatar').removeClass('edit-decor__content-item--active');
    $(this).addClass('edit-decor__content-item--active');
  });
  $('.edit-decor__content-item--skin').on('click', function () {
    $('.edit-decor__save-btn').text($(this).attr('data-purchased') === "0" ? 'В магазин' : 'Сохранить');
    var skin_id = $(this).attr('data-skin-id');
    $('.profile-skin-video').remove();
    if (skin_id === "0") {
      $('.edit-decor__content-item--skin').removeClass('edit-decor__content-item--active');
      $(this).addClass('edit-decor__content-item--active');
      $('body').removeClass('profile-skin');
      $('body').attr('class').split(/\s+/).forEach(function (className) {
        if (className.startsWith('profile-skin--')) {
          $('body').removeClass(className);
        }
      });
      return;
    }
    var video_skins = {
      28: {
        poster: '/img/profile-skin-video/28/1.jpg',
        video: '/img/profile-skin-video/28/1.mp4'
      },
      29: {
        poster: '/img/profile-skin-video/29/1.jpg',
        video: '/img/profile-skin-video/29/1.mp4'
      },
      30: {
        poster: '/img/profile-skin-video/30/1.jpg',
        video: '/img/profile-skin-video/30/1.mp4'
      },
      31: {
        poster: '/img/profile-skin-video/31/1.jpg',
        video: '/img/profile-skin-video/31/1.mp4'
      },
      32: {
        poster: '/img/profile-skin-video/32/1.jpg',
        video: '/img/profile-skin-video/32/1.mp4'
      },
      33: {
        poster: '/img/profile-skin-video/33/1.jpg',
        video: '/img/profile-skin-video/33/1.mp4'
      },
      34: {
        poster: '/img/profile-skin-video/34/1.jpg',
        video: '/img/profile-skin-video/34/1.mp4'
      },
      35: {
        poster: '/img/profile-skin-video/35/1.jpg',
        video: '/img/profile-skin-video/35/1.mp4'
      },
      36: {
        poster: '/img/profile-skin-video/36/1.jpg',
        video: '/img/profile-skin-video/36/1.mp4'
      },
      37: {
        poster: '/img/profile-skin-video/37/1.jpg',
        video: '/img/profile-skin-video/37/1.mp4'
      },
      38: {
        poster: '/img/profile-skin-video/38/1.jpg',
        video: '/img/profile-skin-video/38/1.mp4'
      }
    };
    if (video_skins.hasOwnProperty(skin_id)) {
      var skin = video_skins[skin_id];
      var videoHtml = '<div class="profile-skin-video"><video width="320" height="240" webkit-playsinline="true" playsinline="true" autoplay="true" muted="muted" loop="true" pip="false"  poster="' + skin.poster + '"><source src="' + skin.video + '" type="video/mp4">Your browser does not support the video tag.</video></div>';
      $('body').append(videoHtml);
    }
    $('body').removeClass(function (index, className) {
      var classes = className.split(' ');
      var classesToRemove = [];
      $.each(classes, function (index, cls) {
        if (/profile-skin--\d+/.test(cls)) {
          classesToRemove.push(cls);
        }
      });
      return classesToRemove.join(' ');
    });
    $('body').addClass('profile-skin').addClass($(this).attr('data-skin-name'));
    if ($('.main').hasClass('main-profile--mobile')) {
      $('body').addClass('body-mobile');
    } else {
      $('body').addClass('body-pc');
    }
    $('.edit-decor__content-item--skin').removeClass('edit-decor__content-item--active');
    $(this).addClass('edit-decor__content-item--active');
  });
  $('.edit-decor__content-item--frame').on('click', function () {
    $('.edit-decor__save-btn').text($(this).attr('data-purchased') === "0" ? 'В магазин' : 'Сохранить');
    var avatar = $('.my-avatar');
    var frame = avatar.siblings('.frame');
    var frame_id = $(this).attr('data-frame-id');
    if (frame_id === "0") {
      $('.edit-decor__content-item--frame').removeClass('edit-decor__content-item--active');
      $(this).addClass('edit-decor__content-item--active');
      if (frame.length) frame.remove();
      return;
    }
    if (frame.length) {
      frame.attr('src', $(this).find('img').attr('src'));
    } else {
      avatar.after('<img src="' + $(this).find('img').attr('src') + '" class="frame" alt="">');
    }
    $('.edit-decor__content-item--frame').removeClass('edit-decor__content-item--active');
    $(this).addClass('edit-decor__content-item--active');
  });
  $('.edit-decor__content-item--cover').on('click', function () {
    $('.edit-decor__save-btn').text($(this).attr('data-purchased') === "0" ? 'В магазин' : 'Сохранить');
    var is_video = $(this).attr('data-cover-is-video');
    var link = $(this).attr('data-cover-link');
    if ($('.main').hasClass('main-profile--mobile')) {
      var $backgroundImageEl = $('.mobile-profile__background-image');
      var $videoEl = $backgroundImageEl.siblings('video');
      if (is_video === "0") {
        $('.mobile-profile__background-image').css('background-image', 'url("' + link + '")');
        if ($videoEl.length) {
          $videoEl.remove();
        }
      } else {
        if ($videoEl.length) {
          $videoEl.find('source').each(function () {
            var src = $(this).attr('src');
            var newSrc = src.replace(/(\d+)(\.\w+)$/, function (match, p1, p2) {
              return link + p2;
            });
            $(this).attr('src', newSrc);
          });
          $videoEl[0].load();
        } else {
          var newVideoHtml = "\n            <video preload=\"metadata\" class=\"profile__cover\" webkit-playsinline=\"true\" playsinline=\"true\" autoplay=\"true\" muted=\"muted\" loop=\"true\">\n                <source src=\"/img/covers/".concat(link, ".webm\" type=\"video/webm\">\n                <source src=\"/img/covers/").concat(link, ".mp4\" type=\"video/mp4\">\n            </video>\n        ");
          $backgroundImageEl.after(newVideoHtml);
        }
      }
    } else {
      var _$backgroundImageEl = $('.profile__background');
      var _$videoEl = _$backgroundImageEl.find('video');
      if (is_video === "0") {
        _$backgroundImageEl.css('background-image', 'url("' + link + '")');
        if (_$videoEl.length) {
          _$videoEl.remove();
        }
      } else {
        if (_$videoEl.length) {
          _$videoEl.find('source').each(function () {
            var src = $(this).attr('src');
            var newSrc = src.replace(/(\d+)(\.\w+)$/, function (match, p1, p2) {
              return link + p2;
            });
            $(this).attr('src', newSrc);
          });
          _$videoEl[0].load();
        } else {
          var _newVideoHtml = "\n            <video preload=\"metadata\" class=\"profile__cover\" webkit-playsinline=\"true\" playsinline=\"true\" autoplay=\"true\" muted=\"muted\" loop=\"true\">\n                <source src=\"/img/covers/".concat(link, ".webm\" type=\"video/webm\">\n                <source src=\"/img/covers/").concat(link, ".mp4\" type=\"video/mp4\">\n            </video>\n        ");
          _$backgroundImageEl.append(_newVideoHtml);
        }
      }
    }
    $('.edit-decor__content-item--cover').removeClass('edit-decor__content-item--active');
    $(this).addClass('edit-decor__content-item--active');
  });
}

/***/ }),

/***/ "./resources/js/modules/feedModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/feedModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeFeed": () => (/* binding */ initializeFeed)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


function initializeFeed() {
  var type_tab = "all";
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("feed-comment", function (data) {
      if (type_tab === "all" || type_tab === "comment") {
        addToQueue(function () {
          return processNewComment(data);
        });
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("feed-user", function (data) {
      if (type_tab === "all" || type_tab === "user") {
        addToQueue(function () {
          return processNewUser(data);
        });
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("feed-review", function (data) {
      if (type_tab === "all" || type_tab === "review") {
        addToQueue(function () {
          return processNewReview(data);
        });
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("feed-history", function (data) {
      $('.new-feed__list').empty();
      data.reverse();
      data.forEach(function (item) {
        switch (item.type) {
          case 'comment':
            processNewComment(item);
            break;
          case 'user':
            processNewUser(item);
            break;
          case 'review':
            processNewReview(item);
            break;
        }
      });
      updateTimeFeed();
    });
    $('.tabs--feed .tabs__item').on('click', function () {
      $('.tabs__item').removeClass('tabs__item--active');
      $(this).addClass('tabs__item--active');
      type_tab = $(this).attr('data-type');
      _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('getHistory', type_tab);
      return false;
    });
  }
}
var queue = [];
var isProcessing = false;
var isUserScrolling = false;
var scrollTimeout;
function addToQueue(callback) {
  queue.push(callback);
}
function startQueueProcessor() {
  setInterval(function () {
    if (!isProcessing && queue.length > 0 && !isUserScrolling) {
      isProcessing = true;
      var callback = queue.shift();
      callback();
      isProcessing = false;
    }
  }, 700);
}
function updateTimeFeed() {
  $('.new-feed__item').each(function () {
    var timePublished = parseInt($(this).attr('data-time')) * 1000;
    var text = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.commentTimeAgo(timePublished);
    if (text) $(this).find('.new-feed__date').text(text);
  });
}
setInterval(updateTimeFeed, 20000);
startQueueProcessor();
if (window.location.pathname === '/feed') {
  $(window).on('scroll wheel', function () {
    isUserScrolling = true;
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(function () {
      isUserScrolling = false;
    }, 150);
  });
}
function addElement(newItemHtml) {
  var originalScrollTop = $(window).scrollTop();
  var $newItem = $(newItemHtml);
  $('.new-feed__list').prepend($newItem);
  var items = $('.new-feed__item');
  if (items.length > 100) {
    items.slice(100).remove();
  }
  if (!isUserScrolling && $(window).scrollTop() > 190) {
    var newItemHeight = $newItem.outerHeight(true);
    $(window).scrollTop(originalScrollTop + newItemHeight);
  }
}
function processNewComment(data) {
  var comment = extractDataFromHtml(data.htmlComment);
  var comment_data = _objectSpread(_objectSpread({}, comment), {}, {
    name: data.details.name,
    image: data.details.image,
    link: data.details.link,
    comm_count: data.comm_count,
    fav_count: data.fav_count
  });
  addNewItem(comment_data);
}
function processNewUser(data) {
  data = data.data;
  var newItemHtml = '     <div class="new-feed__item new-feed__item--user">' + '                    <div class="new-feed__title">' + '                        <div>Новый <a href="/users/' + data.id + '">читатель</a></div>' + '                    </div>' + '                    <div class="new-feed__profile">' + '                        <div class="new-feed__profile-background">' + '                            <div class="new-feed__profile-background-image" style="background-image: url(\'' + data.cover + '\')"></div>' + '                        </div>' + '                        <div class="new-feed__profile-wrapper">' + '                            <a href="/users/' + data.id + '" class="new-feed__profile-avatar">' + '                                <img src="/img/avatars/x150/' + data.avatar + '" alt="Аватар">' + '                            </a>' + '                            <a href="/users/' + data.id + '" class="new-feed__profile-name">' + data.name + '</a>' + '                            <div class="new-feed__profile-online">только что</div>' + '                        </div>' + '                        <div class="new-feed__footer">' + '                            <div class="new-feed__footer-left">' + '                                <a href="/users/' + data.id + '" class="button new-feed__button">' + '                                    <i class="icon icon-user-add"></i>' + '                                </a>' + '                                <a href="/users/' + data.id + '" class="button new-feed__button">' + '                                    <i class="icon icon-message"></i>' + '                                </a>' + '                            </div>' + '                        </div>' + '                    </div>' + '                </div>';
  addElement(newItemHtml);
}
function processNewReview(data) {
  data = data.data;
  var newItemHtml = ' <div class="new-feed__item new-feed__item--review">' + '                        <div class="new-feed__title">' + '                            <div>Новый <a href="/reviews/' + data.id + '">отзыв</a> к ' + data.manga_name + '</div>' + '                        </div>' + '                        <div class="new-feed__content">' + '                            <div class="new-feed__info">' + '                                <div class="new-feed__comment">' + '                                    <div class="new-feed__comment-header">' + '                                        <a href="/users/' + data.user.id + '" class="new-feed__avatar">' + '                                            <img src="/img/avatars/x150/' + data.user.avatar + '" alt="Аватар">' + '                                        </a>' + '                                        <div class="new-feed__info">' + '                                            <a href="/users/' + data.user.id + '" class="new-feed__name">' + data.user.name + '</a>' + '                                            <div class="new-feed__date">только что</div>' + '                                        </div>' + '                                    </div>' + '                                    <div class="new-feed__text">' + DOMPurify.sanitize(data.text) + '</div>' + '                                    <a href="/reviews/' + data.id + '" class="new-feed__reply-btn">Читать полностью</a>' + '                                    <div class="new-feed__image"' + '                                         style="background-image: url(\'' + data.manga_image + '\')"></div>' + '                                    <div class="new-feed__footer">' + '                                        <div class="new-feed__footer-left">' + '                                            <div class="button new-feed__button">' + '                                                <i class="icon icon-sms"></i>0' + '                                            </div>' + '                                            <div class="button new-feed__button">' + '                                                <i class="icon icon-heart"></i>0' + '                                            </div>' + '                                            <div class="button new-feed__button">' + '                                                <i class="icon icon-positive"></i>' + '                                            </div>' + '                                        </div>' + '                                    </div>' + '                                </div>' + '                            </div>' + '                        </div>' + '                    </div>';
  addElement(newItemHtml);
}
function addNewItem(data) {
  var frameImg = data.userFrame ? '<img class="frame" src="' + data.userFrame + '" alt="Рамка">' : '';
  var newItemHtml = '<div class="new-feed__item new-feed__item--reveal" data-time="' + data.time + '">' + '    <div class="new-feed__title">' + '        <div>Новый <a href="' + data.link + '">комментарий</a> к ' + data.name + '</div>' + '    </div>' + '    <div class="new-feed__content">' + '        <div class="new-feed__info">' + '            <div class="new-feed__comment">' + '                <div class="new-feed__comment-header">' + '                    <a href="' + data.userLink + '" class="new-feed__avatar">' + frameImg + '                        <img src="' + data.userAvatar + '" alt="Аватар">' + '                    </a>' + '                    <div class="new-feed__info">' + '                        <a href="' + data.userLink + '" class="new-feed__name">' + data.userName + '</a>' + '                        <div class="new-feed__date">только что</div>' + '                    </div>' + '                </div>' + '                <div class="new-feed__text">' + DOMPurify.sanitize(data.text) + '</div>' + '                <a href="' + data.link + '" class="new-feed__image" style="background-image: url(\'' + data.image + '\')"></a>' + '                <div class="new-feed__footer">' + '                    <div class="new-feed__footer-left">' + '                        <div class="button new-feed__button new-feed__button--comments">' + '                            <i class="icon icon-sms"></i><span>' + extractDigits(data.comm_count) + '</span>' + '                        </div>' + '                        <div class="button new-feed__button new-feed__button--favourites">' + '                            <i class="icon icon-heart"></i><span>' + _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.formatNumberK(extractDigits(data.fav_count)) + '</span>' + '                        </div>' + '                    </div>' + '                </div>' + '            </div>' + '        </div>' + '    </div>' + '</div>';
  addElement(newItemHtml);
}
function extractDataFromHtml(htmlString) {
  var tempDiv = $('<div></div>').html(htmlString);
  var text = tempDiv.find('.comments__body').text().trim();
  var time = tempDiv.find('.comments__item').attr('data-time');
  var userName = tempDiv.find('.comments__name').text().trim();
  var userLink = tempDiv.find('.comments__name').attr('href');
  var userAvatar = tempDiv.find('.comments__avatar img:last-of-type').attr('src');
  var userFrame = tempDiv.find('.comments__avatar .frame').attr('src');
  return {
    userName: userName,
    userLink: userLink,
    userAvatar: userAvatar,
    userFrame: userFrame,
    text: text,
    time: time
  };
}
function extractDigits(str) {
  if (typeof str !== 'string') return 0;
  return str.replace(/\D/g, '');
}

/***/ }),

/***/ "./resources/js/modules/friendModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/friendModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeFriend": () => (/* binding */ initializeFriend)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeFriend() {
  $(document).on('click', '.subscribe-user-button', function () {
    var button = $(this);
    var user_id = $('.profile').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/subscribe/' + user_id, {}, button, function (result) {
      if (result.subscribed) {
        toastr.success(result.message);
        button.text('Отписаться');
      } else {
        toastr.error(result.message);
        button.text('Подписаться');
      }
    });
  });
  $('body').on('click', '.friend-controls__add-friend', function () {
    var button = $(this);
    var user_id = $('.profile').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship/addFriend', {
      user_id: user_id
    }, button, function (result) {
      $('.friends-controls').empty().append('<button disabled><i class="icon icon-pending" data-tooltip="Заявка отправлена"></i></button>');
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.friend-controls__accept-friend', function () {
    var button = $(this);
    var user_id = $('.profile').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship/acceptFriend', {
      user_id: user_id
    }, button, function (result) {
      $('.friends-controls').empty().append('<button class="friend-controls__delete-friend" data-tooltip="Удалить из друзей"><i class="icon icon-user-del"></i></button>');
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.friend-controls__decline-friend', function () {
    var button = $(this);
    var user_id = $('.profile').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship/declineFriend', {
      user_id: user_id
    }, button, function (result) {
      $('.friends-controls').empty().append('<button class="friend-controls__add-friend" data-tooltip="Добавить в друзья"><i class="icon icon-user-add"></i></button>');
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.friend-controls__delete-friend, .friend-delete-btn', function () {
    var button = $(this);
    if (!confirm("Дейстительно удалить из друзей?")) return false;
    var user_id = $('.profile').attr('data-user-id');
    if (!user_id) {
      user_id = $(this).closest('.profile__friends-item').attr('data-user-id');
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship/deleteFriend', {
      user_id: user_id
    }, button, function (result) {
      $('.friends-controls').empty().append('<button class="friend-controls__add-friend" data-tooltip="Добавить в друзья"><i class="icon icon-user-add"></i></button>');
      if (button.hasClass('friend-delete-btn')) button.closest('.profile__friends-item').remove();
      toastr.success(result.message);
    });
  });
  if (window.isAuth && window.location.pathname === "/users/".concat(window.user_id, "/friends")) {
    tippy.delegate('.profile__friends-item', {
      content: '',
      target: '.profile__friends-avatar',
      allowHTML: true,
      theme: 'dropdown',
      placement: 'bottom',
      arrow: false,
      trigger: 'click',
      hideOnClick: true,
      interactive: true,
      onShow: function onShow(instance) {
        var clickedAvatar = instance.reference;
        var parentItem = clickedAvatar.closest('.profile__friends-item');
        var nameElement = parentItem.querySelector('.profile__friends-name');
        var hasImage = nameElement && nameElement.querySelector('img') !== null;
        var menu = "<div class=\"menu\">";
        if (hasImage) menu += "<button class=\"menu__item friend-type-btn\" data-type=\"0\">Удалить</button>";else menu += "<button class=\"menu__item friend-type-btn\" data-type=\"1\"><img class=\"profile__friends-type\" src=\"/assets/friends/1.png\"> Пара</button><button class=\"menu__item friend-type-btn\" data-type=\"2\"><img class=\"profile__friends-type\" src=\"/assets/friends/2.png\"> Лучшие друзья</button><button class=\"menu__item friend-type-btn\" data-type=\"3\"><img class=\"profile__friends-type\" src=\"/assets/friends/3.png\"> Семья</button>";
        menu += "<button class=\"menu__item friend-delete-btn\" data-type=\"0\">Удалить из друзей</button>";
        menu += "</div>";
        instance.setContent(menu);
      },
      onShown: function onShown(instance) {
        document.body.addEventListener('click', function (event) {
          if (event.target.closest('.friend-type-btn')) {
            instance.hide();
          }
        });
      }
    });
  }
  $('body').on('click', '.friend-type-btn', function () {
    var button = $(this);
    var requested_id = button.closest('.profile__friends-item').attr('data-user-id');
    var type = button.attr('data-type');
    if (type == 0) {
      var id = $(this).closest('.profile__friends-item').attr('data-user-id');
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship-type/' + id + '/cancel', {}, button, function (result) {
        toastr.success(result.message);
      });
    } else {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship-type', {
        requested_id: requested_id,
        type: type
      }, button, function (result) {
        toastr.success(result.message);
      });
    }
  });
  $('body').on('click', '.friend-type-accept', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship-type/' + id + '/confirm', {}, button, function (result) {
      toastr.success(result.message);
      button.closest('.profile__friends-item').remove();
    });
  });
  $('body').on('click', '.friend-type-decline', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/friendship-type/' + id + '/decline', {}, button, function (result) {
      toastr.success(result.message);
      button.closest('.profile__friends-item').remove();
    });
  });
  $('.profile__friends-search-input').on('input', function () {
    var q = $(this).val().toLowerCase();
    $('.profile__friends-item').each(function () {
      var name = $(this).find('.profile__friends-name div').text().toLowerCase();
      if (name.includes(q) || q === '') {
        $(this).show();
      } else {
        $(this).hide();
      }
    });
  });
  $('body').on('click', '.friend-controls__cancel-btn, .friend-controls__accept-btn, .friend-controls__decline-btn', function () {
    var button = $(this);
    var item = button.closest('.friend-controls__item');
    var user_id = item.attr('data-user-id');
    var url = {
      'friend-controls__cancel-btn': '/friendship/cancelFriend',
      'friend-controls__accept-btn': '/friendship/acceptFriend',
      'friend-controls__decline-btn': '/friendship/declineFriend'
    }[button.attr('class').split(' ').pop()];
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(url, {
      user_id: user_id
    }, button, function (result) {
      toastr.success(result.message);
      item.remove();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/giftModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/giftModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeGift": () => (/* binding */ initializeGift)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeGift() {
  $('.gift__item').on('click', function () {
    var image = $(this).find('img').attr('src');
    var gift_id = $(this).attr('data-gift-id');
    var gift_price = $(this).attr('data-gift-price');
    $('.gift__list').hide();
    $('.gift-text').hide();
    $('.gift__form').show().attr('data-gift-id', gift_id);
    $('.gift__warning span').text(gift_price);
    $('.gift__form-image img').attr('src', image);
    $('.gift__back').css('display', 'flex');
  });
  $('.gift__back').on('click', function () {
    $('.gift__form').hide();
    $('.gift__list').show();
    $('.gift-text').show();
    $('.gift__back').hide();
  });
  $('.profile__gift-item').on('click', function () {
    var image = $(this).find('img').attr('src');
    var senderName = $(this).attr('data-gift-sender-name');
    var senderId = $(this).attr('data-gift-sender-id');
    var text = $(this).attr('data-gift-text');
    $('.modal-gift__name').text(senderName).attr('href', senderId === "#" ? "#" : '/users/' + senderId);
    $('.modal-gift__text').text(text);
    $('.modal-gift__image img').attr('src', image);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal('modal-gift-info');
  });
  $('.gift__form--send-btn').on('click', function () {
    var stop_w = ["lgbt", "lgbtq", "lgbtq+", "pride", "gay", "gays", "boy love", "bl", "yaoi", "yuri", "mlm", "wlw", "queer", "bisexual", "trans", "nonbinary", "genderfluid", "genderqueer", "pansexual", "asexual", "polyamory", "polyamorous", "лгбт", "лгбт+", "гей", "геи", "геев", "гей-пара", "гей любовь", "гей парни", "лесбиянки", "лесби", "лесби пара", "яой", "юри", "бисексуал", "бисексуалы", "транс", "трансгендер", "небинарный", "квир", "пансексуал", "асексуал", "полигамия", "однополая пара", "boys kiss", "girls kiss", "gay kiss", "lesbian kiss", "bl kiss", "yaoi kiss", "yuri kiss", "mlm couple", "wlw couple", "gay couple", "lesbian couple", "pride couple", "pride love", "парни целуются", "девушки целуются", "геи целуются", "лесбиянки целуются", "гей-поцелуй", "лесби-поцелуй", "яойный поцелуй", "юрийный поцелуй", "геевская пара", "лесбийская пара", "яойная пара", "юрийная пара", "гей любовь", "лесби любовь", "любовь без границ", "rainbow", "rainbow flag", "pride flag", "pride month", "love wins", "love is love", "pride parade", "gay rights", "lesbian rights", "trans rights", "bi pride", "pan pride", "ace pride", "aro pride", "nonbinary pride", "they/them", "he/they", "she/they", "genderfluid pride", "androgynous", "femboy", "tomgirl", "butch", "soft boy", "twink", "bear", "daddy", "otter", "bara", "shounen-ai", "shoujo-ai", "gay furry", "lesbian furry", "futa", "прайд", "прайд-флаг", "прайд парад", "права геев", "права ЛГБТ", "права лесбиянок", "права трансгендеров", "гомосексуал", "гомосексуальность", "гомосексуальный", "гомосексуальная пара", "гомосексуальная любовь", "лесбийская любовь", "однополый брак", "однополые отношения", "небинарные люди", "гендерквир", "фембой", "тянка", "гомо", "шипперить геев", "шипперить лесбиянок", "фемслэш", "мальчик в юбке", "андрогин", "андроидгендер", "boyxboy", "girlxgirl", "bxb", "gxb", "g x g", "b x b", "bl anime", "yaoi anime", "yuri anime", "yaoi couple", "yuri couple", "bl drama", "shounen-ai anime", "shoujo-ai anime", "trap", "reverse trap", "futa love", "bara couple", "bara gay", "b o y s k i s s", "b o y s k i  s s", "b o y s  k i s s", "b o y s  k i  s s", "b o y s    k i s s", "b o y  l o v e", "g a y  c o u p l e", "y a o i  k i s s", "w l w  l o v e", "b o y  x  b o y", "g i r l  x  g i r l", "b x b", "g x g", "y a o i  c o u p l e", "b a r a  l o v e", "l e s b i a n  l o v e", "g e n d e r q u e e r", "p r i d e  f l a g", "п а р н и ц е л у ю т с я", "п а р н и ц е л у ю т  с я", "п а р н и  ц е л у ю т с я", "п а р н и    ц е л у ю т с я", "г е й  п а р а", "г е и  ц е л у ю т с я", "я о й  п о ц е л у й", "л е с б и  п а р а", "г е й  л ю б о в ь"];
    var text = $('.gift__form-textarea').val();
    var is_public = $('#gift_public').is(':checked') ? 0 : 1;
    var gift_id = $('.gift__form').attr('data-gift-id');
    var user_id = $('.profile').attr('data-user-id');
    var button = $(this);
    var regex = new RegExp("\\b(" + stop_w.join("|") + ")\\b", "gi");
    text = text.replace(regex, "");
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/gifts/send', {
      text: text,
      is_public: is_public,
      gift_id: gift_id,
      user_id: user_id
    }, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
      toastr.success(result.message);
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/halloweenModule.js":
/*!*************************************************!*\
  !*** ./resources/js/modules/halloweenModule.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeHalloween": () => (/* binding */ initializeHalloween)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


function initializeHalloween() {
  if (window.isAuth) {
    //showNewYearAnimation();
  }
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("showHalloweenEnterAnimation", function () {
      //showHalloweenAnimation();
      showNewYearAnimation();
    });
    var sendNewPackQueue = [];
    var sendNewPackProcessing = false;
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-sendNewPack", function (data) {
      sendNewPackQueue.push(data);
      if (!sendNewPackProcessing) {
        sendNewPackProcessing = true;
        var processSendNewPack = function processSendNewPack() {
          if (!sendNewPackQueue.length) return sendNewPackProcessing = false;
          addCardToPackList(sendNewPackQueue.shift().message);
          setTimeout(processSendNewPack, 700);
        };
        processSendNewPack();
      }
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-sendNewHalloweenPack", function (data) {
      addCardToStart(data.message);
    });
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("halloween_new_game", function (data) {
      var user = data.message.user;
      var newItem = $("<div class=\"halloween-game__leaderboard-item\">\n                  <a href=\"/users/".concat(user.user_id, "\">\n                      <img src=\"").concat(user.user_avatar, "\" alt=\"\u0410\u0432\u0430\u0442\u0430\u0440\u043A\u0430\">\n                  </a>\n                  <a href=\"/users/").concat(user.user_id, "\" class=\"halloween-game__leaderboard-name\">").concat(user.user_name, "</a>\n                  <div class=\"halloween-game__leaderboard-time\">").concat(user.timer, " \u0441\u0435\u043A\u0443\u043D\u0434</div>\n              </div>"));
      $('.halloween-game__leaderboard').prepend(newItem);
      if ($('.halloween-game__leaderboard-item').length > 5) {
        $('.halloween-game__leaderboard-item:last').remove();
      }
    });
    var isProcessing_h = false;
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("new-sendHalloweenStats", function (data) {
      if ($('.halloween-teams').length && !isProcessing_h) {
        isProcessing_h = true;
        var teams = data.message;
        Object.entries(teams).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            teamId = _ref2[0],
            candyCount = _ref2[1];
          updateCandy(teamId, candyCount);
        });
        setTimeout(function () {
          var sortedTeams = Object.keys(teams).sort(function (a, b) {
            var valueA = parseInt(teams[a].replace(/\s/g, ''), 10);
            var valueB = parseInt(teams[b].replace(/\s/g, ''), 10);
            return valueB - valueA;
          });
          reorderTeams(sortedTeams);
        }, 300);
        setTimeout(function () {
          isProcessing_h = false;
        }, 500);
      }
    });
  }
  $('body').on('click', '.halloween-pumpkin-scary--animation-trigger', function () {
    $(this).addClass('halloween-flicker-main halloween-surprise-animation');
    $('.halloween-boo').attr('class', 'halloween-boo halloween-boo-active');
    var audio = $('#halloween-audio')[0];
    if (audio.paused) {
      audio.play();
    } else {
      audio.pause();
    }
  });
  $('body').on('click', '.halloween-teams--title', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/leaderboard', {}, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.createModal('halloween-leaderboard-modal', result.content);
    });
  });
  $('body').on('click', '.halloween-leaderboard__tabs-item', function () {
    var button = $(this);
    var team_id = $(this).attr('data-team');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/leaderboard', {
      'team_id': team_id
    }, button, function (result) {
      var modal = $('#halloween-leaderboard-modal');
      var newList = $(result.content).find('.halloween-leaderboard__list');
      modal.find('.halloween-leaderboard__list').html(newList.html());
      $('.halloween-leaderboard__tabs-item--active').removeClass('halloween-leaderboard__tabs-item--active');
      button.addClass('halloween-leaderboard__tabs-item--active');
    });
  });
  $('body').on('click', '.manga[data-id="36421"] .manga__img, .manga-mobile[data-id="36421"] .manga-mobile__image', function () {
    var button = $(this);
    var clickCount = button.data('click-count') || 0;
    clickCount++;
    button.data('click-count', clickCount);
    if (clickCount === 7) {
      toastr.success("\u041F\u043E\u0437\u0434\u0440\u0430\u0432\u043B\u044F\u0435\u043C! \u0422\u044B \u0434\u043E\u0448\u0451\u043B \u0434\u043E \u0444\u0438\u043D\u0430\u043B\u0430. \u0412\u043E\u0442 \u0442\u0432\u043E\u0439 \u043F\u0440\u043E\u043C\u043E\u043A\u043E\u0434: HALLO-22. \u0414\u043E\u0431\u0430\u0432\u044C \u043A \u043D\u0435\u043C\u0443 \u043F\u0435\u0440\u0432\u044B\u0435 \u0431\u0443\u043A\u0432\u044B \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u0442\u0430\u0439\u0442\u043B\u0430, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0442\u044B \u0440\u0430\u0437\u0433\u0430\u0434\u0430\u043B \u0440\u0430\u043D\u0435\u0435, \u0438 \u0438\u0441\u0442\u0438\u043D\u0430 \u043E\u0442\u043A\u0440\u043E\u0435\u0442\u0441\u044F");
      button.data('click-count', 0);
    }
  });
  window.addEventListener("MangaHistorySuccess", function (event) {
    var _ref3 = event || {},
      detail = _ref3.detail;
    var _ref4 = detail || {},
      type = _ref4.type,
      token = _ref4.token;
    /*if (type === "candy") addCandy(token);
    if (type === "pumpkin") addPumpkin(token);*/

    if (type === "candy") addBallEvent(token);
    if (type === "pumpkin") addEventBag(token);
  });
  if (window.location.pathname.startsWith('/halloween/game')) {
    var h_game_size = 5;
    var h_game_timer = 0,
      h_game_interval;
    var h_game_finish = false;

    // Создание сетки
    var createGrid = function createGrid() {
      $('.halloween-game__grid').empty();
      var _loop = function _loop(i) {
        $('<div class="halloween-game__cell">').data('index', i).append($('<img>', {
          src: 'https://mangabuff.ru/assets/pumpkin.png',
          alt: 'Pumpkin'
        })).click(function () {
          toggleCells(i);
          checkWin();
        }).appendTo('.halloween-game__grid');
      };
      for (var i = 0; i < h_game_size * h_game_size; i++) {
        _loop(i);
      }
    };
    var toggleCells = function toggleCells(index) {
      var toggle = function toggle(i) {
        return $('.halloween-game__grid').children().eq(i).toggleClass('active');
      };
      toggle(index);
      if (index % h_game_size !== 0) toggle(index - 1);
      if ((index + 1) % h_game_size !== 0) toggle(index + 1);
      if (index - h_game_size >= 0) toggle(index - h_game_size);
      if (index + h_game_size < h_game_size * h_game_size) toggle(index + h_game_size);
    };
    var checkWin = function checkWin() {
      if ($('.halloween-game__cell:not(.active)').length === h_game_size * h_game_size && h_game_finish == false) {
        h_game_finish = true;
        clearInterval(h_game_interval);
        _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/winGame', {
          'timer': h_game_timer
        }, null, function (result) {
          toastr.success("\u0412\u0441\u0435 \u0442\u044B\u043A\u0432\u044B \u0437\u0430\u0442\u0443\u0448\u0435\u043D\u044B! \u041F\u043E\u043B\u0443\u0447\u0438\u0442\u0435 \u0437\u0430\u0441\u043B\u0443\u0436\u0435\u043D\u043D\u044B\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0438 \u0433\u043E\u0440\u0434\u0438\u0442\u0435\u0441\u044C \u043F\u043E\u0431\u0435\u0434\u043E\u0439");
        });
      }
    };
    var startTimer = function startTimer() {
      h_game_timer = 0;
      $('.halloween-game__timer').text(h_game_timer);
      h_game_interval = setInterval(function () {
        return $('.halloween-game__timer').text(++h_game_timer);
      }, 1000);
    };
    var generateSolvableGrid = function generateSolvableGrid() {
      var minMoves = 7;
      var maxMoves = 10;
      var numMoves = Math.floor(Math.random() * (maxMoves - minMoves + 1)) + minMoves;
      for (var i = 0; i < numMoves; i++) {
        var randomIndex = Math.floor(Math.random() * h_game_size * h_game_size);
        toggleCells(randomIndex);
      }
      var activeCellsCount = $('.halloween-game__cell.active').length;
      if (activeCellsCount < 10) {
        generateSolvableGrid();
      }
    };

    // Сброс игры
    var resetGame = function resetGame() {
      h_game_finish = false;
      clearInterval(h_game_interval);
      createGrid();
      generateSolvableGrid();
      startTimer();
    };
    $('.halloween-game__reset').click(resetGame);
    createGrid();
    generateSolvableGrid();
    startTimer();
  }
}
function addCardToPackList(data) {
  if (!$('.halloween-pack__history').length) return;
  var _data$split = data.split(':'),
    _data$split2 = _slicedToArray(_data$split, 2),
    image = _data$split2[0],
    cardId = _data$split2[1];
  var newCard = "\n        <div class=\"owl-item\" style=\"width: auto;\">\n            <div class=\"manga-cards__item-wrapper halloween-slide-in\">\n                <div class=\"halloween-pack__card manga-cards__item\" data-name=\"\" data-card-id=\"".concat(cardId, "\">\n                    <div class=\"manga-cards__image\" style=\"background-image: url('").concat(image, "')\"></div>\n                </div>\n            </div>\n        </div>\n    ");
  var owl = $('.halloween-pack__history').owlCarousel();
  owl.find('.owl-item').last().remove();
  owl.trigger('add.owl.carousel', [$(newCard), 0]).trigger('refresh.owl.carousel');
}
function addCardToStart(data) {
  var _data$split3 = data.split(':'),
    _data$split4 = _slicedToArray(_data$split3, 2),
    image = _data$split4[0],
    cardId = _data$split4[1];
  var newCard = "\n        <div class=\"owl-item\" style=\"width: auto;\">\n            <div class=\"manga-cards__item-wrapper halloween-slide-in\">\n                <div class=\"halloween-pack__card manga-cards__item\" data-name=\"\u0412\u0435\u0441\u0435\u043D\u043D\u0435\u0435 \u0446\u0432\u0435\u0442\u0435\u043D\u0438\u0435\" data-card-id=\"".concat(cardId, "\">\n                    <div class=\"manga-cards__image\" style=\"background-image: url('").concat(image, "')\"></div>\n                </div>\n            </div>\n        </div>\n    ");
  var owl = $('.halloween-pack__history').owlCarousel();
  owl.find('.owl-item').last().remove();
  owl.trigger('add.owl.carousel', [$(newCard), 0]).trigger('refresh.owl.carousel');
}
function showHalloweenAnimation() {
  if (localStorage.getItem('halloweenAnimationShown')) {
    return;
  }
  $('head').append('<link href="https://fonts.googleapis.com/css2?family=Underdog&display=swap" rel="stylesheet">');
  var containerHTML = "\n        <div class=\"container-halloween-enter\">\n            <div class=\"container-halloween-enter__pumpkin\"></div>\n            <div class=\"container-halloween-enter__text\">Halloween <div class=\"container-halloween-enter__text-start\">\u041D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F...</div></div>\n            <div class=\"container-halloween-enter__pumpkin\"></div>\n        </div>\n    ";
  $('body').append(containerHTML);
  var container = $('.container-halloween-enter');
  var halloweenText = $('.container-halloween-enter__text');
  var halloweenTextStart = $('.container-halloween-enter__text-start');
  container.css({
    display: 'flex',
    opacity: 0
  });
  setTimeout(function () {
    container.animate({
      opacity: 1
    }, 1000);
    setTimeout(function () {
      $('.container-halloween-enter__text').addClass('container-halloween-enter__text--fall');
      $('.container-halloween-enter__pumpkin').addClass('container-halloween-enter__pumpkin--fall');
      setTimeout(function () {
        halloweenTextStart.animate({
          opacity: 1
        }, 1300);
        halloweenText.addClass('container-halloween-enter__blink');
        setTimeout(function () {
          halloweenText.css('animation-iteration-count', '1');
          halloweenText.css('opacity', '1');
          setTimeout(function () {
            container.fadeOut(800);
            localStorage.setItem('halloweenAnimationShown', 'true');
          }, 1700);
        }, 1500);
      }, 2300);
    }, 1000);
  }, 2000);
}
function showNewYearAnimation() {
  if (localStorage.getItem('newYearAnimationShown')) {
    return;
  }
  var containerHTML = "\n        <div class=\"container-halloween-enter\">\n            <div class=\"container-halloween-enter__pumpkin container-halloween-enter__pumpkin--new-year\"></div>\n            <div class=\"container-halloween-enter__text container-halloween-enter__text--new-year\">\u041D\u043E\u0432\u044B\u0439 \u0433\u043E\u0434 <div class=\"container-halloween-enter__text-start\">\u041D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F...</div></div>\n            <div class=\"container-halloween-enter__pumpkin container-halloween-enter__pumpkin--new-year\"></div>\n        </div>\n    ";
  $('body').append(containerHTML);
  var container = $('.container-halloween-enter');
  var halloweenText = $('.container-halloween-enter__text');
  var halloweenTextStart = $('.container-halloween-enter__text-start');
  container.css({
    display: 'flex',
    opacity: 0
  });
  setTimeout(function () {
    container.animate({
      opacity: 1
    }, 1000);
    setTimeout(function () {
      $('.container-halloween-enter__text').addClass('container-halloween-enter__text--fall');
      $('.container-halloween-enter__pumpkin').addClass('container-halloween-enter__pumpkin--fall');
      setTimeout(function () {
        halloweenTextStart.animate({
          opacity: 1
        }, 1300);
        halloweenText.addClass('container-halloween-enter__blink');
        setTimeout(function () {
          halloweenText.css('animation-iteration-count', '1');
          halloweenText.css('opacity', '1');
          setTimeout(function () {
            container.fadeOut(800);
            localStorage.setItem('newYearAnimationShown', 'true');
          }, 1700);
        }, 1500);
      }, 2300);
    }, 1000);
  }, 2000);
}
function addCandy(token) {
  var candy = $('<div class="helloween-gift-candy"></div>');
  var randomPosition = Math.random() * 80 + 10;
  var isCollected = false;
  candy.css('left', "".concat(randomPosition, "%"));
  $('body').append(candy);
  candy.on('animationend', function () {
    if (!$(this).hasClass('helloween-gift-candy--collected')) {
      $(this).remove();
    }
  });
  candy.on('click', function () {
    if (isCollected) return;
    isCollected = true;
    $(this).addClass('helloween-gift-candy--collected');
    var currentTop = $(this).offset().top - $(window).scrollTop();
    var currentLeft = $(this).offset().left - $(window).scrollLeft();
    $(this).css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px"),
      'animation': 'none'
    });
    $(this).css('animation', 'helloween-gift-candy--collect 0.9s forwards');
    var pointText = $('<div class="helloween-gift-candy--point-text">Омномном...</div>');
    pointText.css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px")
    });
    $('body').append(pointText);
    pointText.on('animationend', function () {
      $(this).remove();
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=702', {
      token: token
    }, null, function (result) {});
  });
}
function addPumpkin(token) {
  var pumpkin = $('<div class="helloween-gift-pumpkin"></div>');
  $('body').append(pumpkin);
  var hitCount = 0;
  var isCollected = false;
  pumpkin.on('click', function () {
    hitCount++;
    pumpkin.css('animation', 'none');
    var animations = ['helloween-gift-pumpkin--shake', 'helloween-gift-pumpkin--rotate', 'helloween-gift-pumpkin--bounce'];
    var randomAnimation = animations[Math.floor(Math.random() * animations.length)];
    pumpkin[0].offsetWidth;
    pumpkin.css('animation', "".concat(randomAnimation, " 0.3s"));
    if (hitCount === 10) {
      if (isCollected) return;
      isCollected = true;
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=702', {
        token: token
      }, null, function (result) {});
      setTimeout(function () {
        releaseCandies(pumpkin.offset().left + pumpkin.width() / 2, pumpkin.offset().top + pumpkin.height() / 2);
        pumpkin.remove();
      }, 300);
    }
  });
}
function releaseCandies(centerX, centerY) {
  var animations = ['helloween-gift-pumpkin--diagonal-rise-left', 'helloween-gift-pumpkin--diagonal-rise-center', 'helloween-gift-pumpkin--diagonal-rise-right'];
  for (var i = 0; i < 3; i++) {
    var candy = $('<div class="helloween-gift-pumpkin--candy"></div>');
    candy.css({
      'left': "".concat(centerX, "px"),
      'top': "".concat(centerY, "px"),
      'animation': "".concat(animations[i], " 2s ease-out forwards")
    });
    $('body').append(candy);
    candy.on('animationend', function () {
      $(this).remove();
    });
  }
  var text = $('<div class="helloween-gift-pumpkin--text">ого, сразу 3 конфеты!</div>');
  text.css({
    'left': "".concat(centerX - 35, "px"),
    'top': "".concat(centerY, "px")
  });
  $('body').append(text);
  text.on('animationend', function () {
    $(this).remove();
  });
}
function reorderTeams(order) {
  var owl = $('.halloween-teams');
  var $items = $('.halloween-teams__item');
  var currentOrder = $items.map(function (_, item) {
    return $(item).data('team').toString();
  }).get();
  var isSameOrder = currentOrder.length === order.length && currentOrder.every(function (id, index) {
    return id === order[index];
  });
  if (isSameOrder) {
    return;
  }
  var reorderedItems = [];
  order.forEach(function (teamId) {
    var $item = $items.filter("[data-team=\"".concat(teamId, "\"]"));
    if ($item.length) {
      reorderedItems.push($item);
    }
  });
  owl.trigger('replace.owl.carousel', [reorderedItems.map(function ($item) {
    return $item[0].outerHTML;
  }).join('')]);
  owl.trigger('refresh.owl.carousel');
  var newItems = $('.halloween-teams__item');
  newItems.css({
    'opacity': 0,
    'transform': 'translateY(20px)',
    'transition': 'transform 0.5s ease, opacity 0.5s ease'
  });
  setTimeout(function () {
    newItems.css({
      'opacity': 1,
      'transform': 'translateY(0)'
    });
  }, 100);
}
function updateCandy(teamId, newValue) {
  var el = $(".halloween-teams__item[data-team='".concat(teamId, "'] .halloween-teams__candy div"));
  var oldValue = el.text().trim().replace(/\s/g, "");
  var oldNum = oldValue;
  var newNum = newValue.replace(/\s/g, "");
  if (newNum.length > oldNum.length) {
    oldNum = oldNum.padStart(newNum.length, '0');
  } else if (oldNum.length > newNum.length) {
    newNum = newNum.padStart(oldNum.length, '0');
  }
  var animatedDigits = newNum.split("").map(function (digit, index) {
    if (oldNum[index] !== digit) {
      return "<span class='candy-change'>".concat(digit, "</span>");
    } else {
      return digit;
    }
  });
  var formattedNumber = [];
  for (var i = animatedDigits.length - 1, count = 1; i >= 0; i--, count++) {
    formattedNumber.unshift(animatedDigits[i]);
    if (count % 3 === 0 && i !== 0) {
      formattedNumber.unshift(" ");
    }
  }
  el.html(formattedNumber.join(""));
  var changedEls = el.find(".candy-change");
  changedEls.css({
    display: "inline-block",
    transition: "transform 0.1s, color 0.1s",
    transform: "scale(1.5)",
    color: "#af5b18"
  });
  setTimeout(function () {
    changedEls.css({
      transform: "scale(1)",
      color: ""
    });
  }, 100);
}
function addBallNewYear(token) {
  var randomSuffix = Math.floor(Math.random() * 4) + 1;
  var candy = $("<div class=\"new-year-gift-ball new-year-gift-ball-".concat(randomSuffix, "\"></div>"));
  var randomPosition = Math.random() * 80 + 10;
  var isCollected = false;
  candy.css('left', "".concat(randomPosition, "%"));
  $('body').append(candy);
  candy.on('animationend', function () {
    if (!$(this).hasClass('new-year-gift-ball--collected')) {
      $(this).remove();
    }
  });
  candy.on('click', function () {
    if (isCollected) return;
    isCollected = true;
    $(this).addClass('new-year-gift-ball--collected');
    var currentTop = $(this).offset().top - $(window).scrollTop();
    var currentLeft = $(this).offset().left - $(window).scrollLeft();
    $(this).css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px"),
      'animation': 'none'
    });
    $(this).css('animation', 'new-year-gift-ball--collect 0.9s forwards');
    var pointText = $('<div class="new-year-gift-ball--point-text">Охохохо...</div>');
    pointText.css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px")
    });
    $('body').append(pointText);
    pointText.on('animationend', function () {
      $(this).remove();
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=702', {
      token: token
    }, null, function (result) {});
  });
}
function addNewYearBag(token) {
  var pumpkin = $('<div class="new-year-bag"></div>');
  $('body').append(pumpkin);
  var hitCount = 0;
  var isCollected = false;
  pumpkin.on('click', function () {
    hitCount++;
    pumpkin.css('animation', 'none');
    var animations = ['new-year-bag--shake', 'new-year-bag--rotate', 'new-year-bag--bounce'];
    var randomAnimation = animations[Math.floor(Math.random() * animations.length)];
    pumpkin[0].offsetWidth;
    pumpkin.css('animation', "".concat(randomAnimation, " 0.3s"));
    if (hitCount === 10) {
      if (isCollected) return;
      isCollected = true;
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=702', {
        token: token
      }, null, function (result) {});
      setTimeout(function () {
        releaseBalls(pumpkin.offset().left + pumpkin.width() / 2, pumpkin.offset().top + pumpkin.height() / 2);
        pumpkin.remove();
      }, 300);
    }
  });
}
function releaseBalls(centerX, centerY) {
  var animations = ['new-year-bag--diagonal-rise-left', 'new-year-bag--diagonal-rise-center', 'new-year-bag--diagonal-rise-right'];
  for (var i = 0; i < 3; i++) {
    var candy = $('<div class="new-year-bag--candy"></div>');
    candy.css({
      'left': "".concat(centerX, "px"),
      'top': "".concat(centerY, "px"),
      'animation': "".concat(animations[i], " 2s ease-out forwards")
    });
    $('body').append(candy);
    candy.on('animationend', function () {
      $(this).remove();
    });
  }
  var text = $('<div class="new-year-bag--text">ого, сразу 3 игрушки!</div>');
  text.css({
    'left': "".concat(centerX - 35, "px"),
    'top': "".concat(centerY, "px")
  });
  $('body').append(text);
  text.on('animationend', function () {
    $(this).remove();
  });
}
function addBallEvent(token) {
  var randomSuffix = Math.floor(Math.random() * 4) + 1;
  var candy = $("<div class=\"event-gift-ball event-gift-ball-".concat(randomSuffix, "\"></div>"));
  var randomPosition = Math.random() * 80 + 10;
  var isCollected = false;

  //candy.css('left', `${randomPosition}%`);
  $('body').append(candy);
  candy.on('animationend', function () {
    if (!$(this).hasClass('event-gift-ball--collected')) {
      //$(this).remove();
    }
  });
  candy.on('click', function () {
    if (isCollected) return;
    isCollected = true;
    $(this).addClass('event-gift-ball--collected');
    var currentTop = $(this).offset().top - $(window).scrollTop();
    var currentLeft = $(this).offset().left - $(window).scrollLeft();
    $(this).css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px"),
      'animation': 'none'
    });
    $(this).css('animation', 'event-gift-ball--collect 0.9s forwards');
    var pointText = $('<div class="event-gift-ball--point-text">Ухххх...</div>');
    pointText.css({
      'top': "".concat(currentTop, "px"),
      'left': "".concat(currentLeft, "px")
    });
    $('body').append(pointText);
    pointText.on('animationend', function () {
      $(this).remove();
    });
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=776', {
      token: token
    }, null, function (result) {});
  });
}
function addEventBag(token) {
  var pumpkin = $('<div class="event-bag"></div>');
  $('body').append(pumpkin);
  var hitCount = 0;
  var isCollected = false;
  pumpkin.on('click', function () {
    hitCount++;
    pumpkin.css('animation', 'none');
    var animations = ['event-bag--shake', 'event-bag--rotate', 'event-bag--bounce'];
    var randomAnimation = animations[Math.floor(Math.random() * animations.length)];
    pumpkin[0].offsetWidth;
    pumpkin.css('animation', "".concat(randomAnimation, " 0.3s"));
    if (hitCount === 10) {
      if (isCollected) return;
      isCollected = true;
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/halloween/takeCandy?r=776', {
        token: token
      }, null, function (result) {});
      setTimeout(function () {
        releaseBallsEvent(pumpkin.offset().left + pumpkin.width() / 2, pumpkin.offset().top + pumpkin.height() / 2);
        pumpkin.remove();
      }, 300);
    }
  });
}
function releaseBallsEvent(centerX, centerY) {
  var animations = ['event-bag--diagonal-rise-left', 'event-bag--diagonal-rise-center', 'event-bag--diagonal-rise-right'];
  for (var i = 0; i < 3; i++) {
    var candy = $('<div class="event-bag--candy"></div>');
    candy.css({
      'left': "".concat(centerX, "px"),
      'top': "".concat(centerY, "px"),
      'animation': "".concat(animations[i], " 2s ease-out forwards")
    });
    $('body').append(candy);
    candy.on('animationend', function () {
      $(this).remove();
    });
  }
  var text = $('<div class="event-bag--text">ого, сразу 3!</div>');
  text.css({
    'left': "".concat(centerX - 35, "px"),
    'top': "".concat(centerY, "px")
  });
  $('body').append(text);
  text.on('animationend', function () {
    $(this).remove();
  });
}

/***/ }),

/***/ "./resources/js/modules/headerModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/headerModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeHeader": () => (/* binding */ initializeHeader)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeHeader() {
  $('.theme-change__btn').on('click', function () {
    if ($('body').hasClass('only-dark-theme')) return false;
    $('body').toggleClass('dark');
    if ($('body').hasClass('dark')) _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('theme', 'dark', 365);else _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('theme', '', 365);
    return false;
  });
  $('.header__burger').on('click', function () {
    var icon = $(this).find('.icon');
    if (icon.hasClass("icon-burger")) {
      $('.header__mobile-menu').css({
        'transform': 'translateX(0%)'
      });
      $('body').append('<div class="mobile-menu-overlay"></div>');
      $('.mobile-menu-overlay').css({
        display: 'block',
        'opacity': 1
      });
      $('body').css({
        overflow: 'hidden'
      });
      icon.removeClass("icon-burger").addClass("icon-close");
    } else {
      icon.removeClass("icon-close").addClass("icon-burger");
      $('.header__mobile-menu').css({
        'transform': 'translateX(-105%)'
      });
      $('.mobile-menu-overlay').remove();
      $('body').css({
        overflow: ''
      });
    }
    return false;
  });
  $('body').on('click', '.mobile-menu-overlay', function () {
    $('.header__mobile-menu').css({
      'transform': 'translateX(-105%)'
    });
    $('.mobile-menu-overlay').remove();
    $('body').css({
      overflow: ''
    });
    $('.header__burger .icon').removeClass("icon-close").addClass("icon-burger");
  });
  $('.header__mobile-menu span').on('click', function () {
    $(this).siblings('ul').toggle();
    var icon = $(this).find('.header__mobile-menu-show-icon');
    if (icon.hasClass("icon-expand-more")) icon.removeClass("icon-expand-more").addClass("icon-expand-less");else icon.removeClass("icon-expand-less").addClass("icon-expand-more");
  });
}
;

/***/ }),

/***/ "./resources/js/modules/importBookmarkModule.js":
/*!******************************************************!*\
  !*** ./resources/js/modules/importBookmarkModule.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeImportBookmark": () => (/* binding */ initializeImportBookmark)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeImportBookmark() {
  $('.import-bookmark-btn').on('click', function () {
    var link = $('.import-bookmark-input').val();
    if (!link) {
      toastr.error('Заполните все поля');
      return false;
    }
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/import', {
      'link': link
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('.import-bookmark-input').keydown(function (event) {
    if (event.key === 'Enter') {
      event.preventDefault();
    }
  });
}

/***/ }),

/***/ "./resources/js/modules/lastReadModule.js":
/*!************************************************!*\
  !*** ./resources/js/modules/lastReadModule.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeLastRead": () => (/* binding */ initializeLastRead)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeLastRead() {
  if ($('.last-read-wrapper').length && window.isAuth) {
    var history = JSON.parse(localStorage.getItem('history')) || [];
    var list = extractItems(history);
    if (!list.length) {
      return false;
    }

    // Получаем сохраненные данные и время их сохранения
    var cachedResult = JSON.parse(localStorage.getItem('lastReadResult'));
    var lastRequestTime = localStorage.getItem('lastReadTime');
    var currentTime = new Date().getTime();

    // Проверяем, не прошло ли больше минуты с последнего запроса
    if (cachedResult && lastRequestTime && currentTime - lastRequestTime < 180000) {
      // Используем сохраненные данные, если прошло менее минуты
      $('.last-read-wrapper').html(cachedResult.html);
      $('.last-read').owlCarousel({
        loop: false,
        autoWidth: true,
        dots: false,
        items: 8
      });
    } else {
      // Отправляем запрос и сохраняем результат, если прошло больше минуты
      $.post('/last-read', {
        list: list
      }, function (result) {
        $('.last-read-wrapper').html(result.html);
        $('.last-read').owlCarousel({
          loop: false,
          autoWidth: true,
          dots: false,
          items: 8
        });

        // Сохраняем результат и время запроса в localStorage
        localStorage.setItem('lastReadResult', JSON.stringify(result));
        localStorage.setItem('lastReadTime', currentTime.toString());
      });
    }
  }
  function extractItems(items) {
    var extractedItems = [];
    var count = 0;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (item.current) {
        var extractedItem = {
          manga_id: item.id,
          current: item.current,
          chapter: item.chapter,
          volume: item.volume,
          index: i
        };
        extractedItems.push(extractedItem);
        count++;
      }
      if (count === 6) {
        break;
      }
    }
    return extractedItems;
  }
}

/***/ }),

/***/ "./resources/js/modules/marketModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/marketModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeMarket": () => (/* binding */ initializeMarket)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeMarket() {
  $('body').on('click', '.card-market__controls div', function () {
    var type = $(this).attr('data-type');
    if (type === 'grid') {
      $('.market-show').show();
      $('.market-show__row').hide();
    } else if (type === 'list') {
      $('.market-show').hide();
      $('.market-show__row').show();
    }
  });
  $('body').on('click', '.market-show__buy-item-btn', function () {
    var button = $(this);
    var id = $(this).closest('.card-show').attr('data-id');
    var cards_ids = $('.card-pool--market-buy .card-pool__item').map(function () {
      return $(this).attr('data-id');
    }).get();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/' + id + '/buy', {
      id: id,
      cards_ids: cards_ids
    }, button, function (result) {
      toastr.success(result.message);
    });
    return false;
  });
  $('body').on('click', '.market-list__cards--all .manga-cards__item-wrapper', function () {
    var id = $(this).data('id');
    var isRequest = $(this).closest('.market-list__cards--all').hasClass('market-list__cards--requests');
    var url = isRequest ? '/market/requests/' + id : '/market/card/' + id;
    window.location = url;
  });
  $('body').on('click', '.market-list__cards--my .manga-cards__image, .market-list__cards-edit-btn', function () {
    var id = $(this).closest('.manga-cards__item-wrapper').data('id');
    var isRequest = $(this).closest('.market-list__cards--my').hasClass('market-list__cards--requests');
    var url = isRequest ? '/market/requests/' + id : '/market/' + id;
    window.location = url;
  });
  $('body').on('click', '.market-list__cards-del-btn', function () {
    if (!confirm("Вы уверены?")) return false;
    var button = $(this);
    var id = button.closest('.manga-cards__item-wrapper').attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/' + id + '/delete', {}, button, function (result) {
      toastr.success(result.message);
      button.closest('.manga-cards__item-wrapper').remove();
    });
  });
  $('body').on('click', '.market-create__button', function () {
    var button = $(this);
    var cardShow = $('.card-show');
    if (!cardShow.attr('data-id')) {
      toastr.error('Выберите карту');
      return;
    }
    var inputs = $('.market-create__input');
    var validInput = inputs.filter(function () {
      var value = parseInt($(this).val(), 10);
      return value > 0 && value <= 2000;
    });
    if (validInput.length !== 1) {
      toastr.error('Нужно выбрать цену на карту (только один ранг), от 1 до 2000');
      return;
    }
    var id = cardShow.attr('data-id');
    var rank = validInput.data('rank');
    var value = parseInt(validInput.val(), 10);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/', {
      id: id,
      rank: rank,
      value: value
    }, button, function (result) {
      toastr.success(result.message);
      window.location = '/market/';
    });
  });
  $('body').on('click', '.market-show__fill-cards-btn', function () {
    var priceRank = $('.market-show__user-cards-rank').text().replace(/\s+/g, '');
    var priceCount = parseInt($('.market-show__user-cards span').text());
    var currentCount = parseInt($('.card-pool__stats-number').text());
    $('.card-filter-list__card[data-in-trade="0"]').each(function () {
      if (currentCount >= priceCount) {
        return false;
      }
      var card = $(this);
      var rank = card.data('rank');
      var dataId = card.data('id');
      if (rank == priceRank && $('.card-pool__item[data-id="' + dataId + '"]').length === 0) {
        card.trigger('click');
        currentCount++;
      }
    });
  });
  $('body').on('click', '.card-inventory-container--market-sell .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var elem = $(this);
    if ($('.card-pool__item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    $('.card-show__image').attr('src', imgSrc);
    $('.card-show__header').css('background-image', 'url(' + imgSrc + ')');
    $('.card-show').attr('data-id', dataId);
  });
  $('body').on('click', '.card-inventory-container--market-buy .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var elem = $(this);
    if ($('.card-pool__item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    var showcaseItem = $('<div>', {
      'class': 'card-pool__item',
      'data-id': dataId
    });
    var imgElement = $('<img>', {
      'src': imgSrc
    });
    showcaseItem.append(imgElement);
    $('.card-pool__container').append(showcaseItem);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId);
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.card-pool--market-buy .card-pool__item', function () {
    var dataId = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId, true);
    $(this).remove();
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.card-inventory-container--market-request .card-filter-list__card', function () {
    var imgSrc = $(this).find('img').attr('src');
    var dataId = $(this).data('id');
    var elem = $(this);
    if ($('.card-pool__item[data-id="' + dataId + '"]').length) {
      elem.addClass('shake-card');
      setTimeout(function () {
        elem.removeClass('shake-card');
      }, 400);
      return false;
    }
    var showcaseItem = $('<div>', {
      'class': 'card-pool__item',
      'data-id': dataId
    });
    var imgElement = $('<img>', {
      'src': imgSrc
    });
    showcaseItem.append(imgElement);
    $('.card-pool__container').append(showcaseItem);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId);
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.card-pool--market-request .card-pool__item', function () {
    var dataId = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.updateCardIds(dataId, true);
    $(this).remove();
    $('.card-pool__stats-number').text($('.card-pool__item').length);
  });
  $('body').on('click', '.market-request-create__fill-button', function () {
    $('.card-filter-list__card[data-in-trade="0"]').each(function () {
      var card = $(this);
      var dataId = card.data('id');
      if ($('.card-pool__item[data-id="' + dataId + '"]').length === 0) {
        card.trigger('click');
      }
    });
  });
  $('body').on('click', '.market-request-create__button', function () {
    var button = $(this);
    var card_id = $('.card-show').attr('data-id');
    var cards_ids = $('.card-pool--market-request .card-pool__item').map(function () {
      return $(this).attr('data-id');
    }).get();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/requests/', {
      card_id: card_id,
      cards_ids: cards_ids
    }, button, function (result) {
      toastr.success(result.message);
      window.location = '/market/requests';
    });
    return false;
  });
  $('body').on('click', '.market-show__sell-item-btn', function () {
    var button = $(this);
    var request_id = $(this).closest('.card-show').attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/requests/' + request_id + '/fulfill', {}, button, function (result) {
      toastr.success(result.message);
      button.hide();
    });
    return false;
  });
  $('body').on('click', '.market-list__request-cards-del-btn', function () {
    if (!confirm("Вы уверены?")) return false;
    var button = $(this);
    var id = button.closest('.manga-cards__item-wrapper').attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/market/requests/' + id + '/delete', {}, button, function (result) {
      toastr.success(result.message);
      button.closest('.manga-cards__item-wrapper').remove();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/messageModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/messageModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeMessage": () => (/* binding */ initializeMessage)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeMessage() {
  var socketMessage = null;
  if ($('.messages__chat').length && $('.messages__chat').attr('data-dialog-token')) {
    var dialog_token = $('.messages__chat').attr('data-dialog-token');
    socketMessage = io("wss://wss.mangabuff.ru:2087/?token=" + dialog_token, {
      transports: ['websocket']
    });
    socketMessage.on("connect", function () {
      console.log('connect');
    });
    socketMessage.on("read-new-message", function (id) {
      $('.chat__message[data-id="' + id + '"]').addClass('chat__message--read');
    });
    socketMessage.on("new-message", function (data) {
      var chat_body = $('.chat__body');
      var newData = $(data.replace("chat__message--me", ""));
      chat_body.append(newData);
      chat_body.scrollTop(chat_body.prop("scrollHeight"));
      var msgId = newData.attr('data-id');
      $.post('/messages/read', {
        dialog_token: dialog_token
      }, function (result) {});
      if (socketMessage) socketMessage.emit('read-message', msgId);
    });
  }
  $('.chat__send-btn').on('click', function () {
    sendMessage(socketMessage);
    return false;
  });
  $('.chat__form-area').on('input', function () {
    this.style.height = 'auto';
    var newHeight = this.scrollHeight;
    if (newHeight > 150) {
      newHeight = 150;
      this.style.overflowY = 'scroll';
    } else {
      this.style.overflowY = 'hidden';
    }
    this.style.height = newHeight + 'px';
  });
  $('.chat__form-area').keydown(function (e) {
    if (e.key === "Enter") {
      if (!e.shiftKey) {
        e.preventDefault();
        sendMessage(socketMessage);
      }
    }
  });
  $('.chat__reply-close').on('click', function () {
    $('.chat__reply').hide();
    $('.chat__reply').attr('data-id', '');
  });
  $('body').on('click', '.chat__message:not(.chat__message--me)', function () {
    var fullText = $(this).find('.chat__message-text').text();
    var truncatedText = fullText.length > 30 ? fullText.substring(0, 30) + '...' : fullText;
    var id = $(this).attr('data-id');
    $('.chat__reply-text').text(truncatedText);
    $('.chat__reply').css('display', 'flex');
    $('.chat__reply').attr('data-id', id);
  });
  if ($('.chat__body').length) {
    $('.chat__body').scrollTop($('.chat__body').prop("scrollHeight"));
  }
  $('body').on('click', '.dialog__del-btn', function () {
    if (!confirm("Действительно удалить этот диалог?")) return false;
    var button = $(this);
    var id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/messages/removeDialog/' + id, {}, button, function (result) {
      button.closest('.dialog').remove();
    });
    return false;
  });
  $('body').on('click', '.messages__dialogs--load-btn', function (event) {
    event.stopPropagation();
    var button = $(this);
    var offset = $('.dialog').length;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/messages/load/', {
      offset: offset
    }, button, function (result) {
      if (result.content) {
        if ($('.messages__dialogs--load-btn').length) {
          $('.messages__dialogs--load-btn').before(result.content);
        } else {
          $('.messages__dialogs').append(result.content);
        }
      } else {
        button.remove();
      }
    });
    return false;
  });
  $('body').on('click', '.chat__message-delete-btn', function (event) {
    event.stopPropagation();
    var button = $(this);
    var id = $(this).attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/messages/removeMessage/' + id, {}, button, function (result) {
      button.closest('.chat__message').remove();
    });
    return false;
  });
  $('body').on('click', '.chat__message-text', function () {
    var $message = $(this).closest('.chat__message');
    var $deleteBtn = $message.find('.chat__message-delete-btn');
    if ($message.hasClass('chat__message--me')) {
      if ($deleteBtn.css('display') === 'none') {
        $deleteBtn.css('display', 'flex');
      } else {
        $deleteBtn.css('display', 'none');
      }
    } else {
      $deleteBtn.css('display', 'none');
    }
  });
  function sendMessage(socketMessage) {
    var form = $('.chat__form');
    if (form.attr('stop')) return false;
    var text = $('.chat__form-area').val().trim();
    if (!text) return false;
    var toWhoId = $('.messages__chat').attr('data-user-id');
    var chat_body = $('.chat__body');
    var is_reply = $('.chat__reply').attr('data-id') ? true : false;
    var reply_id = is_reply ? $('.chat__reply').attr('data-id') : null;
    var reply_text = is_reply ? $('.chat__reply-text').text() : null;
    var button = $('.chat__send-btn');
    $('.chat__form-area').val("");
    form.attr('stop', true);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/messages/' + toWhoId, {
      text: text,
      reply_id: reply_id,
      reply_text: reply_text
    }, button, function (result) {
      $('.not-found').remove();
      chat_body.append(result);
      chat_body.scrollTop(chat_body.prop("scrollHeight"));
      if (is_reply) {
        $('.chat__reply').attr('data-id', '');
        $('.chat__reply').hide();
      }
      if (socketMessage) socketMessage.emit('send-message', result);
    });
    setTimeout(function () {
      form.removeAttr('stop');
    }, 800);
  }
}

/***/ }),

/***/ "./resources/js/modules/mineModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/mineModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeMine": () => (/* binding */ initializeMine)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeMine() {
  if ($('.mine-body').length) {
    var animateScoreChange = function animateScoreChange(from, to) {
      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
      var start = performance.now();
      function update(now) {
        var progress = Math.min((now - start) / duration, 1);
        var current = Math.floor(from + (to - from) * progress);
        $score.text(current.toLocaleString('en-US'));
        if (progress < 1) requestAnimationFrame(update);
      }
      requestAnimationFrame(update);
    };
    $('body').on('click', '.mine-shop__ore-change-btn', function () {
      var button = $(this);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/mine/exchange', {}, button, function (result) {
        toastr.success(result.message);
        $('.mine-shop__ore-count').text(parseInt(result.ore));
        $('.mine-shop__ore-change-btn span').text(0);
      });
      return false;
    });
    $('body').on('click', '.mine-shop__upgrade-btn', function () {
      var button = $(this);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/mine/upgrade', {}, button, function (result) {
        toastr.success(result.message);
      });
      return false;
    });
    var ore = parseInt($('.main-mine').attr('data-ore')) || 0;
    var anim = false;
    var $tap = $('.main-mine__game-tap'),
      $frames = $('.main-mine__game-character'),
      $score = $('.js-score');
    var $hitsLeft = $('.main-mine__game-hits-left');
    var $progressFill = $('.main-mine__game-progress-fill');
    var $shopOreCount = $('.mine-shop__ore-count');
    $tap.on('click', function () {
      if (anim) return;
      anim = true;
      $tap.hide();
      var i = 0,
        interval = setInterval(function () {
          $frames.removeClass('active').eq(i).addClass('active');
          i++;
          if (i >= $frames.length) {
            clearInterval(interval);
            setTimeout(function () {
              $frames.removeClass('active').eq(0).addClass('active');
              $.post('/mine/hit', {}, function (res) {
                var old = ore;
                var addedOre = res.ore - old;
                ore = res.ore;
                if (addedOre > 0) {
                  var $plus = $('<div class="mine-score-plus">+' + addedOre + '</div>');
                  $('.main-mine__game-score').append($plus);
                  $plus.css({
                    position: 'absolute',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    bottom: '0',
                    opacity: 1,
                    fontSize: '29px',
                    color: '#7e42bd',
                    fontWeight: 'bold',
                    pointerEvents: 'none',
                    zIndex: 10
                  });
                  $plus.animate({
                    bottom: '30px',
                    opacity: 0
                  }, 1500, function () {
                    $(this).remove();
                  });
                }
                animateScoreChange(old, ore);
                $tap.show();
                anim = false;
                $hitsLeft.text(res.hits_left);
                $shopOreCount.text(ore);
                var max_hit = parseInt($('.main-mine__game-panel').attr('data-max-hit'));
                $('.mine-shop__ore-change-btn span').text(parseInt(parseInt(ore) / 100));
                var usedHits = max_hit - res.hits_left;
                var percent = Math.min(usedHits / 100 * 100, 100);
                $progressFill.css('width', percent + '%');
              }).fail(function (err) {
                $tap.show();
                anim = false;
              });
            }, 200);
          }
        }, 50);
    });
    var setAppHeight = function setAppHeight() {
      return document.documentElement.style.setProperty('--app-height', "".concat(window.innerHeight, "px"));
    };
    $(window).on('resize', setAppHeight);
    setAppHeight();
  }
}

/***/ }),

/***/ "./resources/js/modules/moderModule.js":
/*!*********************************************!*\
  !*** ./resources/js/modules/moderModule.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeModer": () => (/* binding */ initializeModer)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeModer() {
  $('body').on('click', '.super-moder__ban-btn', function () {
    var button = $(this);
    var user_id = button.closest('.super-moder').attr('data-user-id');
    var type = button.attr('data-type');
    var duration = button.attr('data-duration');
    var text = $('.super-moder__reason').val();
    if (!text) {
      toastr.error('Укажите причину бана');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/super-moderation/users/' + user_id + '/ban', {
      type: type,
      duration: duration,
      text: text
    }, button, function (result) {
      toastr.success(result.message);
      $('.super-moder__reason').val('');
    });
  });
  $('body').on('click', '.super-moder__update-rating-btn', function () {
    var button = $(this);
    var user_id = button.closest('.super-moder').attr('data-user-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/super-moderation/users/' + user_id + '/updateRating', {}, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.super-moder__search-user-btn', function () {
    var userId = $('input[name="user_id"]').val().trim();
    if (userId) {
      window.location.href = '/super-moderation/users/' + userId + '/edit';
    } else {
      alert('Пожалуйста, введите ID пользователя.');
    }
    return false;
  });
  $('body').on('click', '.moderation-comment__decline-btn', function () {
    var button = $(this);
    var report_id = button.closest('.moderation-comment__item').attr('data-report-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/moderation-comments/decline', {
      'report_id': report_id
    }, button, function (result) {
      button.closest('.moderation-comment__item').remove();
    });
  });
  $('body').on('click', '.moderation-comment__del-btn', function () {
    var button = $(this);
    var report_id = button.closest('.moderation-comment__item').attr('data-report-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/moderation-comments/accept', {
      'report_id': report_id,
      'duration_ban': 0,
      'reason': ''
    }, button, function (result) {
      button.closest('.moderation-comment__item').remove();
    });
  });
  $('body').on('click', '.moderation-comment__ban-btn', function () {
    var button = $(this);
    var item = button.closest('.moderation-comment__item');
    var report_id = item.attr('data-report-id');
    var duration_ban = item.find('select[name="duration_ban"]').val();
    var reason = item.find('select[name="reason"]').val();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/moderation-comments/accept', {
      'report_id': report_id,
      'duration_ban': duration_ban,
      'reason': reason
    }, button, function (result) {
      item.remove();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/momentModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/momentModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeMoment": () => (/* binding */ initializeMoment)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeMoment() {
  if (window.location.pathname.startsWith('/moments/create')) {
    var updateImage = function updateImage(index) {
      if (window.pagesUrls[currentIndexPageCard]) {
        cropper.replace(window.pagesUrls[currentIndexPageCard]);
      }
      $('.moment-create__pages-title span').text(index + 1);
    };
    var moment_data = [];
    $('.moment-create__button--next').on('click', function () {
      if (currentIndexPageCard < window.pagesUrls.length - 1) {
        currentIndexPageCard++;
        updateImage(currentIndexPageCard);
      }
    });
    $('.moment-create__button--prev').on('click', function () {
      if (currentIndexPageCard > 0) {
        currentIndexPageCard--;
        updateImage(currentIndexPageCard);
      }
    });
    var image = $('.moment-create__image')[0];
    var cropper = new Cropper(image, {
      viewMode: 3,
      dragMode: 'move',
      autoCropArea: 1,
      restore: false,
      modal: false,
      guides: false,
      highlight: false,
      cropBoxMovable: false,
      cropBoxResizable: false,
      toggleDragModeOnDblclick: false,
      wheelZoomRatio: 0.2
    });
    $('.moment-create__button--load-img').on('click', function () {
      $("#imageInput").click();
    });
    $('#imageInput').on('input', function (e) {
      var files = e.target.files;
      if (files && files.length > 0) {
        var file = files[0];
        var reader = new FileReader();
        reader.onload = function (e) {
          cropper.replace(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    });
    $('.moment-create__pages-item').on('click', function () {
      $('.moment-create__pages-item').removeClass('moment-create__pages-item--active');
      $(this).addClass('moment-create__pages-item--active');
      cropper.replace($(this).find('img').attr('src'));
    });
    $('.moment-create__upload-btn').on('click', function () {
      var button = $(this);
      if (moment_data.length === 0) {
        toastr.error("Сначала добавьте кадры");
        return false;
      }
      if (moment_data.length > 4) {
        toastr.error("Нельзя добавить более 4 кадров");
        return false;
      }
      var moment_name = $('.moment-create__input-name').val();
      var chapter_id = $('.moment-create').attr('data-chapter-id');
      var text = $('.moment-create__text').val();
      if (moment_name == "Название" || moment_name == "") {
        toastr.error("Укажите название");
        return false;
      }
      if (!/^[А-ЯA-ZЁ]/.test(moment_name)) {
        toastr.error("Название должно быть с большой буквы");
        return false;
      }
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post(window.location.pathname, {
        'images': moment_data,
        moment_name: moment_name,
        chapter_id: chapter_id,
        text: text
      }, button, function (data) {
        toastr.success(data.message);
        _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
      });
    });
    $('.moment-create__add-btn').on('click', function () {
      var element = document.getElementById('photo');
      html2canvas(element, {
        backgroundColor: null,
        useCORS: true,
        scale: 3
      }).then(function (canvas) {
        var newCanvas = document.createElement("canvas");
        var context = newCanvas.getContext("2d");
        newCanvas.width = 300;
        newCanvas.height = 300;
        context.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height);
        canvas = newCanvas;
        var imageData = canvas.toDataURL('image/png');
        imageData = imageData.replace(/^data:image\/png;base64,/, '');
        moment_data.push(imageData);
        var imgBlob = newCanvas.toDataURL('image/png');
        var listItemIndex = moment_data.length;
        var listItem = "\n                    <div class=\"moment-create__list-item\" data-index=\"".concat(listItemIndex, "\">\n                        <div class=\"moment-create__list-number\">").concat(listItemIndex, "</div>\n                        <img src=\"").concat(imgBlob, "\" alt=\"\u041C\u043E\u043C\u0435\u043D\u0442 ").concat(listItemIndex, "\">\n                    </div>\n                ");
        $('.moment-create__list').append(listItem);
        $(".moment-create__list-item[data-index=\"".concat(listItemIndex, "\"]")).on('click', function () {
          var index = $(this).attr('data-index') - 1;
          moment_data.splice(index, 1);
          $(this).remove();
          updateListNumbers();
        });
      });
    });
  }
}
function updateListNumbers() {
  $('.moment-create__list-item').each(function (index) {
    $(this).attr('data-index', index + 1);
    $(this).find('.moment-create__list-number').text(index + 1);
  });
}

/***/ }),

/***/ "./resources/js/modules/newYearModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/newYearModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeNewYear": () => (/* binding */ initializeNewYear)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeNewYear() {
  var activeSlideIndex = 1;
  var totalSlidesCount = 6;
  function updateVisibleSlide(index) {
    $('.ny-slide').css('display', 'none');
    $('.ny-slide-' + index).css('display', 'flex');
  }
  $('.ny-slide-button--prev').click(function () {
    activeSlideIndex = activeSlideIndex > 1 ? activeSlideIndex - 1 : totalSlidesCount;
    updateVisibleSlide(activeSlideIndex);
  });
  $('.ny-slide-button--next').click(function () {
    activeSlideIndex = activeSlideIndex < totalSlidesCount ? activeSlideIndex + 1 : 1;
    updateVisibleSlide(activeSlideIndex);
  });
  $('body').on('click', '.new-year-pack__music', function () {
    var audio = $('#new-year-audio')[0];
    if (audio.paused) {
      audio.play();
    } else {
      audio.pause();
    }
  });
  if (window.location.pathname.startsWith('/newyear/pack')) {
    var Snow = function Snow() {
      function getRandom(min, max) {
        return ~~(Math.random() * (max - min + 1)) + min;
      }
      var viewportwidth = window.innerWidth;
      this["delete"] = function () {
        clearInterval(this.interval);
        var classes = document.querySelectorAll('.snow-element');
        for (var i = 0; i < classes.length; i++) {
          classes.item(i).remove();
        }
      };
      this.interval = setInterval(function () {
        var rand = getRandom(2, 32);
        var size = rand;
        var time = 3.0 / (rand * 0.1);
        var blur = Math.abs(rand - 8);
        blur = blur < 4 ? 0 : blur;
        var el = document.createElement("div");
        document.body.appendChild(el);
        el.style.zIndex = String(100 + size);
        el.className = "snow-element";
        el.style.width = size + "px";
        el.style.height = size + "px";
        el.style.left = Math.random() * (viewportwidth * 1.5) + "px";
        el.style.filter = "blur(" + blur + "px)";
        el.style.animationDuration = time + "s";
        setTimeout(function () {
          el.remove();
        }, time * 1000);
      }, 50);
    };
    var snow = new Snow();
  }
}

/***/ }),

/***/ "./resources/js/modules/notificationModule.js":
/*!****************************************************!*\
  !*** ./resources/js/modules/notificationModule.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeNotification": () => (/* binding */ initializeNotification)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeNotification() {
  /* notifications */
  $('body').on('click', '.notifications-subscription-btn', function () {
    var button = $(this);
    var type = button.attr('data-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/notification-subscription/toggle', {
      'type': type
    }, button, function (result) {
      if (result.status == "added") {
        button.find('i').attr('class', 'icon icon-notification-off');
        toastr.success(result.message);
      } else {
        button.find('i').attr('class', 'icon icon-notification');
        toastr.error(result.message);
      }
    });
  });
  $('.notifications__delete').on('click', function () {
    var notification_id = $(this).closest('.notifications__item').attr('data-id');
    var block = $(this).closest('.notifications__item');
    var $notificationSpan = $('.header-notifications span');
    var notification_count = $notificationSpan.length ? parseInt($notificationSpan.text()) : 0;
    $.post("/notifications/" + notification_id, {
      '_method': 'delete'
    }, function () {
      block.remove();
      if (block.hasClass('notifications__item--not-read')) {
        $('.header-notifications span').text(notification_count - 1);
        if ($('.notifications__item').length === 0) {
          clearNotify();
        }
      }
    });
  });
  $('.notifications__clear').on('click', function () {
    if (!confirm("Действительно очистить все уведомления?")) return false;
    var list = $('.notifications__item');
    $.post("/notifications/clear", {
      '_method': 'delete'
    }, function () {
      list.remove();
      clearNotify();
    });
  });
  $('.notifications__read-btn').on('click', function () {
    var item = $(this).closest('.notifications__item');
    var $notificationSpan = $('.header-notifications span');
    var notification_count = $notificationSpan.length ? parseInt($notificationSpan.text()) : 0;
    var button = $(this);
    var id = item.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/notifications/" + id + "/read", {}, button, function (result) {
      item.removeClass('notifications__item--not-read');
      button.remove();
      $('.header-notifications span').text(notification_count - 1);
      if (notification_count - 1 === 0) $('.header-notifications span').remove();
    });
    return false;
  });
  $('.notifications__read-all-btn').on('click', function () {
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/notifications/read-all', {}, button, function (result) {
      $('.header-notifications span').remove();
      $('.notifications__item').removeClass('notifications__item--not-read');
    });
  });
  $('.notifications__item a').on('click', function () {
    var item = $(this).closest('.notifications__item');
    var id = item.attr('data-id');
    var link = $(this);
    if (!item.hasClass('notifications__item--not-read')) {
      window.location.href = $(this).attr('href');
      return false;
    }
    $.post("/notifications/" + id + "/read", function () {
      window.location.href = link.attr('href');
    });
    return false;
  });
  function clearNotify() {
    $('.notifications').html('<div class="not-found">\n' + '<img src="/assets/cat.png" alt="Здесь пусто">\n' + '<div class="info-text">Список уведомлений пуст</div>\n' + '</div>');
    $('.notifications__clear').remove();
    $('.header-notifications span').remove();
  }
}

/***/ }),

/***/ "./resources/js/modules/otherModule.js":
/*!*********************************************!*\
  !*** ./resources/js/modules/otherModule.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeOther": () => (/* binding */ initializeOther)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");
/* harmony import */ var _socketManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socketManager.js */ "./resources/js/modules/socketManager.js");


function initializeOther() {
  /* sort select */
  $('select.sort-select').change(function () {
    var urlParams = new URLSearchParams(window.location.search);
    urlParams.set('sort', $(this).val());
    window.location.search = urlParams;
  });
  $('.close-adult-modal-btn').on('click', function () {
    if ($('.adult-modal__checkbox').is(':checked')) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('adult_skip', '1', 1);
    }
    $('.adult-modal').remove();
  });
  $('.chat-color-form__save-btn').on('click', function () {
    var button = $(this);
    var chat_color = $('.chat-color-form__input').val();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/chat/setColor', {
      chat_color: chat_color
    }, button, function (result) {
      toastr.success(result.message);
      setTimeout(function () {
        location.reload();
      }, 2000);
    });
    return false;
  });
  var card_audio = null;
  $('.card-show__audio-play').on('click', function () {
    var audioSrc = $(this).data('audio');
    var repeat = $(this).data('repeat');
    if (!card_audio) {
      card_audio = new Audio(audioSrc);
      if (repeat == 1) {
        card_audio.loop = true;
      }
    }
    if (card_audio.paused) {
      card_audio.play();
    } else {
      card_audio.pause();
    }
  });

  /* tags */
  $('.tags__item-more').on('click', function () {
    $(this).hide().closest('.tags').find('.tags__item').show();
  });
  $('body').on('submit', 'form.form-block-send', function (event) {
    event.preventDefault();
  });
  $('body').on('click', '.show-toggle', function () {
    var toggle_class = $(this).attr('data-toggle-class');
    $(toggle_class).toggle();
  });
  var observer_manga_cards = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      var img = $(entry.target).find('.manga-cards__image');
      var video = $(entry.target).find('video');
      if (img.length && img.data('src')) {
        if (entry.isIntersecting) {
          img.css('background-image', 'url(' + img.data('src') + ')');
        } else {
          img.css('background-image', 'url("/assets/card-placeholder.jpg")');
        }
      }
      if (video.length) {
        if (entry.isIntersecting) {
          // Если элемент видим, то запускаем видео
          video[0].play();
        } else {
          // Если элемент не видим, то останавливаем видео
          video[0].pause();
        }
      }
    });
  });
  $('.manga-cards__item').each(function () {
    observer_manga_cards.observe(this);
  });

  /* tabs */
  $('body').on('click', '.tabs__item[data-page]', function () {
    var page = $(this).attr('data-page');
    var ajax_link = $(this).attr('data-ajax');
    var this_tab = $(this);
    if (ajax_link && $(this).closest('.tabs').find('.tabs__page[data-page="' + page + '"]').length === 0) {
      $(this).closest('.tabs').append('<div class="tabs__page" data-page="' + page + '">Загрузка...</div>');
    }
    $(this).closest('.tabs').find('.tabs__item').removeClass('tabs__item--active');
    $(this).addClass('tabs__item--active');
    $(this).closest('.tabs').find('.tabs__page').hide().removeClass('tabs__page--active');
    $(this).closest('.tabs').find('.tabs__page[data-page="' + page + '"]').addClass('tabs__page--active').fadeToggle(300);
    if (ajax_link && !this_tab.hasClass('tabs__item--loaded')) {
      this_tab.addClass('tabs__item--loaded');
      $.post(ajax_link, {}, function (result) {
        this_tab.closest('.tabs').find('.tabs__page[data-page="' + page + '"]').html(result.content);
        $('.manga-cards__item').each(function () {
          observer_manga_cards.observe(this);
        });
      });
    }
  });

  /* favourites */
  $('body').on('click', '.favourite-send-btn', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    if (button.attr('stop')) return false;
    var type = button.attr('data-type');
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/favourite', {
      'type': type,
      'id': id
    }, button, function (result) {
      button.attr('stop', true);
      setTimeout(function () {
        button.removeAttr('stop');
      }, 1100);
      if (result.is_added) {
        _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.animationButton(button);
        setTimeout(function () {
          button.addClass('active');
        }, 100);
        if (type == "Card") updateLikesCard(id, "like");
      } else {
        button.removeClass('active');
        if (type == "Card") updateLikesCard(id, "dislike");
      }
      if (!button.find('span').text().includes('K')) {
        button.find('span').text(result.favourite_count);
        if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] && $('.reader-menu__item--like').length) {
          var room = window.location.pathname;
          _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].emit('new-fav', {
            'value': parseInt(result.favourite_count, 10),
            'room': room
          });
        }
      }
    });
    return false;
  });
  function updateLikesCard(id, type) {
    var likes = JSON.parse(localStorage.getItem('cards_likes')) || [];
    if (type === 'like' && !likes.includes(id)) {
      likes.push(id);
      if (likes.length > 1000) {
        likes = likes.slice(-1000);
      }
    } else if (type === 'dislike') {
      likes = likes.filter(function (likeId) {
        return likeId !== id;
      });
    }
    localStorage.setItem('cards_likes', JSON.stringify(likes));
  }
  if (typeof _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"] !== 'undefined' && _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    _socketManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].on("update-fav", function (data) {
      $('.reader-menu__item--like span').text(data.value);
    });
  }
  $('.products-fav-list .products__item').on('click', function () {
    var active_item = $(this);
    var item_id = active_item.attr('data-item-id');
    if (active_item.attr('data-product-type') == "frame") {
      window.location.href = "/products/frame?item=" + item_id;
    } else if (active_item.attr('data-product-type') == "avatar") {
      window.location.href = "/products/avatar?item=" + item_id;
    } else if (active_item.attr('data-product-type') == "cover") {
      window.location.href = "/products/cover?item=" + item_id;
    } else if (active_item.attr('data-product-type') == "stickerpack") {
      window.location.href = "/products/stickerpack?item=" + item_id;
    } else if (active_item.attr('data-product-type') == "profilestatus") {
      window.location.href = "/products/profilestatus?item=" + item_id;
    } else if (active_item.attr('data-product-type') == "profileskin") {
      window.location.href = "/products/profileskin?item=" + item_id;
    }
    return false;
  });
  /* My updates in main page */
  $('#my_updates').on('change', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var checked = $(this).is(':checked');
    $('.updates--all-list').toggle();
    $('.updates--my-list').toggle();
    if (checked && $('.updates--my-list').html().length === 0) _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.appendMangaUpdates(0);
  });
  $('.list__show-all').click(function () {
    $(this).siblings('.list').find('.list__item').css('display', 'flex');
  });

  /* Catalog */
  $('.mobile-show-filter').on('click', function () {
    $('.catalog__right').addClass('popup').find('form').addClass('popup__content');
    $('body').css('overflow', 'hidden');
    $(document).on("mouseup.hideCatalog", function (e) {
      var container = $(".popup__content");
      if (!container.is(e.target) && container.has(e.target).length === 0 && !e.target.classList.contains('ss-option')) {
        container.closest('.popup').removeClass('popup').find('form').removeClass('popup__content');
        $('body').css('overflow', '');
        $(document).off('.hideCatalog');
      }
    });
  });

  /* Settings */
  $('.settings__save-btn').on('click', function () {
    var form = $(this).closest('form');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings', form.serialize(), button, function (result) {
      toastr.success(result.message);
    });
    return false;
  });
  $('.settings__show-all-items').on('click', function () {
    $('.settings__avatar').removeClass('settings__item--hide');
    $(this).remove();
    return false;
  });
  /* Update avatar */
  $('.settings__avatar').on('click', function (e) {
    if ($(e.target).closest('.personalized__remove-btn').length > 0) {
      return;
    }
    var avatarId = $(this).attr('data-avatar-id');
    var avatar_image = $(this).find('img').attr('src');
    $.post("/settings/avatar", {
      'id': avatarId
    }, function (result) {
      $('.header-profile img').attr('src', avatar_image);
      toastr.success(result.message);
    });
  });
  /* Update frame */
  $('.settings__frame').on('click', function () {
    var frameId = $(this).attr('data-frame-id');
    $.post("/settings/frame", {
      'id': frameId
    }, function (result) {
      toastr.success(result.message);
    });
  });
  /* Update frame */
  $('.settings__cover').on('click', function (e) {
    if ($(e.target).closest('.personalized__remove-btn').length > 0) {
      return;
    }
    var coverId = $(this).attr('data-cover-id');
    $.post("/settings/cover", {
      'id': coverId
    }, function (result) {
      toastr.success(result.message);
    });
  });
  $('.settings__skin').on('click', function () {
    var skinId = $(this).attr('data-skin-id');
    $.post("/settings/skin", {
      'id': skinId
    }, function (result) {
      toastr.success(result.message);
    });
  });
  /* Update background */
  $('.settings__background').on('click', function () {
    var backgroundId = $(this).attr('data-background-id');
    $.post("/settings/background", {
      'id': backgroundId
    }, function (result) {
      toastr.success(result.message);
    });
  });
  /* Chapter like */
  $('body').on('click', '.chapters__like', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    return false;
  });
  /* Reverse manga */
  $('.reverse-button').on('click', function () {
    var list = $('.chapters__list');
    var listItems = list.children('.chapters__item');
    list.append(listItems.get().reverse());
  });
  /* Search Chapter */
  $('.chapter-search input').on('input', function () {
    var inputVal = $(this).val();
    if (!inputVal) {
      $('.chapters__item').show();
    } else {
      $('.chapters__item').hide();
      $('.chapters__item[data-chapter="' + inputVal + '"]').show();
    }
  });
  /* show chapter date */
  $('body').on('click', '.chapters__item-mark', function () {
    var chapterDate = $(this).closest('.chapters__item').attr('data-chapter-date');
    $(this).attr('class', 'chapters__add-date').text(chapterDate);
    return false;
  });
  /* Load more similar */
  $('.load-more-similar').on('click', function () {
    var button = $(this);
    var manga_id = $('.manga').attr('data-id');
    var skip = $('.list--similar .list__item').length;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/manga/similar', {
      'id': manga_id,
      'skip': skip
    }, button, function (result) {
      $('.list--similar').append(result.content);
      if (!result.content) {
        button.remove();
      }
    });
  });
  /* Telegram subcribe */
  $('.button-telegram--trigger').click(function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    if ($(this).hasClass("button-telegram--success")) {
      toastr.success("Уведомления о новых главах из списка ЧИТАЮ будут приходить в телеграм");
      return false;
    }
  });
  if (!_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('product_is_now')) {
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('product_is_now', 1, 365);
  }
  $('.reader-toggle-autocroll-btn').on('click', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('reader-auto-scroll')) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('reader-auto-scroll', 0, 365);
      $('body').removeClass('body--reader-auto');
      $(this).text('Включить автоскролл');
    } else {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('reader-auto-scroll', 1, 365);
      $('body').addClass('body--reader-auto');
      $(this).text('Отключить автоскролл');
    }
  });
  $('.change-server-img-btn').click(function () {
    if ($(this).hasClass('button--primary')) return false;
    var btn_server_number = $(this).attr('data-server');
    if (btn_server_number === "auto") {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('img-server-reader', "", -100);
      $('.change-server-img-btn').removeClass('button--primary');
      $(this).addClass('button--primary');
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('img-server-reader', btn_server_number, 360);
    $('.reader__item img').each(function () {
      var imgSrc = $(this).attr('src') ? $(this).attr('src') : $(this).attr('data-src');
      var newSrc;
      if (btn_server_number === '1') {
        newSrc = imgSrc.replace('c2.mangabuff.ru/img2/chapters', 'img.mangabuff.ru/chapters').replace('c2.mangabuff.ru/chapters', 'custom.mangabuff.ru/chapters').replace('c3.mangabuff.ru/chapters', 'custom.mangabuff.ru/chapters');
      } else if (btn_server_number === '2') {
        newSrc = imgSrc.replace('custom.mangabuff.ru/chapters', 'c2.mangabuff.ru/chapters').replace('c3.mangabuff.ru/chapters', 'c2.mangabuff.ru/chapters').replace('img.mangabuff.ru/chapters', 'c2.mangabuff.ru/img2/chapters');
      } else if (btn_server_number === '3') {
        newSrc = imgSrc.replace('custom.mangabuff.ru/chapters', 'c3.mangabuff.ru/chapters').replace('c2.mangabuff.ru/chapters', 'c3.mangabuff.ru/chapters').replace('img.mangabuff.ru/chapters', 'c2.mangabuff.ru/img2/chapters');
      }
      if ($(this).attr('src')) {
        $(this).attr('src', newSrc);
      } else {
        $(this).attr('data-src', newSrc);
      }
    });
    $('.change-server-img-btn').removeClass('button--primary');
    $(this).addClass('button--primary');
  });
  if (window.isAuth) {
    if (!_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('message_counts_user')) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setCookie('message_counts_user', 1, 365);
    }
  }

  /* slim select */
  jQuery.fn.slimSelect = function (f) {
    this.each(function (e) {
      var d = slimCustom.apply(this, [f]);
      d.settings.showSearch = this.children.length > 10;
      d.searchFilter = function (o, s) {
        var text = o.text.toLowerCase().replace(/[ёэ]/g, 'е').replace(/[^а-яa-z0-9]/g, '');
        var search = s.toLowerCase().replace(/[ёэ]/g, 'е').replace(/[^а-яa-z0-9]/g, '');
        return text.indexOf(search) !== -1;
      };
      new SlimSelect(d);
    });
    return this;
  };
  var si = null;
  jQuery.fn.slimSelectAjax = function (aj) {
    this.each(function (e) {
      var d = slimCustom.apply(this, []);
      d.searchingText = 'Поиск...';
      d.ajax = function (search, callback) {
        clearTimeout(si);
        if (search.length < 3) {
          callback('Введите не менее 3-х символов');
          return;
        }
        si = setTimeout(function () {
          aj(search, callback);
        }, 500);
      };
      new SlimSelect(d);
    });
    return this;
  };
  function slimCustom(f) {
    var t = $(this);
    var d = {
      select: this,
      settings: {
        searchPlaceholder: 'Искать',
        searchText: 'Ничего не найдено',
        placeholderText: t.data('placeholder'),
        showContent: 'down',
        showSearch: false
      }
    };
    return d;
  }
  jQuery.fn.slimDestroy = function () {
    this.each(function (e) {
      this.slim.destroy();
    });
    return this;
  };
  $("select.sl-select").slimSelect();
  $('.like-button').on('click', function (e) {
    $(this).addClass('liked');
  });

  /* Tippy */
  tippy('.dropdown__trigger', {
    allowHTML: true,
    hideOnClick: true,
    interactive: true,
    arrow: false,
    flipOnUpdate: true,
    trigger: 'click',
    placement: 'bottom-end',
    theme: 'dropdown',
    appendTo: 'parent',
    content: function content(reference) {
      return $(reference).siblings('.dropdown__content').show()[0];
    }
  });
  tippy.delegate('body', {
    target: '[data-tooltip]',
    content: function content(reference) {
      return $(reference).data('tooltip');
    }
  });
  $('body').on('click', '.dropdown__item', function (e) {
    $(this).closest('.dropdown').find('.dropdown__trigger')[0]._tippy.hide();
  });

  /* Modals */
  $(function () {
    $('body').on('click', '[data-modal-trigger]', function () {
      var attributes = {};
      $(this.attributes).each(function (_, _ref) {
        var name = _ref.name,
          specified = _ref.specified,
          value = _ref.value;
        if (specified && name.startsWith('data-modal-attr')) {
          attributes['data-' + name.replace('data-modal-attr-', '')] = value;
        }
      });
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal($(this).attr('data-modal-trigger'), attributes);
      return false;
    });
    $('body').on('click', '[data-close-modal]', function () {
      $(document).off('.hideModal');
      $(this).closest('.modal').toggleClass('modal--open');
      return false;
    });
  });

  /* Report */
  $('body').on('click', '.modal-report__send-btn', function () {
    var button = $(this);
    var data = $(this).closest('form').serializeArray();
    var typeField = data.find(function (item) {
      return item.name === 'type';
    });
    if (typeField && (typeField.value === 'Битое изображение' || typeField.value === 'Не грузит изображения')) {
      var cookie = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.getCookie('img-server-reader');
      if (cookie) typeField.value += ' server:' + cookie;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/report', $.param(data), button, function (result) {
      toastr.success(result.message);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
  $('body').on('click', '.daily-rewards-item', function () {
    var day = $(this).attr('data-day');
    var button = $(this);
    if (!button.find('.daily-rewards-item-exp--active').length) {
      return false;
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/balance/claim/' + day, {}, button, function (result) {
      toastr.success(result.message);
      button.find('.daily-rewards-item-exp').addClass('daily-rewards-item-exp--completed').removeClass('daily-rewards-item-exp--active');
      button.find('.daily-rewards-item-exp span').text('Получено');
    });
  });
  $('body').on('click', '.rek__title span', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    window.location.href = "/pro";
    return false;
  });
  $(".owl-carousel").each(function (index) {
    var is_loop = $(this).data('loop');
    if ($(this).hasClass('top-users')) {
      $(this).owlCarousel({
        loop: is_loop === undefined,
        autoWidth: false,
        dots: false,
        margin: 30,
        responsive: {
          0: {
            items: 1
          },
          500: {
            items: 2
          },
          800: {
            items: 3
          },
          1200: {
            items: 4
          }
        }
      });
    } else if ($(this).hasClass('collections')) {
      $(this).owlCarousel({
        loop: is_loop === undefined,
        autoWidth: false,
        dots: false,
        margin: 20,
        responsive: {
          0: {
            items: 1
          },
          520: {
            items: 2
          },
          900: {
            items: 3
          },
          1200: {
            items: 4
          }
        }
      });
    } else if ($(this).hasClass('manga-cards__collections')) {
      $(this).owlCarousel({
        loop: is_loop === undefined,
        autoWidth: false,
        dots: false,
        margin: 20,
        responsive: {
          0: {
            items: 1
          },
          520: {
            items: 2
          },
          900: {
            items: 3
          },
          1200: {
            items: 4
          }
        }
      });
    } else {
      $(this).owlCarousel({
        loop: is_loop === undefined,
        autoWidth: true,
        dots: false,
        items: 8
      });
    }
  });
  $('[data-copy]').on('click', function () {
    var text = $(this).attr('data-copy');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.copyToClipboard(text);
    return false;
  });
  $('.accordion__header').click(function () {
    $(this).next('.accordion__content').slideToggle();
    $('.accordion__content').not($(this).next()).slideUp();
  });
  if ($('.read-btn').length) {
    var dataSlug = $('.read-btn').attr('data-slug');
    var history = JSON.parse(localStorage.getItem('history')) || [];
    var existingVisit = history.find(function (visit) {
      return visit.slug === dataSlug;
    });
    if (existingVisit) {
      $('.read-btn').text("Продолжить с " + existingVisit.chapter + " главы");
      $('.read-btn').attr('href', dataSlug + "/" + existingVisit.volume + "/" + existingVisit.chapter);
    }
  }
  $('.form__upload-input').change(function () {
    var fileName = $(this).closest('.form__upload').find('.form__upload-name');
    fileName.text(this.files.length ? this.files[0].name : 'Файл не выбран');
  });
  function handleInputSuggestion() {
    var query = $(this).val();
    var type = $(this).attr('data-type');
    var trigger_class = $(this).attr('data-trigger-class');
    $.ajax({
      url: '/search/suggestions' + type + '?q=' + encodeURIComponent(query),
      method: 'GET',
      success: function success(response) {
        $('.suggestion-block__select-result').empty();
        response.forEach(function (item) {
          var item_div = '';
          if (type === "User") item_div = "<div class='suggestion-block__item " + trigger_class + " " + trigger_class + "--" + type + "' data-id='" + item.id + "'><img src='/img/avatars/x35/" + item.avatar + "' alt='Аватарка'>" + item.name + "</div>";else if (type === "Card") item_div = "<div class='suggestion-block__item " + trigger_class + " " + trigger_class + "--" + type + "' data-id='" + item.id + "'><img src='/img/cards/" + item.image + "' alt='Аватарка'>" + item.name + "</div>";
          $('.suggestion-block__select-result').append(item_div);
        });
        if (response.length === 0) {
          $('.suggestion-block__select-result').append("<span class=\"search-result__empty\">Ничего не найдено</span>");
        }
      }
    });
  }
  var debouncedInputSuggestion = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce(handleInputSuggestion);
  $('body').on('input', '.suggestion-block__select-input', debouncedInputSuggestion);
  $('.suggestion-block__tabs-item').click(function () {
    var type = $(this).attr('data-type');
    $(this).closest('.suggestion-block').find('input').attr('data-type', type);
    $('.suggestion-block__tabs-item').removeClass('tabs__item--active');
    $(this).addClass('tabs__item--active');
  });
  if (window.user && window.user.is_first_enter) {
    toastr.info('Вы получили ' + window.user.is_first_enter + ' алмазов за первое посещение сайта сегодня');
  }
  if (!localStorage.getItem('hideTelegram21')) {
    $('body').append('<div id="tg-banner" style="position:fixed;z-index: 99999; border-radius:10px; bottom:20px;left:50%;transform:translateX(-50%);padding:10px;background:#373636;color:#fff;width: 255px;font-size: 12px;display: flex;justify-content: space-between;align-items: center;text-transform: uppercase;letter-spacing: 1px;"><a href="https://t.me/mangabuff" target="_blank" style="color:#fff;text-decoration:none;">Розыгрыши алмазов в нашем ТГ-канале</a> <span id="close-tg" style="cursor:pointer;font-size:12px;">&#10006;</span></div>');
    $('#close-tg').on('click', function () {
      localStorage.setItem('hideTelegram21', 'true');
      $('#tg-banner').remove();
    });
  }
  if (!window.isAuth && localStorage.getItem('hideTelegram')) {
    if (!localStorage.getItem('regBannerShown')) {
      setTimeout(function () {
        $('body').append('<div id="reg-banner" class="reg-banner"><i class="icon icon-close" id="close-banner"></i>Будь среди избранных! Только зарегистрированные пользователи получают эксклюзивные бонусы! <a href="/reg">Жми сюда!</a></div>');
        $("#reg-banner").hide().slideDown(300);
        localStorage.setItem('regBannerShown', '1');
      }, 10000);
    }
    $(document).on('click', '#close-banner', function () {
      $('#reg-banner').slideUp(300, function () {
        $(this).remove();
      });
    });
  }

  //init
  _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.setMangaStatus();
  addBackToTop({
    diameter: 56,
    backgroundColor: '#1b1b1b',
    textColor: '#fff'
  });
}

/***/ }),

/***/ "./resources/js/modules/payModule.js":
/*!*******************************************!*\
  !*** ./resources/js/modules/payModule.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializePay": () => (/* binding */ initializePay)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializePay() {
  var $root = jQuery('.pay__wrap');
  if ($root.length === 0) return; // не на этой странице

  var $form = $root.find('.pay__form');
  if ($form.length === 0) return;

  // summary (если нет — создаём перед кнопкой отправки)
  var $summary = $form.find('.pay__summary');
  if ($summary.length === 0) {
    $summary = jQuery('<div class="pay__summary" aria-live="polite"></div>').insertBefore($form.find('.pay__submit-wrap').first());
  }
  function fmt(n) {
    // 12 000
    return String(n).replace(/\B(?=(\d{3})+(?!\d))/g, "\xA0");
  }
  function updateSummary() {
    var $radio = $form.find('.pay__radio:checked');

    // дефолт — 300 ₽, иначе первый доступный
    if ($radio.length === 0) {
      var $def = $form.find('#pay-300');
      if ($def.length) {
        $def.prop('checked', true);
        $radio = $def;
      } else {
        $radio = $form.find('.pay__radio').first().prop('checked', true);
      }
    }

    // label — сосед сразу после input
    var $label = $radio.next('.pay__label');
    if ($label.length === 0) {
      $summary.html('');
      return;
    }
    var diamondsText = jQuery.trim($label.find('.pay__amount').text()); // "6 000 алмазов"
    var priceText = jQuery.trim($label.find('.pay__price span').first().text()); // "800"

    var diamonds = parseInt(diamondsText.replace(/\D/g, ''), 10) || 0;
    var rub = parseInt(priceText.replace(/\D/g, ''), 10) || 0;
    var hasX2 = $label.find('.pay__badge--x2').length > 0;

    // строка 1
    var html = fmt(diamonds) + ' алмазов · ' + fmt(rub) + ' руб';

    // строка 2 (только если x2 доступен)
    if (hasX2 && diamonds) {
      html += '<small>При первом пополнении номинала вы получите <b>' + fmt(diamonds * 2) + '</b> алмазов.</small>';
    }
    $summary.html(html);
  }

  // обработчики только на этой странице
  $form.off('.pay');
  $form.on('change.pay', '.pay__radio', updateSummary);
  $form.on('click.pay', '.pay__label', function () {
    var forId = this.getAttribute('for');
    if (!forId) return;
    var $r = jQuery('#' + forId);
    if ($r.length) {
      $r.prop('checked', true).trigger('change');
    }
  });

  // первичная отрисовка
  updateSummary();
}

/***/ }),

/***/ "./resources/js/modules/personalizationModule.js":
/*!*******************************************************!*\
  !*** ./resources/js/modules/personalizationModule.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializePersonalization": () => (/* binding */ initializePersonalization)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializePersonalization() {
  $(document).on('click', '.personalized__remove-btn', function (e) {
    var button = $(this);
    var id = button.attr('data-id');
    button.hide();
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/removePers', {
      id: id
    }, button, function (result) {
      toastr.success(result.message);
      button.closest('div').remove();
    });
    return false;
  });
  function setCssVariableWithImportant(e, v, val) {
    e[0].style.setProperty(v, v.includes('-deg') ? val + 'deg' : val, 'important');
  }
  function updateColorDisplay(inputElement) {
    var colorValue = $(inputElement).val();
    $(inputElement).siblings('.profile-customization-form__color-picker-display').css('background-color', colorValue);
  }
  $('.edit-decor .tabs__item[data-page="customization"]').on('click', function () {
    if (!$('body').hasClass('profile-skin--44')) {
      toastr.error('Необходимо сначала активировать персональный скин');
      return false;
    }
    $('.edit-decor__footer').hide();
  });
  $('.edit-decor .tabs__item:not([data-page="customization"])').on('click', function () {
    $('.edit-decor__footer').show();
  });
  $('.profile-customization-form__checkbox').on('change', function () {
    var className = $(this).val();
    if ($(this).is(':checked')) {
      $('body').addClass(className);
    } else {
      $('body').removeClass(className);
    }
  });
  $('.profile-customization-form__select-item').on('change', function () {
    var fontLinks = {
      'profile-skin--font-tektur': 'https://fonts.googleapis.com/css2?family=Tektur:wght@400..900&display=swap',
      'profile-skin--font-ponomar': 'https://fonts.googleapis.com/css2?family=Ponomar&display=swap',
      'profile-skin--font-pacifico': 'https://fonts.googleapis.com/css2?family=Pacifico&display=swap',
      'profile-skin--font-caveat': 'https://fonts.googleapis.com/css2?family=Caveat:wght@400..700&display=swap',
      'profile-skin--font-amatic-sc': 'https://fonts.googleapis.com/css2?family=Amatic+SC:wght@400;700&display=swap'
    };
    var selectedClass = $(this).val();
    $(this).find('option').each(function () {
      $('body').removeClass($(this).val());
    });
    $('link[data-font]').remove();
    if (selectedClass && selectedClass.includes('video')) {
      $('.profile-skin-video').remove();
    }
    if (selectedClass) {
      $('body').addClass(selectedClass);
      if (fontLinks[selectedClass]) {
        $('head').append("<link rel=\"stylesheet\" href=\"".concat(fontLinks[selectedClass], "\" data-font>"));
      }
      var videoMatch = selectedClass.match(/^profile-skin--video-(\d+)$/);
      if (videoMatch) {
        var videoNumber = videoMatch[1];
        $('body').append("\n                <div class=\"profile-skin-video\">\n                    <video width=\"320\" height=\"240\" webkit-playsinline=\"true\" playsinline=\"true\"\n                           autoplay=\"true\" muted=\"muted\" loop=\"true\" pip=\"false\"\n                           poster=\"/img/profile-skin-video/".concat(videoNumber, "/1.jpg\">\n                        <source src=\"/img/profile-skin-video/").concat(videoNumber, "/1.mp4\" type=\"video/mp4\">\n                        Your browser does not support the video tag.\n                    </video>\n                </div>\n            "));
      }
    }
  });
  $('.profile-customization-form__color-picker-input').each(function () {
    updateColorDisplay(this);
  });
  $('.profile-skin [data-variable]').on('input', function () {
    var variableName = '--' + $(this).data('variable');
    var value = $(this).val();
    updateColorDisplay(this);
    setCssVariableWithImportant($('.profile-skin'), variableName, value);
  });

  // Обработка сохранения настроек
  $('.profile-customization-form__save-button').on('click', function () {
    var button = $(this);
    var selectedClasses = [];
    $('.profile-customization-form__checkbox:checked').each(function () {
      selectedClasses.push($(this).val());
    });
    $('.profile-customization-form__select-item').each(function () {
      var value = $(this).val();
      if (value) {
        selectedClasses.push(value);
      }
    });
    var colorVariables = {};
    $('[data-variable]').each(function () {
      var variableName = $(this).data('variable');
      colorVariables[variableName] = $(this).val();
    });
    var requestData = {
      body_classes: selectedClasses.join(' '),
      color_variables: colorVariables
    };
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/skinCustom', requestData, button, function (data) {
      toastr.success(data.message);
    });
  });
  if (window.location.pathname.startsWith('/products/personalization')) {
    var cropper_cover;
    $('.personalized__input-file-cover').on('change', function (e) {
      var minWidth = 1280;
      var minHeight = 500;
      var file = e.target.files[0];
      if (file) {
        var reader = new FileReader();
        reader.onload = function (event) {
          var imgElement = $('.personalized__cover-image');
          imgElement.attr('src', event.target.result).hide();
          imgElement.on('load', function () {
            var img = this;

            // Проверка на вертикальные изображения
            var isVertical = img.naturalWidth < img.naturalHeight;
            if (img.naturalWidth < minWidth && img.naturalHeight < minHeight) {
              toastr.error('Ошибка: изображение должно быть не менее 1366x650 пикселей.');
              imgElement.hide();
              if (cropper_cover) {
                cropper_cover.destroy();
                cropper_cover = null;
              }
            } else {
              imgElement.show();
              if (cropper_cover) {
                cropper_cover.destroy();
              }
              cropper_cover = new Cropper(img, {
                viewMode: 3,
                dragMode: 'move',
                autoCropArea: 1,
                aspectRatio: minWidth / minHeight,
                restore: false,
                modal: false,
                guides: false,
                highlight: false,
                cropBoxMovable: false,
                cropBoxResizable: false,
                toggleDragModeOnDblclick: false,
                wheelZoomRatio: 0.2,
                ready: function ready() {
                  //const scaleRatio = Math.min(window.innerWidth / img.naturalWidth, 1);
                  //cropper_cover.setCropBoxData({
                  //    width: minWidth * scaleRatio,
                  //    height: minHeight * scaleRatio
                  //});
                }
              });
            }
          });
        };
        reader.readAsDataURL(file);
      }
    });
    var image = $('.personalized__avatar-image')[0];
    var cropper = new Cropper(image, {
      viewMode: 3,
      dragMode: 'move',
      autoCropArea: 1,
      aspectRatio: 1,
      restore: false,
      modal: false,
      guides: false,
      highlight: false,
      cropBoxMovable: false,
      cropBoxResizable: false,
      toggleDragModeOnDblclick: false,
      wheelZoomRatio: 0.2
    });
    $('.personalized__load-btn').on('click', function () {
      $(".personalized__input-file-avatar").click();
    });
    $('.personalized__input-file-avatar').on('input', function (e) {
      var files = e.target.files;
      if (files && files.length > 0) {
        var file = files[0];
        var reader = new FileReader();
        reader.onload = function (e) {
          cropper.replace(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    });
    $('.personalized__save-video-cover-btn').on('click', function (e) {
      e.preventDefault(); // Предотвращаем стандартное действие кнопки

      // Получаем элемент input по классу
      var fileInput = $('.personalized__input-file-video-cover')[0];

      // Проверяем, что файл выбран
      if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
        toastr.error("Пожалуйста, выберите MP4 файл для загрузки.");
        return;
      }
      var file = fileInput.files[0];

      // Проверяем, что выбранный файл является MP4
      if (file.type !== 'video/mp4') {
        toastr.error("Допускается загрузка только файлов в формате MP4.");
        return;
      }

      // Если файл выбран и это MP4
      $(this).hide();
      toastr.success("Внимание! Не обновляйте страницу, ожидайте сообщения об успешной отправке");
      var formData = new FormData();
      formData.append('video', file);
      $('.personalized__input-file-video-cover').val('');
      $.ajax({
        url: '/products/personalization/uploadVideoCover',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function success(response) {
          toastr.success(response.message);
        }
      });
    });
    $('.personalized__save-cover-btn').on('click', function (e) {
      if (!cropper_cover) {
        toastr.error("Пожалуйста, выберите изображение для загрузки.");
        return;
      }
      var cropData = cropper_cover.getData(true);
      var fileInput = $('.personalized__input-file-cover')[0];
      if (fileInput && fileInput.files && fileInput.files.length > 0) {
        $(this).hide();
        toastr.success("Внимание! Не обновляйте страницу, ожидайте сообщения об успешной отправке");
        var file = fileInput.files[0];
        var formData = new FormData();
        formData.append('image', file);
        formData.append('crop_x', cropData.x);
        formData.append('crop_y', cropData.y);
        formData.append('crop_width', cropData.width);
        formData.append('crop_height', cropData.height);
        cropper_cover.reset();
        fileInput.value = '';
        $.ajax({
          url: '/products/personalization/uploadCover',
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function success(response) {
            toastr.success(response.message);
          }
        });
      } else {
        toastr.error("Пожалуйста, выберите изображение для загрузки.");
      }
    });
    $('.personalized__save-btn').on('click', function (e) {
      if (!cropper) {
        toastr.error("Пожалуйста, выберите изображение для загрузки.");
        return;
      }
      var cropData = cropper.getData(true);
      var fileInput = $('.personalized__input-file-avatar')[0];
      if (fileInput && fileInput.files && fileInput.files.length > 0) {
        $(this).hide();
        toastr.success("Внимание! Не обновляйте страницу, ожидайте сообщения об успешной отправке");
        var file = fileInput.files[0];
        var formData = new FormData();
        formData.append('image', file);
        formData.append('crop_x', cropData.x);
        formData.append('crop_y', cropData.y);
        formData.append('crop_width', cropData.width);
        formData.append('crop_height', cropData.height);
        cropper.reset();
        fileInput.value = '';
        $.ajax({
          url: '/products/personalization/upload',
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function success(response) {
            toastr.success(response.message);
          }
        });
      } else {
        toastr.error("Пожалуйста, выберите изображение для загрузки.");
      }
    });
  }
}

/***/ }),

/***/ "./resources/js/modules/proModule.js":
/*!*******************************************!*\
  !*** ./resources/js/modules/proModule.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializePro": () => (/* binding */ initializePro)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializePro() {
  $('.pro-form__variant').on('click', function () {
    $(this).closest('.pro-form__header').find('.pro-form__variant').removeClass('pro-form__variant--active');
    $(this).addClass('pro-form__variant--active');
    if ($(this).attr('data-value') == "gift") {
      $('.pro-form__select-user').show();
    } else {
      $('.pro-form__select-user').hide();
    }
  });
  $('.promo-code-use-btn').on('click', function () {
    var button = $(this);
    if (button.data('clicked')) return false;
    var code = $('.promo-code-use-input').val();
    if (!code) return false;
    button.data('clicked', true);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/promo-code', {
      code: code
    }, button, function (result) {
      $('.promo-code-use-input').val('');
      toastr.success(result.message);
      var count = 0;
      var interval = setInterval(function () {
        if (count++ >= 20) return clearInterval(interval);
        var diamond = $('<div class="diamond-rating"></div>').css({
          left: "".concat(10 + Math.random() * 80, "vw")
        }).appendTo('body');
        setTimeout(function () {
          return diamond.remove();
        }, 5000);
      }, 100);
    });
    setTimeout(function () {
      button.removeData('clicked');
    }, 6000);
  });
  $('.pro-form__pay-btn').on('click', function () {
    var type = $('.pro-form__header--pay .pro-form__variant--active').attr('data-value');
    var user_id = null;
    var button = $(this);
    if (type == "gift" && $('.pro-form__gift-to').attr('data-id') == undefined) {
      toastr.error('Выберите пользователя кому отправить подарок');
      return false;
    }
    if (type == "gift") {
      user_id = parseInt($('.pro-form__gift-to').attr('data-id'));
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/pro', {
      type: type,
      user_id: user_id
    }, button, function (result) {
      window.location.href = result.link;
    });
  });
  $('.pro-form__buy-balance-btn').on('click', function () {
    var price = $('.pro-form__balance .pro-form__variant--active').attr('data-value');
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/pro/buy', {
      price: price
    }, button, function (result) {
      toastr.success(result.message);
    });
  });
  $('body').on('click', '.pro-form__select-user-item', function () {
    $('.pro-form__gift-to').text($(this).text());
    $('.pro-form__gift-to').attr('data-id', $(this).attr('data-id'));
    $('.pro-form__select-user').hide();
    toastr.success('Пользователь выбран');
  });
  function handleInput() {
    var query = $(this).val();
    $.ajax({
      url: '/search/suggestionsUser?q=' + encodeURIComponent(query),
      method: 'GET',
      success: function success(response) {
        $('.pro-form__select-user-result').empty();
        response.forEach(function (item) {
          var item_div = "<div class='pro-form__select-user-item' data-id='" + item.id + "'><img src='/img/avatars/x35/" + item.avatar + "' alt='Аватарка'>" + item.name + "</div>";
          $('.pro-form__select-user-result').append(item_div);
        });
        if (response.length === 0) {
          $('.pro-form__select-user-result').append("<span class=\"search-result__empty\">Ничего не найдено</span>");
        }
      }
    });
  }
  var debouncedInput = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce(handleInput);
  $('body').on('input', '.pro-form__select-user-input', debouncedInput);
}

/***/ }),

/***/ "./resources/js/modules/productModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/productModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeProduct": () => (/* binding */ initializeProduct)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeProduct() {
  var $form = jQuery('.pay__form');
  var $summary = $form.find('.pay__summary');
  if ($summary.length === 0) {
    $summary = jQuery('<div class="pay__summary" aria-live="polite"></div>').insertBefore($form.find('.pay__submit-wrap').first());
  }
  function updateSummary() {
    var $label = $form.find('.pay__radio:checked').closest('.pay__label');
    if ($label.length === 0) {
      $summary.text('');
      return;
    }
    var diamonds = jQuery.trim($label.find('.pay__amount').text());
    var rub = jQuery.trim($label.find('.pay__price span').first().text());
    var hasX2 = $label.find('.pay__badge--x2').length > 0;
    var discount = jQuery.trim($label.find('.pay__badge--discount').text());
    var base = [];
    if (diamonds) base.push(diamonds);
    if (rub) base.push(rub + ' руб');
    var tail = '';
    if (hasX2) {
      tail += (tail ? ' — ' : ' — ') + 'первый раз x2 алмазов';
    }
    if (discount) {
      tail += (tail ? ' — ' : ' — ') + discount;
    }
    $summary.text(base.join(' · ') + tail);
  }
  $form.on('change', '.pay__radio', updateSummary);
  updateSummary();
  $('.products__item').on('click', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    //if ($(this).hasClass('products__item--purchased')) return false;
    var product_id = $(this).attr('data-product-id');
    var product_price = $(this).attr('data-product-price');
    var product_type = $(this).attr('data-product-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal('modal-product-buy', {
      'data-product-id': product_id,
      'data-product-price': product_price
    });
    $.get('/products/show/' + product_id, function (result) {
      var modal_block = $('#modal-product-buy');
      modal_block.find('.modal-product').html(result.content);
    });
  });
  $('.personalized__send-btn').on('click', function () {
    var description = $('.personalized textarea').val();
    if (!description) return false;
    var button = $(this);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/products/personalization', {
      description: description
    }, button, function (result) {
      $('.personalized textarea').val('');
      toastr.success(result.message);
    });
  });
  $('.product-show-avatar').on('click', function () {
    $('.products').toggleClass('products--show-avatar');
  });
  $('body').on('click', '.modal-product__buy-btn', function () {
    var button = $(this);
    var product_id = $(this).closest('.modal').attr('data-product-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/products/buy', {
      product_id: product_id
    }, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
      toastr.success(result.message);
      $('[data-product-id="' + product_id + '"]').addClass('products__item--purchased');
    });
    return false;
  });
  var allowedPaths = ['/products/avatar', '/products/frame', '/products/cover', '/products/stickerpack', '/products/profilestatus', '/products/profileskin'];
  if (allowedPaths.includes(window.location.pathname)) {
    var itemId = new URLSearchParams(window.location.search).get('item');
    var $targetItem = $(".products__item[data-item-id=\"".concat(parseInt(itemId, 10), "\"]:not(.products__item--purchased)"));
    if (itemId && $targetItem.length) $targetItem.click();
  }
}
function getProdctData(result) {
  var data = {
    name: window.user.name,
    avatar: window.user.avatar
  };
  data['price'] = result.price - result.discount;
  for (var key in result.productable) {
    if (result.productable.hasOwnProperty(key)) {
      data[key] = result.productable[key];
    }
  }
  return data;
}
function replaceData(data, content) {
  for (var key in data) {
    if (data.hasOwnProperty(key)) {
      var placeholder = '%' + key + '%';
      var regex = new RegExp(placeholder, 'g');
      content = content.replace(regex, data[key]);
    }
  }
  return content;
}

/***/ }),

/***/ "./resources/js/modules/quizModule.js":
/*!********************************************!*\
  !*** ./resources/js/modules/quizModule.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeQuiz": () => (/* binding */ initializeQuiz)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeQuiz() {
  $(document).on('click', '#quiz-suggest-submit', function () {
    var button = $(this);
    var formData = new FormData();
    formData.append('question', $('input[name="question"]').val().trim());
    formData.append('answer_1', $('input[name="answer_1"]').val().trim());
    formData.append('answer_2', $('input[name="answer_2"]').val().trim());
    formData.append('answer_3', $('input[name="answer_3"]').val().trim());
    formData.append('answer_4', $('input[name="answer_4"]').val().trim());
    formData.append('correct_answer', $('select[name="correct_answer"]').val());
    var imageInput = $('input[name="image"]')[0];
    if (imageInput && imageInput.files.length > 0) {
      var file = imageInput.files[0];
      var validTypes = ['image/jpeg', 'image/png'];
      if (!validTypes.includes(file.type)) {
        toastr.error('Разрешены только JPG и PNG изображения.');
        return;
      }
      if (file.size > 1 * 1024 * 1024) {
        // 2MB
        toastr.error('Размер изображения не должен превышать 1MB.');
        return;
      }
      formData.append('image', file);
    }

    // отправка через $.ajax напрямую, т.к. post() не поддерживает FormData
    button.attr('disabled', true).addClass('button--loading');
    $.ajax({
      url: '/quiz/suggest',
      method: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function success(result) {
        toastr.success(result.message);
        $('.quiz-create input, .quiz-create select').val('');
      },
      error: function error(xhr) {
        var _xhr$responseJSON;
        var msg = ((_xhr$responseJSON = xhr.responseJSON) === null || _xhr$responseJSON === void 0 ? void 0 : _xhr$responseJSON.message) || 'Произошла ошибка';
        toastr.error(msg);
      },
      complete: function complete() {
        button.attr('disabled', false).removeClass('button--loading');
      }
    });
  });
  if ($('.quiz').length) {
    var mbStartTimer = function mbStartTimer() {
      if (mbQuizTimer) clearInterval(mbQuizTimer);
      mbQuizTimeLeft = mbQuizTimeTotal;
      $('.quiz__bar-time-fill').css('width', '0%');
      mbQuizTimer = setInterval(function () {
        mbQuizTimeLeft--;
        var progress = (mbQuizTimeTotal - mbQuizTimeLeft) / mbQuizTimeTotal * 100;
        $('.quiz__bar-time-fill').css('width', progress + '%');
        if (mbQuizTimeLeft <= 0) {
          clearInterval(mbQuizTimer);
          toastr.error('Время вышло! Начните сначала.');
          mbQuizLoad();
        }
      }, 1000);
    };
    var mbQuizLoad = function mbQuizLoad() {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/quiz/start', {}, null, function (res) {
        mbQuizIndex = 0;
        if (res.question) {
          mbQuizRender(res.question);
        } else {
          $('.quiz__question').text(res.message || 'Ошибка при запуске викторины.');
          $('.quiz__answers').empty();
        }
      });
    };
    var mbQuizRender = function mbQuizRender(q) {
      $('.quiz__title-number').text(mbQuizIndex + 1);
      $('.quiz__title-total').text(mbQuizIndex + 1 <= 10 ? '10' : '∞');
      $('.quiz__question').text(q.question);
      if (mbQuizIndex < 10) {
        $('.quiz__bar--fill').css('width', mbQuizIndex / 10 * 100 + '%');
        $('.quiz__bar--fill').removeClass('quiz__bar--infinite');
      } else {
        $('.quiz__bar--fill').css('width', '100%').addClass('quiz__bar--infinite');
      }
      var answersHtml = q.answers.map(function (text) {
        return "<div class=\"quiz__answer-item button\">".concat(text, "</div>");
      }).join('');
      $('.quiz__answers').html(answersHtml);
      if (q.image) {
        $('.quiz__image').html("<img src=\"".concat(q.image, "\" alt=\"\u0412\u043E\u043F\u0440\u043E\u0441\" class=\"quiz__image-img\">"));
      } else {
        $('.quiz__image').empty();
      }
      mbStartTimer();
    };
    var mbQuizData = [];
    var mbQuizIndex = 0;
    var mbQuizTimer = null;
    var mbQuizTimeTotal = 60;
    var mbQuizTimeLeft = 60;
    $(document).on('click', '.quiz__answer-item', function () {
      var mbButton = $(this);
      var mbAnswerText = mbButton.text().trim();
      clearInterval(mbQuizTimer);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/quiz/answer', {
        answer: mbAnswerText
      }, mbButton, function (result) {
        if (result.status === 'restart') {
          toastr.error(result.message);
          mbQuizLoad(); // сбрасываем
          return;
        }
        if (result.status === 'end') {
          toastr.success(result.message);
          $('.quiz__question').text('🎉 Вы прошли все доступные вопросы!');
          $('.quiz__answers').empty();
          return;
        }
        if (result.status === 'milestone') {
          toastr.success(result.message);
        } else if (result.status === 'success') {
          toastr.success(result.message);
        }
        mbQuizIndex++;
        mbQuizRender(result.question);
      });
    });
    mbQuizLoad();
  }
}

/***/ }),

/***/ "./resources/js/modules/ratingModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/ratingModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeRating": () => (/* binding */ initializeRating)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeRating() {
  $('.manga-rating__star').on('click', function () {
    var score = $(this).attr('data-score');
    $('.manga-rating__preview').addClass('manga-rating__preview--active');
    $('.manga-rating__preview').attr('data-score', score);
    $('.manga-rating__preview span').text(score);
    $('.manga-rating__star').removeClass('manga-rating__star--active');
    $(this).addClass('manga-rating__star--active').prevAll().addClass('manga-rating__star--active');
  });
  $('.manga-rating__rate-btn').on('click', function () {
    var manga_id = $('.manga-rating').attr('data-manga-id');
    var score = $('.manga-rating__preview').attr('data-score');
    if (parseInt(score) === 0) return false;
    var button = $(this);
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/bookmarks/rate', {
      manga_id: manga_id,
      score: score
    }, button, function (result) {
      toastr.success(result.message);
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/reviewModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/reviewModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeReview": () => (/* binding */ initializeReview)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeReview() {
  $('body').on('click', '.review-type__item', function () {
    var button = $(this);
    var cls = $(this).attr('class').split(/\s+/);
    var status = null;
    if (cls.includes('review-type__item--positive')) status = 1;else if (cls.includes('review-type__item--negative')) status = -1;else if (cls.includes('review-type__item--neutral')) status = 0;
    var manga_id = $('.manga').attr('data-id');
    $('.review-type__item').removeClass('review-type__item--active');
    button.addClass('review-type__item--active');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/reviews/load', {
      manga_id: manga_id,
      status: status
    }, button, function (result) {
      $('.reviews-list').html(result.content);
    });
  });
  $('.review-create__type').on('click', function () {
    $('.review-create__type').removeClass('review-create__type--active');
    $(this).addClass('review-create__type--active');
  });
  $('.review-create__star').on('click', function () {
    $('.review-create__star').removeClass('review-create__star--active');
    $(this).addClass('review-create__star--active').prevAll().addClass('review-create__star--active');
  });
  $('.review-create__create-btn').on('click', function () {
    var manga_id = $('.review-create').attr('data-manga-id');
    var title = $('.form__field[name="review_title"]').val();
    var text = $('.form__field[name="review_text"]').val();
    var score = $('.review-create__star--active').length;
    var button = $(this);
    if (score == 0) {
      return false;
    }
    var status = $('.review-create__type--active').attr('data-review-type');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/reviews', {
      manga_id: manga_id,
      title: title,
      text: text,
      score: score,
      status: status
    }, button, function (result) {
      window.location.href = "/reviews/" + result.id;
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/searchModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/searchModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeSearch": () => (/* binding */ initializeSearch)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeSearch() {
  $('body').on('click', '.modal--search .search-result__item', function (e) {
    e.preventDefault();
    var link = $(this).attr('href');
    var name = $('.modal--search .search-bar__input').val();
    addToHistory(name, link);
    window.location.href = link;
  });
  $('.search-bar__tab').on('click', function () {
    $('.search-bar__tab--active').removeClass('search-bar__tab--active');
    $(this).addClass('search-bar__tab--active');
    $('.search-bar__type-input').val($(this).attr('data-type'));
    handleInput();
  });
  $('body').on('click', '.search-bar__hot', function (e) {
    e.preventDefault();
    window.location.href = $(this).attr('data-link');
  });
  function handleInput() {
    var query = $('.search-bar__input').val();
    if (query.length > 0) {
      $('.search-result').show();
      $('.search-result__title').hide();
      $('.search-bar__content').hide();
      $('.search-bar__switch').hide();
    } else {
      $('.search-result').hide();
      $('.search-bar__content').show();
      $('.search-bar__switch').show();
    }
    var type_search = $('.search-bar__tab--active').attr('data-type');
    var urlMap = {
      manga: '/search/suggestions?q=',
      user: '/search/suggestionsUser?q=',
      club: '/search/suggestionsClub?q=',
      deck: '/search/suggestionsDeck?q=',
      collection: '/search/suggestionsCollection?q=',
      card: '/search/suggestionsCard?q='
    };
    var url = urlMap[type_search] || '/search/suggestions?q=';
    $.ajax({
      url: url + encodeURIComponent(query),
      method: 'GET',
      success: function success(response) {
        if (response.length) {
          $('.search-result__title').show();
        }
        $('.search-result__list').empty();
        if (type_search === 'manga') {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/manga/" + item.slug,
              "class": "search-result__item"
            });
            var $imageDiv = $('<div>', {
              "class": "search-result__image"
            }).append($('<img>', {
              src: '/x70' + item.image,
              alt: "Постер"
            }));
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($imageDiv, $nameDiv);
            $('.search-result__list').append($anchor);
          });
        } else if (type_search === "user") {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/users/" + item.id,
              "class": "search-result__item"
            });
            var $imageDiv = $('<div>', {
              "class": "search-result__image"
            }).append($('<img>', {
              src: '/img/avatars/x35/' + item.avatar,
              alt: "Аватар"
            }));
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($imageDiv, $nameDiv);
            $('.search-result__list').append($anchor);
          });
        } else if (type_search === "club") {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/clubs/" + item.slug,
              "class": "search-result__item"
            });
            var $imageDiv = $('<div>', {
              "class": "search-result__image"
            }).append($('<img>', {
              src: item.image,
              alt: "Аватар"
            }));
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($imageDiv, $nameDiv);
            $('.search-result__list').append($anchor);
          });
        } else if (type_search === "card") {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/cards/" + item.id + '/users/',
              "class": "search-result__item"
            });
            var $imageDiv = $('<div>', {
              "class": "search-result__image"
            }).append($('<img>', {
              src: '/img/cards/' + item.image,
              alt: "Аватар"
            }));
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($imageDiv, $nameDiv);
            $('.search-result__list').append($anchor);
          });
        } else if (type_search === "collection") {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/collections/" + item.id,
              "class": "search-result__item"
            });
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($nameDiv);
            $('.search-result__list').append($anchor);
          });
        } else if (type_search === "deck") {
          response.forEach(function (item) {
            var $anchor = $('<a>', {
              href: "/decks/" + item.id,
              "class": "search-result__item"
            });
            var $nameDiv = $('<div>', {
              "class": "search-result__name"
            }).text(item.name);
            $anchor.append($nameDiv);
            $('.search-result__list').append($anchor);
          });
        }
        if (response.length === 0) {
          $('.search-result__list').append("<span class=\"search-result__empty\">Ничего не найдено...</span>");
        }
        if (type_search === 'manga' && response.length > 5) {
          var $showAllLink = $('<a>', {
            href: "/search?q=" + encodeURIComponent(query),
            text: "Показать все",
            "class": "search-result__more"
          });
          $('.search-result__list').append($showAllLink);
        }
      }
    });
  }
  var debouncedInput = _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.debounce(handleInput);
  $('.search-bar__input').on('input', debouncedInput);

  /* typehead*/
  var manga_search = new Bloodhound({
    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    remote: {
      url: '/search/suggestions?q=%QUERY',
      wildcard: '%QUERY'
    }
  });
  manga_search.initialize();
  $('.manga-typehead').typeahead({
    hint: false,
    highlight: false,
    minLength: 1
  }, {
    name: 'manga_search',
    display: 'name',
    limit: Infinity,
    templates: {
      empty: ['<div class="suggestion__empty">', 'Ничего не найдено...', '</div>'].join('\n'),
      suggestion: function suggestion(e) {
        return '<a href="/manga/' + e.slug + '" class="suggestion__item" data-manga=\'' + JSON.stringify(e) + '\'><div class="suggestion__info"><div class="suggestion__image"><img src="/x70' + e.image + '" alt="Постер ' + e.name + '"></div><div class="suggestion__name">' + e.name + '</div><div class="suggestion__rating ' + _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.classForSearchRating(e.rating) + '">' + e.rating + '</div></div></a>';
      }
    },
    source: manga_search.ttAdapter()
  });
  if ($('.modal--search').length) {
    loadHistory();
  }
}
function loadHistory() {
  var searchHistory = JSON.parse(localStorage.getItem('searchHistory') || '[]');
  if (searchHistory.length === 0) {
    $('.search-bar__history').remove();
  } else {
    searchHistory.forEach(function (item) {
      $('<a>', {
        href: item.link,
        "class": 'search-bar__history-item'
      }).append($('<div>', {
        "class": 'search-bar__history-name',
        text: item.query
      })).append($('<div>', {
        "class": 'search-bar__history-date',
        text: item.date
      })).appendTo('.search-bar__history');
    });
  }
}
function addToHistory(query, link) {
  var currentDate = new Date().toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit'
  });
  var history = JSON.parse(localStorage.getItem('searchHistory')) || [];
  history = history.filter(function (item) {
    return item.query !== query;
  });
  history.unshift({
    query: query,
    link: link,
    date: currentDate
  });
  if (history.length > 5) {
    history.pop();
  }
  localStorage.setItem('searchHistory', JSON.stringify(history));
}

/***/ }),

/***/ "./resources/js/modules/socketManager.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/socketManager.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var socketChat;
try {
  socketChat = io("wss://wss10.mangabuff.ru:443/", {
    transports: ['websocket']
  });
} catch (error) {
  console.error('Ошибка при создании сокета:', error);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socketChat);

/***/ }),

/***/ "./resources/js/modules/statusModule.js":
/*!**********************************************!*\
  !*** ./resources/js/modules/statusModule.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeStatus": () => (/* binding */ initializeStatus)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeStatus() {
  $('body').on('click', '.status__item', function () {
    var button = $(this);
    if (button.hasClass("status__item--active")) return false;
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/status', {
      id: id
    }, button, function (result) {
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
      $('.status__item').removeClass('status__item--active');
      button.addClass('status__item--active');
    });
  });
  $('body').on('click', '.status__role', function () {
    var button = $(this);
    var id = button.attr('data-id');
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/settings/role', {
      id: id
    }, button, function (result) {
      $('.status__role').removeClass('status__role--active');
      button.addClass('status__role--active');
    });
  });
}

/***/ }),

/***/ "./resources/js/modules/stickerModule.js":
/*!***********************************************!*\
  !*** ./resources/js/modules/stickerModule.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeSticker": () => (/* binding */ initializeSticker)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeSticker() {
  $('body').on('click', '.sticker__item', function () {
    if (_commonFunctions__WEBPACK_IMPORTED_MODULE_0__.isGuest()) return false;
    var button = $(this);
    var is_available = $(this).closest('.sticker__list').hasClass('sticker__list--available');
    if (!is_available) {
      toastr.error("Что бы использовать этот стикер, приобретите его в <a href='/products'>магазине</a>");
      return false;
    }
    var sticker_id = $(this).attr('data-id');
    updateStickerHistory(sticker_id, $(this).find('img').attr('src'));
    if ($(this).closest('.comments').length) {
      var commentable_id = $('.comments').attr('data-id');
      var commentable_type = $('.comments').attr('data-type');
      var form = $(this).closest('.comments__send-form');
      var parent = $(this).closest('.comments__item');
      var parent_id = parent.length ? parent.attr('id').replace('comment_', '') : null;
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post("/comments", {
        'text': 'sticker_only',
        'commentable_id': commentable_id,
        'commentable_type': commentable_type,
        'parent_id': parent_id,
        'sticker_id': sticker_id
      }, button, function (result) {
        if (parent_id) {
          form.closest('.comments__item').find('.comments__children').first().prepend(result.comment);
          form.remove();
        } else {
          $('.comments__list').prepend(result.comment);
          form.find('textarea').val("");
        }
        var comments_count = $('.comments').prev().find('.secondary-text');
        comments_count.text(Number(comments_count.text() ? comments_count.text() : 0) + 1);
        tippy.hideAll();
      });
    } else if ($(this).closest('.messages').length) {
      var toWhoId = $('.messages__chat').attr('data-user-id');
      var chat_body = $('.chat__body');
      var _button = $('.chat__send-btn');
      $('.chat__form-area').val("");
      _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.post('/messages/' + toWhoId, {
        'text': 'sticker',
        'sticker_id': sticker_id
      }, _button, function (result) {
        $('.not-found').remove();
        chat_body.append(result);
        chat_body.scrollTop(chat_body.prop("scrollHeight"));
        tippy.hideAll();
      });
    }
  });
  tippy.delegate('body', {
    target: '.comments__actions-btn--sticker',
    content: '',
    allowHTML: true,
    theme: 'sticker-list',
    placement: 'top',
    trigger: 'click',
    arrow: false,
    interactive: true,
    onCreate: function onCreate(instance) {
      instance.is_done = false;
    },
    onShow: function onShow(instance) {
      if (instance.is_done) return;
      instance.is_done = true;
      $.ajax({
        url: '/stickers',
        method: 'post',
        data: {
          stickerHistory: JSON.stringify(JSON.parse(localStorage.getItem('sticker_history')) || [])
        },
        success: function success(data) {
          instance.setContent(data.content);
        }
      });
    }
  });
  function updateStickerHistory(key, value) {
    // Получаем текущий массив из localStorage или инициализируем его, если он не существует
    var stickerHistory = JSON.parse(localStorage.getItem('sticker_history')) || [];

    // Проверяем, существует ли уже элемент с таким же ключом
    var existingIndex = stickerHistory.findIndex(function (item) {
      return item.key === key;
    });

    // Если элемент существует, удаляем его
    if (existingIndex !== -1) {
      stickerHistory.splice(existingIndex, 1);
    }

    // Добавляем новый элемент в начало массива
    stickerHistory.unshift({
      key: key,
      value: value
    });

    // Если массив превышает 20 элементов, удаляем самые старые
    if (stickerHistory.length > 20) {
      stickerHistory.length = 20;
    }

    // Сохраняем обновленный массив обратно в localStorage
    localStorage.setItem('sticker_history', JSON.stringify(stickerHistory));
  }
}

/***/ }),

/***/ "./resources/js/modules/tenorModule.js":
/*!*********************************************!*\
  !*** ./resources/js/modules/tenorModule.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializeTenor": () => (/* binding */ initializeTenor)
/* harmony export */ });
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions */ "./resources/js/modules/commonFunctions.js");

function initializeTenor() {
  $('body').on('click', '.comments__actions-btn--gif', function () {
    if (!window.isPro) {
      window.location.href = '/pro';
      return false;
    }
    if ($('.modal-tenor__result img').length == 0) {
      addDefaultGifs();
    }
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.openModal('modal-tenor');
    return false;
  });
  $('body').on('click', '.modal-tenor__search-btn', function (e) {
    var stop_w = ["lgbt", "lgbtq", "lgbtq+", "pride", "gay", "gays", "boy love", "bl", "yaoi", "yuri", "mlm", "wlw", "queer", "bisexual", "trans", "nonbinary", "genderfluid", "genderqueer", "pansexual", "asexual", "polyamory", "polyamorous", "лгбт", "лгбт+", "гей", "геи", "геев", "гей-пара", "гей любовь", "гей парни", "лесбиянки", "лесби", "лесби пара", "яой", "юри", "бисексуал", "бисексуалы", "транс", "трансгендер", "небинарный", "квир", "пансексуал", "асексуал", "полигамия", "однополая пара", "boys kiss", "girls kiss", "gay kiss", "lesbian kiss", "bl kiss", "yaoi kiss", "yuri kiss", "mlm couple", "wlw couple", "gay couple", "lesbian couple", "pride couple", "pride love", "парни целуются", "девушки целуются", "геи целуются", "лесбиянки целуются", "гей-поцелуй", "лесби-поцелуй", "яойный поцелуй", "юрийный поцелуй", "геевская пара", "лесбийская пара", "яойная пара", "юрийная пара", "гей любовь", "лесби любовь", "любовь без границ", "rainbow", "rainbow flag", "pride flag", "pride month", "love wins", "love is love", "pride parade", "gay rights", "lesbian rights", "trans rights", "bi pride", "pan pride", "ace pride", "aro pride", "nonbinary pride", "they/them", "he/they", "she/they", "genderfluid pride", "androgynous", "femboy", "tomgirl", "butch", "soft boy", "twink", "bear", "daddy", "otter", "bara", "shounen-ai", "shoujo-ai", "gay furry", "lesbian furry", "futa", "прайд", "прайд-флаг", "прайд парад", "права геев", "права ЛГБТ", "права лесбиянок", "права трансгендеров", "гомосексуал", "гомосексуальность", "гомосексуальный", "гомосексуальная пара", "гомосексуальная любовь", "лесбийская любовь", "однополый брак", "однополые отношения", "небинарные люди", "гендерквир", "фембой", "тянка", "гомо", "шипперить геев", "шипперить лесбиянок", "фемслэш", "мальчик в юбке", "андрогин", "андроидгендер", "boyxboy", "girlxgirl", "bxb", "gxb", "g x g", "b x b", "bl anime", "yaoi anime", "yuri anime", "yaoi couple", "yuri couple", "bl drama", "shounen-ai anime", "shoujo-ai anime", "trap", "reverse trap", "futa love", "bara couple", "bara gay", "b o y s k i s s", "b o y s k i  s s", "b o y s  k i s s", "b o y s  k i  s s", "b o y s    k i s s", "b o y  l o v e", "g a y  c o u p l e", "y a o i  k i s s", "w l w  l o v e", "b o y  x  b o y", "g i r l  x  g i r l", "b x b", "g x g", "y a o i  c o u p l e", "b a r a  l o v e", "l e s b i a n  l o v e", "g e n d e r q u e e r", "p r i d e  f l a g", "п а р н и ц е л у ю т с я", "п а р н и ц е л у ю т  с я", "п а р н и  ц е л у ю т с я", "п а р н и    ц е л у ю т с я", "г е й  п а р а", "г е и  ц е л у ю т с я", "я о й  п о ц е л у й", "л е с б и  п а р а", "г е й  л ю б о в ь"];
    var searchQuery = $('.modal-tenor__query').val().toLowerCase();
    if (stop_w.some(function (word) {
      return searchQuery.includes(word);
    })) {
      e.preventDefault();
      toastr.error("Ваш запрос содержит запрещённые слова.");
      return;
    }
    grab_data(searchQuery);
  });
  $('body').on('click', '.modal-tenor__load-trigger', function () {
    var searchQuery = $('.modal-tenor__query').val();
    var next_token = $('.modal-tenor__load-trigger').attr('data-next');
    if (next_token) {
      grab_data(searchQuery, next_token);
    }
  });
  $('.modal-tenor__query').on('keypress', function (e) {
    var stop_w = ["lgbt", "lgbtq", "lgbtq+", "pride", "gay", "gays", "boy love", "bl", "yaoi", "yuri", "mlm", "wlw", "queer", "bisexual", "trans", "nonbinary", "genderfluid", "genderqueer", "pansexual", "asexual", "polyamory", "polyamorous", "лгбт", "лгбт+", "гей", "геи", "геев", "гей-пара", "гей любовь", "гей парни", "лесбиянки", "лесби", "лесби пара", "яой", "юри", "бисексуал", "бисексуалы", "транс", "трансгендер", "небинарный", "квир", "пансексуал", "асексуал", "полигамия", "однополая пара", "boys kiss", "girls kiss", "gay kiss", "lesbian kiss", "bl kiss", "yaoi kiss", "yuri kiss", "mlm couple", "wlw couple", "gay couple", "lesbian couple", "pride couple", "pride love", "парни целуются", "девушки целуются", "геи целуются", "лесбиянки целуются", "гей-поцелуй", "лесби-поцелуй", "яойный поцелуй", "юрийный поцелуй", "геевская пара", "лесбийская пара", "яойная пара", "юрийная пара", "гей любовь", "лесби любовь", "любовь без границ", "rainbow", "rainbow flag", "pride flag", "pride month", "love wins", "love is love", "pride parade", "gay rights", "lesbian rights", "trans rights", "bi pride", "pan pride", "ace pride", "aro pride", "nonbinary pride", "they/them", "he/they", "she/they", "genderfluid pride", "androgynous", "femboy", "tomgirl", "butch", "soft boy", "twink", "bear", "daddy", "otter", "bara", "shounen-ai", "shoujo-ai", "gay furry", "lesbian furry", "futa", "прайд", "прайд-флаг", "прайд парад", "права геев", "права ЛГБТ", "права лесбиянок", "права трансгендеров", "гомосексуал", "гомосексуальность", "гомосексуальный", "гомосексуальная пара", "гомосексуальная любовь", "лесбийская любовь", "однополый брак", "однополые отношения", "небинарные люди", "гендерквир", "фембой", "тянка", "гомо", "шипперить геев", "шипперить лесбиянок", "фемслэш", "мальчик в юбке", "андрогин", "андроидгендер", "boyxboy", "girlxgirl", "bxb", "gxb", "g x g", "b x b", "bl anime", "yaoi anime", "yuri anime", "yaoi couple", "yuri couple", "bl drama", "shounen-ai anime", "shoujo-ai anime", "trap", "reverse trap", "futa love", "bara couple", "bara gay", "b o y s k i s s", "b o y s k i  s s", "b o y s  k i s s", "b o y s  k i  s s", "b o y s    k i s s", "b o y  l o v e", "g a y  c o u p l e", "y a o i  k i s s", "w l w  l o v e", "b o y  x  b o y", "g i r l  x  g i r l", "b x b", "g x g", "y a o i  c o u p l e", "b a r a  l o v e", "l e s b i a n  l o v e", "g e n d e r q u e e r", "p r i d e  f l a g", "п а р н и ц е л у ю т с я", "п а р н и ц е л у ю т  с я", "п а р н и  ц е л у ю т с я", "п а р н и    ц е л у ю т с я", "г е й  п а р а", "г е и  ц е л у ю т с я", "я о й  п о ц е л у й", "л е с б и  п а р а", "г е й  л ю б о в ь"];
    if (e.which == 13) {
      var searchQuery = $(this).val().toLowerCase().trim();
      if (stop_w.some(function (word) {
        return searchQuery.includes(word);
      })) {
        e.preventDefault();
        $(this).val('');
        toastr.error("Ваш запрос содержит запрещённые слова.");
        return;
      }
      grab_data(searchQuery);
    }
  });
  $('body').on('click', '.modal-tenor__result video', function () {
    var imageSrc = $(this).find('source').attr('src');
    addToGifHistory(imageSrc);
    var $imageContainer = $('.comments__send-form .comments__send-form-image');
    if ($imageContainer.length > 0) {
      $imageContainer.remove();
    }
    var htmlContent = "\n        <div class=\"comments__send-form-image\">\n            <div class=\"comments__send-form-image-close\">\n                <button class=\"comments__send-form-image-button\"><i class=\"icon icon-close\"></i></button>\n            </div>\n            <video src=\"".concat(imageSrc, "\" preload=\"auto\" autoplay=\"true\" playsinline=\"true\" loop=\"true\" muted=\"true\">\n        </div>");
    $('.comments__send-form textarea').after(htmlContent);
    _commonFunctions__WEBPACK_IMPORTED_MODULE_0__.closeModals();
  });
  $('body').on('click', '.comments__send-form-image-close', function () {
    $('.comments__send-form-image').remove();
  });
}
function httpGetAsync(theUrl, callback) {
  var xmlHttp = new XMLHttpRequest();
  xmlHttp.onreadystatechange = function () {
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      callback(xmlHttp.responseText);
    }
  };
  xmlHttp.open("GET", theUrl, true);
  xmlHttp.send(null);
}
function tenorCallback_search(responsetext) {
  var response_objects = typeof responsetext === 'string' ? JSON.parse(responsetext) : responsetext;
  if (response_objects['next']) {
    $('.modal-tenor__load-trigger').attr('data-next', response_objects['next']);
  }
  var top_10_gifs = response_objects["results"];
  var container = document.querySelector('.modal-tenor__result');

  // Определение количества столбцов в зависимости от ширины экрана
  var columnCount = window.innerWidth < 600 ? 2 : 4;

  // Очищаем контейнер и создаем столбцы для гифок
  container.innerHTML = '';
  var columns = [];
  for (var i = 0; i < columnCount; i++) {
    var column = document.createElement('div');
    column.className = 'modal-tenor__column';
    container.appendChild(column);
    columns.push(column);
  }

  // Распределяем гифки по столбцам
  top_10_gifs.forEach(function (gif, index) {
    var gifUrl = gif.media_formats.tinymp4.url;
    var video = document.createElement('video');
    var source = document.createElement('source');
    source.src = gifUrl;
    source.type = 'video/mp4';
    video.appendChild(source);
    video.setAttribute('webkit-playsinline', 'true');
    video.setAttribute('playsinline', 'true');
    video.autoplay = true;
    video.muted = true;
    video.loop = true;
    video.setAttribute('pip', 'false');
    columns[index % columnCount].appendChild(video);
  });
}
function grab_data(search_term) {
  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (!search_term) {
    var initialGifs = createGifObject(loadGifHistory(initialGifsArray));
    tenorCallback_search(initialGifs);
    $('.modal-tenor__load-trigger').attr('data-next', "");
    return false;
  }
  var apikey = "AIzaSyDKNX5_CgpYJtdXknxUxhKkssEUsp_ARPU";
  var clientkey = "user_1";
  var lmt = 30;
  var search_url = "https://tenor.googleapis.com/v2/search?q=" + encodeURIComponent(search_term) + "&key=" + apikey + "&client_key=" + clientkey + "&limit=" + lmt + "&locale=ru_RU&country=RU&media_filter=tinymp4&contentfilter=low";
  if (next) {
    search_url += "&pos=" + encodeURIComponent(next);
  }
  httpGetAsync(search_url, tenorCallback_search);
}
function createGifObject(urls) {
  var gifObject = {
    "results": []
  };
  urls.forEach(function (url) {
    var gifEntry = {
      "media_formats": {
        "tinymp4": {
          "url": url
        }
      }
    };
    gifObject.results.push(gifEntry);
  });
  return gifObject;
}
function addToGifHistory(url) {
  var history = JSON.parse(localStorage.getItem('gifHistory')) || [];
  if (!history.includes(url)) {
    history.unshift(url);
    if (history.length > 20) {
      history = history.slice(0, 20);
    }
    localStorage.setItem('gifHistory', JSON.stringify(history));
  }
}
var initialGifsArray = ['https://media.tenor.com/8-GuLDkwPegAAAP1/friends-friends-tv.mp4', 'https://media.tenor.com/uC-WfNdy66gAAAP1/shrekz-m%C3%A5ns.mp4', 'https://media.tenor.com/7t63GFnoIPUAAAP1/huh-cat-huh-m4rtin.mp4', 'https://media.tenor.com/5ZCQB5kXCvAAAAP1/aa.mp4', 'https://media.tenor.com/yNMGjXsoYGUAAAP1/cat-cats.mp4', 'https://media.tenor.com/zZ0Addx96t4AAAP1/nere-cristiano.mp4', 'https://media.tenor.com/gIBSNOftpWYAAAP1/confused-wtf.mp4', 'https://media.tenor.com/epNMHGvRyHcAAAP1/gigachad-chad.mp4', 'https://media.tenor.com/VWVqAnZZIDQAAAP1/cat-happy.mp4', 'https://media.tenor.com/J7pPeAT--vMAAAP1/2seokerrr-the-rock.mp4', 'https://media.tenor.com/W5Or9vSpgCAAAAP1/pepe-wink-pepe.mp4', 'https://media.tenor.com/vaXZpS8LlM4AAAP1/pepe-pepe-coin.mp4', 'https://media.tenor.com/_umoA_JMjIEAAAP1/magic7od.mp4', 'https://media.tenor.com/NguN9YGX1rsAAAP1/the-simpsons-homer.mp4', 'https://media.tenor.com/jDzuJe3ss3wAAAP1/zero-two-darling-in-the-franxx.mp4', 'https://media.tenor.com/6HCF0J_4mEYAAAP1/yay-sponge-bob.mp4', 'https://media.tenor.com/Pq5EqV3tfrMAAAP1/cat-scream-cat-screaming.mp4', 'https://media.tenor.com/svILaJSEmxoAAAP1/spaced-out-cat-staring.mp4', 'https://media.tenor.com/Ze9Y5V0mxO0AAAP1/grumpy-cat.mp4', 'https://media.tenor.com/DRBigUyhcd0AAAP1/patapata.mp4', 'https://media.tenor.com/pgqf6BDXADIAAAP1/the-office-steve-carell.mp4', 'https://media.tenor.com/a_Z2fB__9ioAAAP1/barbie-ryan-gosling.mp4', 'https://media.tenor.com/BT_yFjR1X-AAAAP1/shutup-shutupandtakemymoney.mp4', 'https://media.tenor.com/UgzHutno_5wAAAP1/popcorn-watching.mp4', 'https://media.tenor.com/OK80IMKatuAAAAP1/mremmet66.mp4'];
function loadGifHistory(initialGifsArray) {
  var history = JSON.parse(localStorage.getItem('gifHistory')) || [];
  history.forEach(function (url) {
    if (!initialGifsArray.includes(url) && url && url.endsWith('.mp4')) {
      initialGifsArray.unshift(url);
    }
  });
  return initialGifsArray;
}
function addDefaultGifs() {
  var initialGifs = createGifObject(loadGifHistory(initialGifsArray));
  tenorCallback_search(initialGifs);
}

/***/ }),

/***/ "./resources/css/app.scss":
/*!********************************!*\
  !*** ./resources/css/app.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/manga": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/css/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;