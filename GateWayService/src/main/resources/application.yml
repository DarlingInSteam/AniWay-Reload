server:
  port: 8080

spring:
  application:
    name: gateway-service
  
  # File upload configuration for Gateway
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 2GB

  cloud:
    gateway:
      # Глобальные CORS настройки
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origin-patterns: 
              - "http://localhost:*"     # Все localhost порты
              - "http://127.0.0.1:*"     # Все 127.0.0.1 порты
              - "http://192.168.*.*:*"   # Локальная сеть 192.168.x.x
              - "http://10.*.*.*:*"      # Локальная сеть 10.x.x.x
              - "http://172.16.*.*:*"    # Частная сеть 172.16.x.x
              - "http://172.17.*.*:*"    # Docker сеть 172.17.x.x
              - "http://172.18.*.*:*"    # Docker сеть 172.18.x.x
              - "http://*.*.*.*"         # Любые HTTP IP адреса
              - "https://*.*.*.*"        # Любые HTTPS IP адреса  
              - "http://*.yandexcloud.net" # Yandex Cloud
              - "https://*.yandexcloud.net" # Yandex Cloud HTTPS
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - HEAD
              - PATCH
            allowed-headers:
              - "*"
            allow-credentials: true
            max-age: 3600

      # Маршруты к микросервисам
      routes:
        # MangaService - WebSocket endpoints (НАИВЫСШИЙ ПРИОРИТЕТ)
        - id: manga-websocket
          uri: ws://manga-service:8081
          predicates:
            - Path=/api/manga/ws/**
          filters:
            - StripPrefix=3  # Исправляем: удаляем /api/manga/ws, оставляем /progress
          order: 0

        # AuthService - Authentication and user management (HIGH PRIORITY)
        - id: auth-api
          uri: http://auth-service:8085
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=0
          order: 1

        # AuthService - User management
        - id: users-api
          uri: http://auth-service:8085
          predicates:
            - Path=/api/users/**
          filters:
            - StripPrefix=0
          order: 2

        # AuthService - Bookmarks
        - id: bookmarks-api
          uri: http://auth-service:8085
          predicates:
            - Path=/api/bookmarks/**
          filters:
            - StripPrefix=0
          order: 3

        # AuthService - Reading progress
        - id: progress-api
          uri: http://auth-service:8085
          predicates:
            - Path=/api/progress/**
          filters:
            - StripPrefix=0
          order: 4

        # CommentService - Comments API
        - id: comments-api
          uri: http://comment-service:8086
          predicates:
            - Path=/api/comments/**
          filters:
            - StripPrefix=0
          order: 5

        # MangaService - Parser API endpoints (ВЫСОКИЙ ПРИОРИТЕТ)
        - id: manga-parser
          uri: http://manga-service:8081
          predicates:
            - Path=/api/parser/**
          filters:
            - StripPrefix=1
          order: 6

        # MangaService - Parser Web UI (веб-интерфейс парсера)
        - id: manga-parser-web
          uri: http://manga-service:8081
          predicates:
            - Path=/parser/**
          filters:
            - StripPrefix=0
          order: 7

        # MangaService - API endpoints
        - id: manga-api
          uri: http://manga-service:8081
          predicates:
            - Path=/api/manga/**
          filters:
            - StripPrefix=0

        # MangaService - Web UI (Thymeleaf страницы)
        - id: manga-web
          uri: http://manga-service:8081
          predicates:
            - Path=/manga/**
          filters:
            - StripPrefix=0

        # MangaService - Reader
        - id: manga-reader
          uri: http://manga-service:8081
          predicates:
            - Path=/reader/**
          filters:
            - StripPrefix=0

        # MangaService - Chapters Web UI
        - id: chapters-web
          uri: http://manga-service:8081
          predicates:
            - Path=/chapters/**
          filters:
            - StripPrefix=0

        # ChapterService - API endpoints
        - id: chapter-api
          uri: http://chapter-service:8082
          predicates:
            - Path=/api/chapters/**
          filters:
            - StripPrefix=0

        # ImageStorageService - API endpoints
        - id: images-api
          uri: http://image-storage-service:8083
          predicates:
            - Path=/api/images/**
          filters:
            - StripPrefix=0

        # Статические ресурсы MangaService (favicon, CSS, JS)
        - id: manga-static
          uri: http://manga-service:8081
          predicates:
            - Path=/favicon.ico,/static/**,/css/**,/js/**,/images/**
          filters:
            - StripPrefix=0

        # MelonService - Direct parser API endpoints (обходной маршрут)
        - id: melon-direct
          uri: http://melon-service:8084
          predicates:
            - Path=/api/melon/**
          filters:
            - StripPrefix=2

      # Настройки тайм-аутов
      httpclient:
        connect-timeout: 10000
        response-timeout: 60000  # Увеличиваем до 60 секунд для долгих операций парсинга

# Actuator для мониторинга
management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway
  endpoint:
    health:
      show-details: when-authorized

# Логирование
logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.web.cors: INFO
    shadowshift.studio.gatewayservice: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
