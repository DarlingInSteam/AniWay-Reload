networks:
  aniway-network:
    driver: bridge

services:
  # PostgreSQL databases for each service
  manga-postgres:
    image: postgres:16
    container_name: manga-postgres
    environment:
      POSTGRES_DB: manga_db
      POSTGRES_USER: manga_user
      POSTGRES_PASSWORD: manga_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5435:5432"
    volumes:
      - manga_postgres_data:/var/lib/postgresql/data
      - ./MangaService/mangaDB.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U manga_user -d manga_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  chapter-postgres:
    image: postgres:16
    container_name: chapter-postgres
    environment:
      POSTGRES_DB: chapter_db
      POSTGRES_USER: chapter_user
      POSTGRES_PASSWORD: chapter_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - chapter_postgres_data:/var/lib/postgresql/data
      - ./ChapterService/chapterDB.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chapter_user -d chapter_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  image-storage-postgres:
    image: postgres:16
    container_name: image-storage-postgres
    environment:
      POSTGRES_DB: image_storage_db
      POSTGRES_USER: image_user
      POSTGRES_PASSWORD: image_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5434:5432"
    volumes:
      - image_storage_postgres_data:/var/lib/postgresql/data
      - ./ImageStorageService/imageStorageDB.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U image_user -d image_storage_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-postgres:
    image: postgres:16
    container_name: auth-postgres
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5436:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
      - ./AuthService/authDB.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  comment-postgres:
    image: postgres:16
    container_name: comment-postgres
    environment:
      POSTGRES_DB: comment_db
      POSTGRES_USER: comment_user
      POSTGRES_PASSWORD: comment_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5437:5432"
    volumes:
      - comment_postgres_data:/var/lib/postgresql/data
      - ./CommentService/commentDB.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comment_user -d comment_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for image storage
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - aniway-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO initialization service
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./init-minio.sh:/init-minio.sh
    networks:
      - aniway-network
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc alias set minio-local http://minio:9000 minioadmin minioadmin &&
      mc mb minio-local/manga-images --ignore-existing &&
      mc anonymous set public minio-local/manga-images &&
      echo 'MinIO initialization completed'
      "
    restart: "no"

  # Image Storage Service
  image-storage-service:
    build:
      context: ./ImageStorageService
      dockerfile: Dockerfile
    container_name: image-storage-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://image-storage-postgres:5432/image_storage_db
      - SPRING_DATASOURCE_USERNAME=image_user
      - SPRING_DATASOURCE_PASSWORD=image_password
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_PUBLIC_ENDPOINT=http://192.168.0.3:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MANGA_SERVICE_URL=http://manga-service:8081
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
    ports:
      - "8083:8083"
    volumes:
      - melon_data:/app/Output  # Общий том с MelonService для доступа к скачанным изображениям
    depends_on:
      image-storage-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aniway-network
    restart: unless-stopped

  # Chapter Service
  chapter-service:
    build:
      context: ./ChapterService
      dockerfile: Dockerfile
    container_name: chapter-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://chapter-postgres:5432/chapter_db
      - SPRING_DATASOURCE_USERNAME=chapter_user
      - SPRING_DATASOURCE_PASSWORD=chapter_password
      - MANGA_SERVICE_URL=http://manga-service:8081
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8082:8082"
    depends_on:
      chapter-postgres:
        condition: service_healthy
    networks:
      - aniway-network
    restart: unless-stopped

  # Manga Service
  manga-service:
    build:
      context: ./MangaService
      dockerfile: Dockerfile
    container_name: manga-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://manga-postgres:5432/manga_db
      - SPRING_DATASOURCE_USERNAME=manga_user
      - SPRING_DATASOURCE_PASSWORD=manga_password
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MELON_SERVICE_URL=http://melon-service:8084
      - MELON_SERVICE_PUBLIC_URL=http://192.168.0.3:8084
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8081:8081"
    depends_on:
      manga-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aniway-network
    restart: unless-stopped

  # Gateway Service
  gateway-service:
    build:
      context: ./GateWayService
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANGA_SERVICE_URL=http://manga-service:8081
      - CHAPTER_SERVICE_URL=http://chapter-service:8082
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8083
    ports:
      - "8080:8080"
    depends_on:
      - manga-service
      - chapter-service
      - image-storage-service
      - auth-service
    networks:
      - aniway-network
    restart: unless-stopped

  # MelonService - парсер манги
  melon-service:
    build:
      context: ./MelonService
      dockerfile: Dockerfile
    container_name: melon-service
    ports:
      - "8084:8084"
    volumes:
      - melon_data:/app/Output
      - melon_logs:/app/Logs
      - melon_temp:/app/Temp
    networks:
      - aniway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=auth_user
      - SPRING_DATASOURCE_PASSWORD=auth_password
      - JWT_SECRET=mySecretKey12345678901234567890123456789012345678901234567890
      - JWT_EXPIRATION=86400000
      - MANGA_SERVICE_URL=http://manga-service:8081
    ports:
      - "8085:8085"
    depends_on:
      auth-postgres:
        condition: service_healthy
    networks:
      - aniway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Comment Service
  comment-service:
    build:
      context: ./CommentService
      dockerfile: Dockerfile
    container_name: comment-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://comment-postgres:5432/comment_db
      - SPRING_DATASOURCE_USERNAME=comment_user
      - SPRING_DATASOURCE_PASSWORD=comment_password
      - JWT_SECRET=mySecretKey12345678901234567890123456789012345678901234567890
      - JWT_EXPIRATION=86400000
      - AUTH_SERVICE_URL=http://auth-service:8085
    ports:
      - "8086:8086"
    depends_on:
      comment-postgres:
        condition: service_healthy
    networks:
      - aniway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./AniWayFrontend
      dockerfile: Dockerfile
    container_name: aniway-frontend
    ports:
      - "3000:80"
    depends_on:
      - gateway-service
    networks:
      - aniway-network
    restart: unless-stopped

volumes:
  manga_postgres_data:
  chapter_postgres_data:
  image_storage_postgres_data:
  auth_postgres_data:
  comment_postgres_data:
  minio_data:
  melon_data:
  melon_logs:
  melon_temp:
